{"version":3,"file":"Select.js","sources":["../../../../src/components/Form/Fields/Select.tsx"],"sourcesContent":["import React from \"react\";\nimport { Controller, type Path, useFormContext } from \"react-hook-form\";\nimport FormField from \"../../vendor/FormField.jsx\";\nimport { Select as BaseSelect } from \"../../vendor/Select/index.js\";\n\nexport type SelectProps = {\n  /**\n   * Whether or the field can be cleared by the user.\n   *\n   * When `true`, the Select will render an icon that allows the user to clear the current selected\n   * value. The icon does not appear when no value is selected.\n   *\n   * @default false\n   */\n  clearable?: boolean | undefined;\n\n  /**\n   * If `true`, the component is disabled.\n   *\n   * @default false\n   */\n  disabled?: boolean | undefined;\n\n  /**\n   * An error message to display below the element when in an invalid state.\n   */\n  error?: { message?: string | undefined } | undefined;\n\n  /**\n   * Explanatory text to render below the element.\n   */\n  helpText?: React.ReactNode | undefined;\n\n  /**\n   * A user-friendly label displayed alongside the element.\n   */\n  label?: string | undefined;\n\n  /**\n   * A unique name identifying the element within a form.\n   */\n  name?: string | undefined;\n\n  /**\n   * <!-- TODO(ndhoule): Document me -->\n   */\n  options: { label: string; value: string }[] | undefined;\n\n  /**\n   * Placeholder text displayed when no value is selected.\n   */\n  placeholder?: string | undefined;\n\n  /**\n   * When `true`, the element will be invalid when touched and no selection has been made.\n   *\n   * @default false\n   */\n  required?: boolean | undefined;\n};\n\n/**\n * Select components give users the ability to choose one or more options from a list of choices.\n *\n * <!-- TODO(ndhoule): Add a screenshot here -->\n *\n * @param props\n * @see {@link Form}\n * @example\n * ```tsx\n * import { Select } from \"@netlify/sdk/react/components\";\n *\n * <Select\n *   label=\"Your Favorite Dog\"\n *   name=\"favoriteDog\"\n *   options={[\n *     { label: \"Corgi\", value: \"corgi\" },\n *     { label: \"Golden Retriever\", value: \"golden-retriever\" },\n *     { label: \"Pomeranian\", value: \"pomeranian\" },\n *   ]}\n * />\n * ```\n */\nexport const Select = <FieldValues extends Record<string, unknown>>({\n  label,\n  helpText,\n  name,\n  options,\n  required,\n  disabled,\n  error,\n  clearable: isClearable,\n  ...otherProps\n}: SelectProps) => {\n  const { control } = useFormContext<FieldValues>();\n\n  return (\n    <Controller\n      name={name as unknown as Path<FieldValues>}\n      control={control}\n      render={({ field, fieldState, formState }) => {\n        return (\n          <FormField\n            disabled={disabled}\n            error={error?.message ?? fieldState.error?.message}\n            helpText={helpText}\n            label={label}\n            control={\n              <BaseSelect\n                {...field}\n                valueOnly\n                required={required}\n                options={options}\n                isClearable={isClearable}\n                isDisabled={formState.disabled || disabled}\n                {...otherProps}\n              />\n            }\n          />\n        );\n      }}\n    />\n  );\n};\n"],"names":["BaseSelect"],"mappings":";;;;;AAmFO,MAAM,SAAS,CAA8C;AAAA,EAClE;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,WAAW;AAAA,EACX,GAAG;AACL,MAAmB;AACjB,QAAM,EAAE,QAAA,IAAY,eAAA;AAEpB,SACE;AAAA,IAAC;AAAA,IAAA;AAAA,MACC;AAAA,MACA;AAAA,MACA,QAAQ,CAAC,EAAE,OAAO,YAAY,gBAAgB;;AAC5C,eACE;AAAA,UAAC;AAAA,UAAA;AAAA,YACC;AAAA,YACA,QAAO,+BAAO,cAAW,gBAAW,UAAX,mBAAkB;AAAA,YAC3C;AAAA,YACA;AAAA,YACA,SACE;AAAA,cAACA;AAAAA,cAAA;AAAA,gBACE,GAAG;AAAA,gBACJ,WAAS;AAAA,gBACT;AAAA,gBACA;AAAA,gBACA;AAAA,gBACA,YAAY,UAAU,YAAY;AAAA,gBACjC,GAAG;AAAA,cAAA;AAAA,YAAA;AAAA,UACN;AAAA,QAAA;AAAA,MAIR;AAAA,IAAA;AAAA,EAAA;AAGN;"}