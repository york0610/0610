import type { HandlerContext, HandlerEvent, HandlerResponse } from "@netlify/functions";
import { BuildHookFunction, NetlifySDKContext, BuildHookType } from "../index.js";
export type FunctionHandler<Context = any> = (event: HandlerEvent, context: HandlerContext & Context) => Promise<HandlerResponse>;
export type BuildHooks = Record<BuildHookType, BuildHookFunction | null>;
export type Handlers = Record<string, FunctionHandler<NetlifySDKContext<any, any>> | undefined>;
export type EdgeFunctionsSettings = {
    path: string;
    prefix: string;
    shouldInjectFunction: (options: {
        name: string;
    }) => boolean;
};
export type EdgeFunctionsOptions = {
    /**
     * A prefix value added to edge functions. For example, given a prefix value of `my_prefix`, an
     * edge function `hello-world.mts` will be named `my_prefix_hello-world`. Used to prevent naming
     * collisions between functions.
     */
    prefix: string;
    /**
     * An optional function that can be used to prevent edge functions from being injected into the
     * user's site. Receives the name of the function to be injected (excludes file extension).
     */
    shouldInjectFunction?: ((options: {
        name: string;
    }) => boolean) | undefined;
};
export type FunctionsSettings = {
    path: string;
    prefix: string;
    shouldInjectFunction: (options: {
        name: string;
    }) => boolean;
};
export type Manifest = {
    sdkVersion: string;
    hasBuildEventHandler?: boolean;
    hasIntegrationUI?: boolean;
    uiSurfaces?: string[];
};
//# sourceMappingURL=types.d.ts.map