export declare const getPackageVersion: import("moize/mjs/index.mjs").Moized<() => string, Partial<{
    isDeepEqual: boolean;
    isPromise: boolean;
    isReact: boolean;
    isSerialized: boolean;
    isShallowEqual: boolean;
    matchesArg: import("moize/mjs/index.mjs").IsEqual;
    matchesKey: import("moize/mjs/index.mjs").IsMatchingKey;
    maxAge: number;
    maxArgs: number;
    maxSize: number;
    onCacheAdd: import("moize/mjs/index.mjs").OnCacheOperation<() => string>;
    onCacheChange: import("moize/mjs/index.mjs").OnCacheOperation<() => string>;
    onCacheHit: import("moize/mjs/index.mjs").OnCacheOperation<() => string>;
    onExpire: import("moize/mjs/index.mjs").OnExpire;
    profileName: string;
    serializer: import("moize/mjs/index.mjs").Serialize;
    transformArgs: import("moize/mjs/index.mjs").TransformKey;
    updateCacheForKey: import("moize/mjs/index.mjs").UpdateCacheForKey;
    updateExpire: boolean;
}> & Partial<{
    isDeepEqual: boolean;
    isPromise: boolean;
    isReact: boolean;
    isSerialized: boolean;
    isShallowEqual: boolean;
    matchesArg: import("moize/mjs/index.mjs").IsEqual;
    matchesKey: import("moize/mjs/index.mjs").IsMatchingKey;
    maxAge: number;
    maxArgs: number;
    maxSize: number;
    onCacheAdd: import("moize/mjs/index.mjs").OnCacheOperation<import("moize/mjs/index.mjs").Moizeable>;
    onCacheChange: import("moize/mjs/index.mjs").OnCacheOperation<import("moize/mjs/index.mjs").Moizeable>;
    onCacheHit: import("moize/mjs/index.mjs").OnCacheOperation<import("moize/mjs/index.mjs").Moizeable>;
    onExpire: import("moize/mjs/index.mjs").OnExpire;
    profileName: string;
    serializer: import("moize/mjs/index.mjs").Serialize;
    transformArgs: import("moize/mjs/index.mjs").TransformKey;
    updateCacheForKey: import("moize/mjs/index.mjs").UpdateCacheForKey;
    updateExpire: boolean;
}>>;
//# sourceMappingURL=package-version.d.ts.map