import { default as React } from 'react';

export type SelectProps = {
    /**
     * Whether or the field can be cleared by the user.
     *
     * When `true`, the Select will render an icon that allows the user to clear the current selected
     * value. The icon does not appear when no value is selected.
     *
     * @default false
     */
    clearable?: boolean | undefined;
    /**
     * If `true`, the component is disabled.
     *
     * @default false
     */
    disabled?: boolean | undefined;
    /**
     * An error message to display below the element when in an invalid state.
     */
    error?: {
        message?: string | undefined;
    } | undefined;
    /**
     * Explanatory text to render below the element.
     */
    helpText?: React.ReactNode | undefined;
    /**
     * A user-friendly label displayed alongside the element.
     */
    label?: string | undefined;
    /**
     * A unique name identifying the element within a form.
     */
    name?: string | undefined;
    /**
     * <!-- TODO(ndhoule): Document me -->
     */
    options: {
        label: string;
        value: string;
    }[] | undefined;
    /**
     * Placeholder text displayed when no value is selected.
     */
    placeholder?: string | undefined;
    /**
     * When `true`, the element will be invalid when touched and no selection has been made.
     *
     * @default false
     */
    required?: boolean | undefined;
};
/**
 * Select components give users the ability to choose one or more options from a list of choices.
 *
 * <!-- TODO(ndhoule): Add a screenshot here -->
 *
 * @param props
 * @see {@link Form}
 * @example
 * ```tsx
 * import { Select } from "@netlify/sdk/react/components";
 *
 * <Select
 *   label="Your Favorite Dog"
 *   name="favoriteDog"
 *   options={[
 *     { label: "Corgi", value: "corgi" },
 *     { label: "Golden Retriever", value: "golden-retriever" },
 *     { label: "Pomeranian", value: "pomeranian" },
 *   ]}
 * />
 * ```
 */
export declare const Select: <FieldValues extends Record<string, unknown>>({ label, helpText, name, options, required, disabled, error, clearable: isClearable, ...otherProps }: SelectProps) => React.JSX.Element;
//# sourceMappingURL=Select.d.ts.map