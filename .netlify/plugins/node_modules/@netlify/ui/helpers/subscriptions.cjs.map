{"version":3,"file":"subscriptions.cjs","sources":["../../../../libs/ui/src/helpers/subscriptions.ts"],"sourcesContent":["import { capitalize } from './format';\nimport siteAddons from './site-addons.json';\n\nexport type SubscriptionData = {\n  product_name: string;\n  title: string;\n  site_id?: string;\n  amount: string | number;\n};\n\nexport type ZuoraSubscriptionDetails = {\n  id: string;\n  title: string;\n  product_name: string;\n  domain_name?: string;\n  base: boolean;\n  amount: string | number;\n  quantity: number;\n  site_id?: string;\n  site_name: string;\n  site_domain?: string;\n  start_date: string;\n  end_date: string | null;\n};\n\nexport type OrbSubscriptionBase = {\n  id: string;\n  amount: number;\n  end_date: string | null;\n  start_date: string;\n  title: string;\n};\n\nexport type OrbSubscriptionDomain = {\n  id: string;\n  invoice_number: string;\n  invoice_date: string;\n  due_date: string;\n  amount: string;\n  invoice_items: Array<{\n    quantity: number;\n    title: string;\n  }>;\n};\n\nexport type OrbSubscriptionUsage = {\n  type: AccountSubscriptionType | SiteSubscriptionType;\n  amount: number;\n  quantity: number;\n  included: number | boolean | null;\n  sites: Array<{\n    site_id: string;\n    site_name: string;\n    site_domain?: string | null;\n  }>;\n};\n\nexport type AccountSubscriptions = {\n  baseSubscription: SubscriptionBaseInfo | null;\n  accountSubscriptions: SubscriptionAccountsInfo[];\n  domainSubscriptions: SubscriptionDomainInfo[];\n  siteSubscriptions: SubscriptionSiteAddonsInfo[];\n};\n\nexport type SubscriptionBaseInfo = {\n  id: string;\n  amount: string | number;\n  start_date: string;\n  end_date?: string | null;\n  title: string;\n};\n\nexport type SubscriptionAccountsInfo = {\n  quantity: number;\n  included: number;\n  amount: number;\n  type: AccountSubscriptionType | null;\n};\n\nexport type SubscriptionSiteAddonsInfo = {\n  type?: SiteSubscriptionType;\n  amount: number;\n  quantity: number;\n  sites: Array<{\n    site_id: string;\n    site_name: string;\n    site_domain?: string | null;\n  }>;\n};\n\nexport type SubscriptionDomainInfo = {\n  id: string;\n  due_date: string;\n  amount: number;\n  domain?: string;\n};\n\nconst SUBSCRIPTIONS_ACCOUNT_USAGE = [\n  'bandwidth',\n  'build_minutes',\n  'edge_functions',\n] as const;\n\nconst SUBSCRIPTIONS_ACCOUNT_ADDONS = [\n  'concurrent_builds',\n  'members',\n  'active_git_contributors',\n] as const;\n\nconst SUBSCRIPTIONS_ACCOUNT_LEVEL = [\n  ...SUBSCRIPTIONS_ACCOUNT_USAGE,\n  ...SUBSCRIPTIONS_ACCOUNT_ADDONS,\n] as string[];\n\nconst SUBSCRIPTIONS_SITE_USAGE = ['form_submissions', 'functions'] as const;\n\nconst SUBSCRIPTIONS_SITE_ADDONS = [\n  'identity',\n  'analytics',\n  'large_media',\n] as const;\n\nconst SUBSCRIPTIONS_SITE_LEVEL = [\n  ...SUBSCRIPTIONS_SITE_USAGE,\n  ...SUBSCRIPTIONS_SITE_ADDONS,\n] as string[];\n\ntype AccountSubscriptionUsageType =\n  (typeof SUBSCRIPTIONS_ACCOUNT_USAGE)[number];\n\ntype AccountSubscriptionAddonsType =\n  (typeof SUBSCRIPTIONS_ACCOUNT_ADDONS)[number];\n\ntype AccountSubscriptionType =\n  | AccountSubscriptionAddonsType\n  | AccountSubscriptionUsageType;\n\ntype SiteSubscriptionUsageType = (typeof SUBSCRIPTIONS_SITE_USAGE)[number];\n\ntype SiteSubscriptionAddonsType = (typeof SUBSCRIPTIONS_SITE_ADDONS)[number];\n\ntype SiteSubscriptionType =\n  | SiteSubscriptionUsageType\n  | SiteSubscriptionAddonsType;\n\nexport const getSiteAddonsInfo = () => {\n  return siteAddons;\n};\n\nexport const humanizeSubscriptionName = (subscriptionName: string) =>\n  subscriptionName.split('_').map(capitalize).join(' ');\n\nexport const isSubscriptionUsageBased = (subscriptionName: string | null) => {\n  if (!subscriptionName) return false;\n  const usageBased: string[] = [\n    ...SUBSCRIPTIONS_ACCOUNT_USAGE,\n    ...SUBSCRIPTIONS_SITE_USAGE,\n  ];\n  return usageBased.includes(subscriptionName);\n};\n\nexport const getSubscriptionSiteUsage = (\n  subscriptions: SubscriptionSiteAddonsInfo[]\n): Array<{ type: string; sites: number }> =>\n  SUBSCRIPTIONS_SITE_LEVEL.map((type) => ({\n    type,\n    sites: (subscriptions.find((sub) => sub.type === type)?.sites || []).length,\n  }));\n\n/*\n * The following helpers are for the current Zuora subscriptions.\n * Our endpoint returns a list of all subscriptions, and we need to separate them\n * and identify them.\n *\n * Once we have migrated customers to Orb, we have new endpoints and the data is\n * separated so there is no need for this file.\n */\n\nexport const transformOrbSubscriptions = ({\n  base,\n  domains,\n  usage,\n}: {\n  base?: OrbSubscriptionBase;\n  domains: OrbSubscriptionDomain[];\n  usage: OrbSubscriptionUsage[];\n}): AccountSubscriptions => {\n  // The base subscription is directly compatible\n  // Transform the domain subscriptions\n  const domainSubscriptions = domains.map(\n    (domain): SubscriptionDomainInfo => ({\n      id: domain.id,\n      due_date: domain.due_date,\n      amount: Number(domain.amount),\n      domain: domain.invoice_items[0].title,\n    })\n  );\n\n  const accountSubscriptions = usage.filter((accountUsage) =>\n    SUBSCRIPTIONS_ACCOUNT_LEVEL.includes(accountUsage.type)\n  ) as SubscriptionAccountsInfo[];\n\n  const siteSubscriptions = usage.filter((accountUsage) =>\n    SUBSCRIPTIONS_SITE_LEVEL.includes(accountUsage.type)\n  ) as SubscriptionSiteAddonsInfo[];\n\n  return {\n    baseSubscription: base || null,\n    accountSubscriptions,\n    siteSubscriptions,\n    domainSubscriptions,\n  };\n};\n\nexport const transformZuoraSubscriptions = (\n  subscriptions?: ZuoraSubscriptionDetails[]\n): AccountSubscriptions => {\n  if (!subscriptions)\n    return {\n      baseSubscription: null,\n      accountSubscriptions: [],\n      domainSubscriptions: [],\n      siteSubscriptions: [],\n    };\n  // Transform the base subscription -- the team plan\n  const accountBaseSubscription = subscriptions.find(isZuoraSubscriptionBase);\n  const baseSubscription = {\n    id: accountBaseSubscription?.id,\n    amount: accountBaseSubscription?.amount,\n    start_date: accountBaseSubscription?.start_date,\n    end_date: accountBaseSubscription?.end_date,\n    title: accountBaseSubscription?.title.replace(/ team plan/g, ''),\n  } as SubscriptionBaseInfo;\n  // Transform account-level subscriptions (extra members + concurrent builds)\n  const accountSubscriptions = subscriptions\n    .filter(\n      (sub) =>\n        isZuoraSubscriptionAccountUsage(sub) && isZuoraSubscriptionPaid(sub)\n    )\n    .map(\n      (subscription): SubscriptionAccountsInfo => ({\n        quantity: subscription.quantity,\n        amount: Number(subscription.amount),\n        type: getZuoraSubscriptionAccountUsageType(subscription),\n        included: 0,\n      })\n    );\n  // Transform all the add-ons subscriptions (paid add-ons + extra members + concurrent builds)\n  const siteSubscriptions = subscriptions\n    .filter((sub) => isZuoraSubscriptionSiteAddon(sub))\n    .reduce(\n      (\n        siteAddonSubscriptions: SubscriptionSiteAddonsInfo[],\n        subscription: ZuoraSubscriptionDetails\n      ) => {\n        const type = getZuoraSubscriptionSiteAddonType(subscription);\n        // Not a valid type, no problem\n        if (!type) return siteAddonSubscriptions;\n        // The empty subscription\n        const emptySubscription: SubscriptionSiteAddonsInfo = {\n          type,\n          amount: 0,\n          quantity: 0,\n          sites: [],\n        };\n        const existingSubscription =\n          siteAddonSubscriptions.find((sub) => sub.type === type) ||\n          emptySubscription;\n\n        // Add the amount (make sure it doesn't break if it's not a number)\n        const subscriptionAmount = Number(subscription.amount);\n        if (!isNaN(subscriptionAmount)) {\n          existingSubscription.amount += subscriptionAmount;\n        }\n        // Add one to the total\n        existingSubscription.quantity += 1;\n        // Push the site info\n        existingSubscription.sites.push({\n          site_id: subscription.site_id || '',\n          site_name: subscription.site_name,\n          site_domain: subscription.site_domain,\n        });\n\n        const newSiteSubscriptions = [\n          ...siteAddonSubscriptions.filter((sub) => sub.type !== type),\n          existingSubscription,\n        ];\n        return newSiteSubscriptions;\n      },\n      []\n    );\n\n  // Transform all the domain subscriptions -- We are not getting them from the API\n  const domainSubscriptions = subscriptions\n    .filter(isZuoraSubscriptionDomain)\n    .map(\n      (subscription): SubscriptionDomainInfo => ({\n        id: subscription.id,\n        due_date: subscription.start_date,\n        amount: Number(subscription.amount),\n        domain: subscription.domain_name,\n      })\n    );\n\n  return {\n    baseSubscription,\n    accountSubscriptions,\n    siteSubscriptions,\n    domainSubscriptions,\n  };\n};\n\nconst getZuoraSubscriptionSiteAddonType = (\n  subscription: SubscriptionData\n): SiteSubscriptionType | null => {\n  if (isZuoraSubscriptionFormsAddon(subscription)) return 'form_submissions';\n  if (isZuoraSubscriptionFunctionsAddon(subscription)) return 'functions';\n  if (isZuoraSubscriptionAnalyticsAddon(subscription)) return 'analytics';\n  if (isZuoraSubscriptionIdentityAddon(subscription)) return 'identity';\n  if (isZuoraSubscriptionLargeMediaAddon(subscription)) return 'large_media';\n  // This should not happen.\n  return null;\n};\n\nconst isZuoraSubscriptionSiteAddon = (subscription: SubscriptionData) => {\n  return (\n    isZuoraSubscriptionFormsAddon(subscription) ||\n    isZuoraSubscriptionFunctionsAddon(subscription) ||\n    isZuoraSubscriptionAnalyticsAddon(subscription) ||\n    isZuoraSubscriptionIdentityAddon(subscription) ||\n    isZuoraSubscriptionLargeMediaAddon(subscription)\n  );\n};\n\nconst isZuoraSubscriptionFormsAddon = (subscription: SubscriptionData) =>\n  subscription.product_name === 'forms';\n\nconst isZuoraSubscriptionFunctionsAddon = (subscription: SubscriptionData) =>\n  subscription.product_name === 'functions';\n\nconst isZuoraSubscriptionAnalyticsAddon = (subscription: SubscriptionData) =>\n  subscription.product_name === 'analytics';\n\nconst isZuoraSubscriptionIdentityAddon = (subscription: SubscriptionData) =>\n  subscription.product_name === 'identity';\n\nconst isZuoraSubscriptionLargeMediaAddon = (subscription: SubscriptionData) =>\n  subscription.product_name === 'large_media';\n\nconst isZuoraSubscriptionAccountUsage = (subscription: SubscriptionData) => {\n  return (\n    isZuoraSubscriptionExtraMembers(subscription) ||\n    isZuoraSubscriptionConcurrentBuilds(subscription) ||\n    isZuoraSubscriptionBuildMinutes(subscription) ||\n    isZuoraSubscriptionBandwidth(subscription) ||\n    isZuoraSubscriptionEdgeFunctions(subscription)\n  );\n};\n\nconst getZuoraSubscriptionAccountUsageType = (\n  subscription: SubscriptionData\n): AccountSubscriptionType | null => {\n  if (isZuoraSubscriptionExtraMembers(subscription)) return 'members';\n  if (isZuoraSubscriptionConcurrentBuilds(subscription))\n    return 'concurrent_builds';\n  if (isZuoraSubscriptionBuildMinutes(subscription)) return 'build_minutes';\n  if (isZuoraSubscriptionBandwidth(subscription)) return 'bandwidth';\n  if (isZuoraSubscriptionEdgeFunctions(subscription)) return 'edge_functions';\n  // This should not happen.\n  return null;\n};\n\nconst isZuoraSubscriptionExtraMembers = (subscription: SubscriptionData) =>\n  subscription.product_name === 'Extra team members';\n\nconst isZuoraSubscriptionConcurrentBuilds = (subscription: SubscriptionData) =>\n  subscription.product_name === 'Concurrent Builds';\n\nconst isZuoraSubscriptionBuildMinutes = (subscription: SubscriptionData) =>\n  subscription.product_name === 'build_minutes';\n\nconst isZuoraSubscriptionBandwidth = (subscription: SubscriptionData) =>\n  subscription.product_name === 'bandwidth';\n\nconst isZuoraSubscriptionEdgeFunctions = (subscription: SubscriptionData) =>\n  subscription.product_name === 'edge_functions';\n\nconst isZuoraSubscriptionDomain = (subscription?: SubscriptionData) =>\n  !!(subscription && /domains/i.test(subscription?.product_name));\n\nconst isZuoraSubscriptionBase = (subscription?: SubscriptionData) => {\n  if (!subscription) return false;\n  return (\n    !isZuoraSubscriptionSiteAddon(subscription) &&\n    !isZuoraSubscriptionDomain(subscription) &&\n    !isZuoraSubscriptionConcurrentBuilds(subscription) &&\n    !isZuoraSubscriptionExtraMembers(subscription) &&\n    !isZuoraSubscriptionBuildMinutes(subscription) &&\n    !isZuoraSubscriptionBandwidth(subscription) &&\n    !isZuoraSubscriptionEdgeFunctions(subscription)\n  );\n};\n\nconst isZuoraSubscriptionPaid = (subscription?: SubscriptionData) => {\n  if (!subscription) return false;\n  const amount = Number(subscription.amount);\n  return !isNaN(amount) && amount > 0;\n};\n"],"names":["capitalize"],"mappings":"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"}