import { z } from "zod";
import { Surfaces } from "../../surfaces.js";
export declare const UI_EXTENSION_HOST_INITIALIZE_EVENT_TYPE = "NF::EUI_HOST::INITIALIZE";
export declare const UIExtensionHostInitializeEventSchema: z.ZodObject<{
    type: z.ZodLiteral<"NF::EUI_HOST::INITIALIZE">;
    data: z.ZodObject<{
        context: z.ZodObject<{
            auth: z.ZodObject<{
                netlifyToken: z.ZodDefault<z.ZodNullable<z.ZodString>>;
                providerToken: z.ZodDefault<z.ZodNullable<z.ZodString>>;
                providerTokens: z.ZodDefault<z.ZodArray<z.ZodObject<{
                    externalId: z.ZodString;
                    token: z.ZodString;
                    connectionId: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    externalId: string;
                    token: string;
                    connectionId: string;
                }, {
                    externalId: string;
                    token: string;
                    connectionId: string;
                }>, "many">>;
            }, "strip", z.ZodTypeAny, {
                netlifyToken: string | null;
                providerToken: string | null;
                providerTokens: {
                    externalId: string;
                    token: string;
                    connectionId: string;
                }[];
            }, {
                netlifyToken?: string | null | undefined;
                providerToken?: string | null | undefined;
                providerTokens?: {
                    externalId: string;
                    token: string;
                    connectionId: string;
                }[] | undefined;
            }>;
            user: z.ZodDefault<z.ZodObject<{
                id: z.ZodDefault<z.ZodNullable<z.ZodString>>;
            }, "strip", z.ZodTypeAny, {
                id: string | null;
            }, {
                id?: string | null | undefined;
            }>>;
            visualEditor: z.ZodObject<{
                webhookBaseURL: z.ZodDefault<z.ZodNullable<z.ZodString>>;
                projectId: z.ZodDefault<z.ZodNullable<z.ZodString>>;
                notifyVisualEditor: z.ZodDefault<z.ZodNullable<z.ZodBoolean>>;
            }, "strip", z.ZodTypeAny, {
                webhookBaseURL: string | null;
                projectId: string | null;
                notifyVisualEditor: boolean | null;
            }, {
                webhookBaseURL?: string | null | undefined;
                projectId?: string | null | undefined;
                notifyVisualEditor?: boolean | null | undefined;
            }>;
            configurationId: z.ZodDefault<z.ZodNullable<z.ZodString>>;
            dataLayerId: z.ZodDefault<z.ZodNullable<z.ZodString>>;
            projectId: z.ZodDefault<z.ZodNullable<z.ZodString>>;
            siteId: z.ZodDefault<z.ZodNullable<z.ZodString>>;
            /**
             * `teamId` is an alias for `accountId`
             */
            teamId: z.ZodDefault<z.ZodNullable<z.ZodString>>;
            /**
             * `accountId` is an alias for `teamId`
             */
            accountId: z.ZodDefault<z.ZodNullable<z.ZodString>>;
            theme: z.ZodEnum<["light", "dark"]>;
            /**
             * The ID of the current deploy. This is only available when the extension surface is rendered in the context of a deploy. (e.g. Surfaces.SiteBuildDeploy)
             */
            deployId: z.ZodEffects<z.ZodDefault<z.ZodNullable<z.ZodString>>, string | null, string | null | undefined>;
        }, "strip", z.ZodTypeAny, {
            auth: {
                netlifyToken: string | null;
                providerToken: string | null;
                providerTokens: {
                    externalId: string;
                    token: string;
                    connectionId: string;
                }[];
            };
            user: {
                id: string | null;
            };
            visualEditor: {
                webhookBaseURL: string | null;
                projectId: string | null;
                notifyVisualEditor: boolean | null;
            };
            projectId: string | null;
            configurationId: string | null;
            dataLayerId: string | null;
            siteId: string | null;
            teamId: string | null;
            accountId: string | null;
            theme: "light" | "dark";
            deployId: string | null;
        }, {
            auth: {
                netlifyToken?: string | null | undefined;
                providerToken?: string | null | undefined;
                providerTokens?: {
                    externalId: string;
                    token: string;
                    connectionId: string;
                }[] | undefined;
            };
            visualEditor: {
                webhookBaseURL?: string | null | undefined;
                projectId?: string | null | undefined;
                notifyVisualEditor?: boolean | null | undefined;
            };
            theme: "light" | "dark";
            user?: {
                id?: string | null | undefined;
            } | undefined;
            projectId?: string | null | undefined;
            configurationId?: string | null | undefined;
            dataLayerId?: string | null | undefined;
            siteId?: string | null | undefined;
            teamId?: string | null | undefined;
            accountId?: string | null | undefined;
            deployId?: string | null | undefined;
        }>;
        extension: z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
            slug: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
            name: string;
            slug: string;
        }, {
            id: string;
            name: string;
            slug: string;
        }>;
        surface: z.ZodObject<{
            name: z.ZodNativeEnum<typeof Surfaces>;
        }, "strip", z.ZodTypeAny, {
            name: Surfaces;
        }, {
            name: Surfaces;
        }>;
    }, "strip", z.ZodTypeAny, {
        context: {
            auth: {
                netlifyToken: string | null;
                providerToken: string | null;
                providerTokens: {
                    externalId: string;
                    token: string;
                    connectionId: string;
                }[];
            };
            user: {
                id: string | null;
            };
            visualEditor: {
                webhookBaseURL: string | null;
                projectId: string | null;
                notifyVisualEditor: boolean | null;
            };
            projectId: string | null;
            configurationId: string | null;
            dataLayerId: string | null;
            siteId: string | null;
            teamId: string | null;
            accountId: string | null;
            theme: "light" | "dark";
            deployId: string | null;
        };
        extension: {
            id: string;
            name: string;
            slug: string;
        };
        surface: {
            name: Surfaces;
        };
    }, {
        context: {
            auth: {
                netlifyToken?: string | null | undefined;
                providerToken?: string | null | undefined;
                providerTokens?: {
                    externalId: string;
                    token: string;
                    connectionId: string;
                }[] | undefined;
            };
            visualEditor: {
                webhookBaseURL?: string | null | undefined;
                projectId?: string | null | undefined;
                notifyVisualEditor?: boolean | null | undefined;
            };
            theme: "light" | "dark";
            user?: {
                id?: string | null | undefined;
            } | undefined;
            projectId?: string | null | undefined;
            configurationId?: string | null | undefined;
            dataLayerId?: string | null | undefined;
            siteId?: string | null | undefined;
            teamId?: string | null | undefined;
            accountId?: string | null | undefined;
            deployId?: string | null | undefined;
        };
        extension: {
            id: string;
            name: string;
            slug: string;
        };
        surface: {
            name: Surfaces;
        };
    }>;
}, "strip", z.ZodTypeAny, {
    data: {
        context: {
            auth: {
                netlifyToken: string | null;
                providerToken: string | null;
                providerTokens: {
                    externalId: string;
                    token: string;
                    connectionId: string;
                }[];
            };
            user: {
                id: string | null;
            };
            visualEditor: {
                webhookBaseURL: string | null;
                projectId: string | null;
                notifyVisualEditor: boolean | null;
            };
            projectId: string | null;
            configurationId: string | null;
            dataLayerId: string | null;
            siteId: string | null;
            teamId: string | null;
            accountId: string | null;
            theme: "light" | "dark";
            deployId: string | null;
        };
        extension: {
            id: string;
            name: string;
            slug: string;
        };
        surface: {
            name: Surfaces;
        };
    };
    type: "NF::EUI_HOST::INITIALIZE";
}, {
    data: {
        context: {
            auth: {
                netlifyToken?: string | null | undefined;
                providerToken?: string | null | undefined;
                providerTokens?: {
                    externalId: string;
                    token: string;
                    connectionId: string;
                }[] | undefined;
            };
            visualEditor: {
                webhookBaseURL?: string | null | undefined;
                projectId?: string | null | undefined;
                notifyVisualEditor?: boolean | null | undefined;
            };
            theme: "light" | "dark";
            user?: {
                id?: string | null | undefined;
            } | undefined;
            projectId?: string | null | undefined;
            configurationId?: string | null | undefined;
            dataLayerId?: string | null | undefined;
            siteId?: string | null | undefined;
            teamId?: string | null | undefined;
            accountId?: string | null | undefined;
            deployId?: string | null | undefined;
        };
        extension: {
            id: string;
            name: string;
            slug: string;
        };
        surface: {
            name: Surfaces;
        };
    };
    type: "NF::EUI_HOST::INITIALIZE";
}>;
export type UIExtensionHostInitializeEvent = z.output<typeof UIExtensionHostInitializeEventSchema>;
export declare const createUIExtensionHostInitializeEvent: (data: UIExtensionHostInitializeEvent["data"]) => UIExtensionHostInitializeEvent;
//# sourceMappingURL=initialize.d.ts.map