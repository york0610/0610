{"version":3,"file":"basicAuth.min.mjs","sources":["../../../src/addons/basicAuth.ts"],"sourcesContent":["import type { Config, ConfiguredMiddleware, Wretch, WretchAddon } from \"../types.js\"\n\nfunction utf8ToBase64(input: string) {\n  const utf8Bytes = new TextEncoder().encode(input)\n  return btoa(String.fromCharCode(...utf8Bytes))\n}\n\nexport interface BasicAuthAddon {\n  /**\n   * Sets the `Authorization` header to `Basic ` + <base64 encoded credentials>.\n   * Additionally, allows using URLs with credentials in them.\n   *\n   * ```js\n   * const user = \"user\"\n   * const pass = \"pass\"\n   *\n   * // Automatically sets the Authorization header to \"Basic \" + <base64 encoded credentials>\n   * wretch(\"...\").addon(BasicAuthAddon).basicAuth(user, pass).get()\n   *\n   * // Allows using URLs with credentials in them\n   * wretch(`https://${user}:${pass}@...`).addon(BasicAuthAddon).get()\n   * ```\n   *\n   * @param username - Username to use for basic auth\n   * @param password - Password to use for basic auth\n   */\n  basicAuth<T extends BasicAuthAddon, C, R>(\n    this: T & Wretch<T, C, R>,\n    username: string,\n    password: string\n  ): this\n}\n\nconst makeBasicAuthMiddleware: (config: Config) => ConfiguredMiddleware = config => next => (url, opts) => {\n  const _URL = config.polyfill(\"URL\")\n  let parsedUrl: URL | null\n  try {\n    parsedUrl = new _URL(url)\n  } catch {\n    parsedUrl = null\n  }\n\n  if (parsedUrl?.username || parsedUrl?.password) {\n    const basicAuthBase64 = utf8ToBase64(\n      `${decodeURIComponent(parsedUrl.username)}:${decodeURIComponent(parsedUrl.password)}`,\n    )\n    opts.headers = {\n      ...opts.headers,\n      Authorization: `Basic ${basicAuthBase64}`,\n    }\n    parsedUrl.username = \"\"\n    parsedUrl.password = \"\"\n    url = parsedUrl.toString()\n  }\n\n  return next(url, opts)\n}\n\n\n/**\n * Adds the ability to use basic auth with the `Authorization` header.\n *\n * ```js\n * import BasicAuthAddon from \"wretch/addons/basicAuth\"\n *\n * wretch().addon(BasicAuthAddon)\n * ```\n */\nconst basicAuth: WretchAddon<BasicAuthAddon> = {\n  beforeRequest(wretch) {\n    return wretch.middlewares([makeBasicAuthMiddleware(wretch._config)])\n  },\n  wretch: {\n    basicAuth(username, password) {\n      const basicAuthBase64 = utf8ToBase64(`${username}:${password}`)\n      return this.auth(`Basic ${basicAuthBase64}`)\n    },\n  },\n}\n\nexport default basicAuth\n"],"names":["utf8ToBase64","input","utf8Bytes","TextEncoder","encode","btoa","String","fromCharCode","basicAuth","beforeRequest","wretch","middlewares","config","_config","next","url","opts","_URL","polyfill","parsedUrl","_a","username","password","basicAuthBase64","decodeURIComponent","headers","Authorization","toString","this","auth"],"mappings":"AAEA,SAASA,EAAaC,GACpB,MAAMC,GAAY,IAAIC,aAAcC,OAAOH,GAC3C,OAAOI,KAAKC,OAAOC,gBAAgBL,GACrC,CA4BA,MAmCMM,EAAyC,CAC7CC,cAAcC,GACZ,OAAOA,EAAOC,YAAY,EArC4CC,EAqCnBF,EAAOG,QArCsBC,GAAQ,CAACC,EAAKC,KAChG,MAAMC,EAAOL,EAAOM,SAAS,OAC7B,IAAIC,EACJ,IACEA,EAAY,IAAIF,EAAKF,EACtB,CAAC,MAAAK,GACAD,EAAY,IACb,CAED,IAAIA,aAAA,EAAAA,EAAWE,YAAYF,aAAA,EAAAA,EAAWG,UAAU,CAC9C,MAAMC,EAAkBvB,EACtB,GAAGwB,mBAAmBL,EAAUE,aAAaG,mBAAmBL,EAAUG,aAE5EN,EAAKS,QAAU,IACVT,EAAKS,QACRC,cAAe,SAASH,KAE1BJ,EAAUE,SAAW,GACrBF,EAAUG,SAAW,GACrBP,EAAMI,EAAUQ,UACjB,CAED,OAAOb,EAAKC,EAAKC,EAAK,KAtBkDJ,KAsCvE,EACDF,OAAQ,CACNF,UAAUa,EAAUC,GAClB,MAAMC,EAAkBvB,EAAa,GAAGqB,KAAYC,KACpD,OAAOM,KAAKC,KAAK,SAASN,IAC3B"}