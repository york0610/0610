{"version":3,"file":"basicAuth.js","sourceRoot":"","sources":["../../src/addons/basicAuth.ts"],"names":[],"mappings":"AAEA,SAAS,YAAY,CAAC,KAAa;IACjC,MAAM,SAAS,GAAG,IAAI,WAAW,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,CAAA;IACjD,OAAO,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,GAAG,SAAS,CAAC,CAAC,CAAA;AAChD,CAAC;AA4BD,MAAM,uBAAuB,GAA6C,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE;IACxG,MAAM,IAAI,GAAG,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAA;IACnC,IAAI,SAAqB,CAAA;IACzB,IAAI,CAAC;QACH,SAAS,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC,CAAA;IAC3B,CAAC;IAAC,WAAM,CAAC;QACP,SAAS,GAAG,IAAI,CAAA;IAClB,CAAC;IAED,IAAI,CAAA,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,QAAQ,MAAI,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,QAAQ,CAAA,EAAE,CAAC;QAC/C,MAAM,eAAe,GAAG,YAAY,CAClC,GAAG,kBAAkB,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,kBAAkB,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,CACtF,CAAA;QACD,IAAI,CAAC,OAAO,GAAG;YACb,GAAG,IAAI,CAAC,OAAO;YACf,aAAa,EAAE,SAAS,eAAe,EAAE;SAC1C,CAAA;QACD,SAAS,CAAC,QAAQ,GAAG,EAAE,CAAA;QACvB,SAAS,CAAC,QAAQ,GAAG,EAAE,CAAA;QACvB,GAAG,GAAG,SAAS,CAAC,QAAQ,EAAE,CAAA;IAC5B,CAAC;IAED,OAAO,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAA;AACxB,CAAC,CAAA;AAGD;;;;;;;;GAQG;AACH,MAAM,SAAS,GAAgC;IAC7C,aAAa,CAAC,MAAM;QAClB,OAAO,MAAM,CAAC,WAAW,CAAC,CAAC,uBAAuB,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAA;IACtE,CAAC;IACD,MAAM,EAAE;QACN,SAAS,CAAC,QAAQ,EAAE,QAAQ;YAC1B,MAAM,eAAe,GAAG,YAAY,CAAC,GAAG,QAAQ,IAAI,QAAQ,EAAE,CAAC,CAAA;YAC/D,OAAO,IAAI,CAAC,IAAI,CAAC,SAAS,eAAe,EAAE,CAAC,CAAA;QAC9C,CAAC;KACF;CACF,CAAA;AAED,eAAe,SAAS,CAAA","sourcesContent":["import type { Config, ConfiguredMiddleware, Wretch, WretchAddon } from \"../types.js\"\n\nfunction utf8ToBase64(input: string) {\n  const utf8Bytes = new TextEncoder().encode(input)\n  return btoa(String.fromCharCode(...utf8Bytes))\n}\n\nexport interface BasicAuthAddon {\n  /**\n   * Sets the `Authorization` header to `Basic ` + <base64 encoded credentials>.\n   * Additionally, allows using URLs with credentials in them.\n   *\n   * ```js\n   * const user = \"user\"\n   * const pass = \"pass\"\n   *\n   * // Automatically sets the Authorization header to \"Basic \" + <base64 encoded credentials>\n   * wretch(\"...\").addon(BasicAuthAddon).basicAuth(user, pass).get()\n   *\n   * // Allows using URLs with credentials in them\n   * wretch(`https://${user}:${pass}@...`).addon(BasicAuthAddon).get()\n   * ```\n   *\n   * @param username - Username to use for basic auth\n   * @param password - Password to use for basic auth\n   */\n  basicAuth<T extends BasicAuthAddon, C, R>(\n    this: T & Wretch<T, C, R>,\n    username: string,\n    password: string\n  ): this\n}\n\nconst makeBasicAuthMiddleware: (config: Config) => ConfiguredMiddleware = config => next => (url, opts) => {\n  const _URL = config.polyfill(\"URL\")\n  let parsedUrl: URL | null\n  try {\n    parsedUrl = new _URL(url)\n  } catch {\n    parsedUrl = null\n  }\n\n  if (parsedUrl?.username || parsedUrl?.password) {\n    const basicAuthBase64 = utf8ToBase64(\n      `${decodeURIComponent(parsedUrl.username)}:${decodeURIComponent(parsedUrl.password)}`,\n    )\n    opts.headers = {\n      ...opts.headers,\n      Authorization: `Basic ${basicAuthBase64}`,\n    }\n    parsedUrl.username = \"\"\n    parsedUrl.password = \"\"\n    url = parsedUrl.toString()\n  }\n\n  return next(url, opts)\n}\n\n\n/**\n * Adds the ability to use basic auth with the `Authorization` header.\n *\n * ```js\n * import BasicAuthAddon from \"wretch/addons/basicAuth\"\n *\n * wretch().addon(BasicAuthAddon)\n * ```\n */\nconst basicAuth: WretchAddon<BasicAuthAddon> = {\n  beforeRequest(wretch) {\n    return wretch.middlewares([makeBasicAuthMiddleware(wretch._config)])\n  },\n  wretch: {\n    basicAuth(username, password) {\n      const basicAuthBase64 = utf8ToBase64(`${username}:${password}`)\n      return this.auth(`Basic ${basicAuthBase64}`)\n    },\n  },\n}\n\nexport default basicAuth\n"]}