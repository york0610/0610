export type Signals = NodeJS.Signals;
export type CreateSignalHandlerOptions = {
    ignoreRepeatSignals?: boolean | undefined;
    process?: {
        emit: (event: NodeJS.Signals, signal?: NodeJS.Signals) => boolean;
        off: (signal: Signals, listener: (signal: Signals) => void) => void;
        on: (signal: Signals, listener: (signal: Signals) => void) => void;
    } | undefined;
};
/**
 * createSignalHandler accepts a list of process signals to listen on and returns a function that,
 * when invoked, installs the specified onSignal handler for those signals.
 *
 * onSignal receives an object with two properties: the signal that prompted the invocation, and a
 * `force` value that is set to `false` on the first onSignal invocation and `true` thereafter. You
 * can ignore repeated signals by specifying `ignoreRepeatSignals: true`.
 *
 * @returns A function that installs a signal handler. It returns a function that removes the
 * installed signal handler.
 */
export declare const createSignalHandler: (signals: Signals[] | Set<Signals>, { ignoreRepeatSignals, process, }?: CreateSignalHandlerOptions) => ({ onSignal, }: {
    onSignal: (options: {
        signal: NodeJS.Signals;
        force: boolean;
    }) => Promise<void>;
}) => () => void;
//# sourceMappingURL=main.d.ts.map