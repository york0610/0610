import { z } from "zod";
export * from "./host/main.js";
export * from "./surface/main.js";
/**
 * `UIExtensionEventSchema` is a combined schema that can parse any type of event (both host and
 * surface).
 *
 * In general, you probably don't want to use this--you're likely looking for either
 * `UIExtensionHostEventSchema` or `UIExtensionSurfaceEventSchema`. This can be useful, however, in
 * environments where the "host" and surface run in the same process (e.g. tests, Storybook).
 */
export declare const UIExtensionEventSchema: z.ZodUnion<[z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
    type: z.ZodLiteral<"NF::EUI_HOST::INITIALIZE">;
    data: z.ZodObject<{
        context: z.ZodObject<{
            auth: z.ZodObject<{
                netlifyToken: z.ZodDefault<z.ZodNullable<z.ZodString>>;
                providerToken: z.ZodDefault<z.ZodNullable<z.ZodString>>;
                providerTokens: z.ZodDefault<z.ZodArray<z.ZodObject<{
                    externalId: z.ZodString;
                    token: z.ZodString;
                    connectionId: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    externalId: string;
                    token: string;
                    connectionId: string;
                }, {
                    externalId: string;
                    token: string;
                    connectionId: string;
                }>, "many">>;
            }, "strip", z.ZodTypeAny, {
                netlifyToken: string | null;
                providerToken: string | null;
                providerTokens: {
                    externalId: string;
                    token: string;
                    connectionId: string;
                }[];
            }, {
                netlifyToken?: string | null | undefined;
                providerToken?: string | null | undefined;
                providerTokens?: {
                    externalId: string;
                    token: string;
                    connectionId: string;
                }[] | undefined;
            }>;
            user: z.ZodDefault<z.ZodObject<{
                id: z.ZodDefault<z.ZodNullable<z.ZodString>>;
            }, "strip", z.ZodTypeAny, {
                id: string | null;
            }, {
                id?: string | null | undefined;
            }>>;
            visualEditor: z.ZodObject<{
                webhookBaseURL: z.ZodDefault<z.ZodNullable<z.ZodString>>;
                projectId: z.ZodDefault<z.ZodNullable<z.ZodString>>;
                notifyVisualEditor: z.ZodDefault<z.ZodNullable<z.ZodBoolean>>;
            }, "strip", z.ZodTypeAny, {
                webhookBaseURL: string | null;
                projectId: string | null;
                notifyVisualEditor: boolean | null;
            }, {
                webhookBaseURL?: string | null | undefined;
                projectId?: string | null | undefined;
                notifyVisualEditor?: boolean | null | undefined;
            }>;
            configurationId: z.ZodDefault<z.ZodNullable<z.ZodString>>;
            dataLayerId: z.ZodDefault<z.ZodNullable<z.ZodString>>;
            projectId: z.ZodDefault<z.ZodNullable<z.ZodString>>;
            siteId: z.ZodDefault<z.ZodNullable<z.ZodString>>;
            teamId: z.ZodDefault<z.ZodNullable<z.ZodString>>;
            accountId: z.ZodDefault<z.ZodNullable<z.ZodString>>;
            theme: z.ZodEnum<["light", "dark"]>;
            deployId: z.ZodEffects<z.ZodDefault<z.ZodNullable<z.ZodString>>, string | null, string | null | undefined>;
        }, "strip", z.ZodTypeAny, {
            auth: {
                netlifyToken: string | null;
                providerToken: string | null;
                providerTokens: {
                    externalId: string;
                    token: string;
                    connectionId: string;
                }[];
            };
            user: {
                id: string | null;
            };
            visualEditor: {
                webhookBaseURL: string | null;
                projectId: string | null;
                notifyVisualEditor: boolean | null;
            };
            projectId: string | null;
            configurationId: string | null;
            dataLayerId: string | null;
            siteId: string | null;
            teamId: string | null;
            accountId: string | null;
            theme: "light" | "dark";
            deployId: string | null;
        }, {
            auth: {
                netlifyToken?: string | null | undefined;
                providerToken?: string | null | undefined;
                providerTokens?: {
                    externalId: string;
                    token: string;
                    connectionId: string;
                }[] | undefined;
            };
            visualEditor: {
                webhookBaseURL?: string | null | undefined;
                projectId?: string | null | undefined;
                notifyVisualEditor?: boolean | null | undefined;
            };
            theme: "light" | "dark";
            user?: {
                id?: string | null | undefined;
            } | undefined;
            projectId?: string | null | undefined;
            configurationId?: string | null | undefined;
            dataLayerId?: string | null | undefined;
            siteId?: string | null | undefined;
            teamId?: string | null | undefined;
            accountId?: string | null | undefined;
            deployId?: string | null | undefined;
        }>;
        extension: z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
            slug: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
            name: string;
            slug: string;
        }, {
            id: string;
            name: string;
            slug: string;
        }>;
        surface: z.ZodObject<{
            name: z.ZodNativeEnum<typeof import("../surfaces.js").Surfaces>;
        }, "strip", z.ZodTypeAny, {
            name: import("../surfaces.js").Surfaces;
        }, {
            name: import("../surfaces.js").Surfaces;
        }>;
    }, "strip", z.ZodTypeAny, {
        context: {
            auth: {
                netlifyToken: string | null;
                providerToken: string | null;
                providerTokens: {
                    externalId: string;
                    token: string;
                    connectionId: string;
                }[];
            };
            user: {
                id: string | null;
            };
            visualEditor: {
                webhookBaseURL: string | null;
                projectId: string | null;
                notifyVisualEditor: boolean | null;
            };
            projectId: string | null;
            configurationId: string | null;
            dataLayerId: string | null;
            siteId: string | null;
            teamId: string | null;
            accountId: string | null;
            theme: "light" | "dark";
            deployId: string | null;
        };
        extension: {
            id: string;
            name: string;
            slug: string;
        };
        surface: {
            name: import("../surfaces.js").Surfaces;
        };
    }, {
        context: {
            auth: {
                netlifyToken?: string | null | undefined;
                providerToken?: string | null | undefined;
                providerTokens?: {
                    externalId: string;
                    token: string;
                    connectionId: string;
                }[] | undefined;
            };
            visualEditor: {
                webhookBaseURL?: string | null | undefined;
                projectId?: string | null | undefined;
                notifyVisualEditor?: boolean | null | undefined;
            };
            theme: "light" | "dark";
            user?: {
                id?: string | null | undefined;
            } | undefined;
            projectId?: string | null | undefined;
            configurationId?: string | null | undefined;
            dataLayerId?: string | null | undefined;
            siteId?: string | null | undefined;
            teamId?: string | null | undefined;
            accountId?: string | null | undefined;
            deployId?: string | null | undefined;
        };
        extension: {
            id: string;
            name: string;
            slug: string;
        };
        surface: {
            name: import("../surfaces.js").Surfaces;
        };
    }>;
}, "strip", z.ZodTypeAny, {
    data: {
        context: {
            auth: {
                netlifyToken: string | null;
                providerToken: string | null;
                providerTokens: {
                    externalId: string;
                    token: string;
                    connectionId: string;
                }[];
            };
            user: {
                id: string | null;
            };
            visualEditor: {
                webhookBaseURL: string | null;
                projectId: string | null;
                notifyVisualEditor: boolean | null;
            };
            projectId: string | null;
            configurationId: string | null;
            dataLayerId: string | null;
            siteId: string | null;
            teamId: string | null;
            accountId: string | null;
            theme: "light" | "dark";
            deployId: string | null;
        };
        extension: {
            id: string;
            name: string;
            slug: string;
        };
        surface: {
            name: import("../surfaces.js").Surfaces;
        };
    };
    type: "NF::EUI_HOST::INITIALIZE";
}, {
    data: {
        context: {
            auth: {
                netlifyToken?: string | null | undefined;
                providerToken?: string | null | undefined;
                providerTokens?: {
                    externalId: string;
                    token: string;
                    connectionId: string;
                }[] | undefined;
            };
            visualEditor: {
                webhookBaseURL?: string | null | undefined;
                projectId?: string | null | undefined;
                notifyVisualEditor?: boolean | null | undefined;
            };
            theme: "light" | "dark";
            user?: {
                id?: string | null | undefined;
            } | undefined;
            projectId?: string | null | undefined;
            configurationId?: string | null | undefined;
            dataLayerId?: string | null | undefined;
            siteId?: string | null | undefined;
            teamId?: string | null | undefined;
            accountId?: string | null | undefined;
            deployId?: string | null | undefined;
        };
        extension: {
            id: string;
            name: string;
            slug: string;
        };
        surface: {
            name: import("../surfaces.js").Surfaces;
        };
    };
    type: "NF::EUI_HOST::INITIALIZE";
}>, z.ZodObject<{
    type: z.ZodLiteral<"NF::EUI_HOST::REQUEST_DIMENSIONS">;
    data: z.ZodDefault<z.ZodOptional<z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>>;
}, "strip", z.ZodTypeAny, {
    data: {};
    type: "NF::EUI_HOST::REQUEST_DIMENSIONS";
}, {
    type: "NF::EUI_HOST::REQUEST_DIMENSIONS";
    data?: {} | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"NF::EUI_HOST::UPDATE_CONTEXT">;
    data: z.ZodObject<{
        context: z.ZodObject<{
            auth: z.ZodObject<{
                netlifyToken: z.ZodEffects<z.ZodDefault<z.ZodNullable<z.ZodString>>, string | null, string | null | undefined>;
                providerToken: z.ZodEffects<z.ZodDefault<z.ZodNullable<z.ZodString>>, string | null, string | null | undefined>;
                providerTokens: z.ZodDefault<z.ZodArray<z.ZodObject<{
                    externalId: z.ZodString;
                    token: z.ZodString;
                    connectionId: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    externalId: string;
                    token: string;
                    connectionId: string;
                }, {
                    externalId: string;
                    token: string;
                    connectionId: string;
                }>, "many">>;
            }, "strip", z.ZodTypeAny, {
                netlifyToken: string | null;
                providerToken: string | null;
                providerTokens: {
                    externalId: string;
                    token: string;
                    connectionId: string;
                }[];
            }, {
                netlifyToken?: string | null | undefined;
                providerToken?: string | null | undefined;
                providerTokens?: {
                    externalId: string;
                    token: string;
                    connectionId: string;
                }[] | undefined;
            }>;
            user: z.ZodDefault<z.ZodObject<{
                id: z.ZodEffects<z.ZodDefault<z.ZodNullable<z.ZodString>>, string | null, string | null | undefined>;
            }, "strip", z.ZodTypeAny, {
                id: string | null;
            }, {
                id?: string | null | undefined;
            }>>;
            configurationId: z.ZodEffects<z.ZodDefault<z.ZodNullable<z.ZodString>>, string | null, string | null | undefined>;
            dataLayerId: z.ZodEffects<z.ZodDefault<z.ZodNullable<z.ZodString>>, string | null, string | null | undefined>;
            projectId: z.ZodEffects<z.ZodDefault<z.ZodNullable<z.ZodString>>, string | null, string | null | undefined>;
            siteId: z.ZodEffects<z.ZodDefault<z.ZodNullable<z.ZodString>>, string | null, string | null | undefined>;
            teamId: z.ZodEffects<z.ZodDefault<z.ZodNullable<z.ZodString>>, string | null, string | null | undefined>;
            accountId: z.ZodEffects<z.ZodDefault<z.ZodNullable<z.ZodString>>, string | null, string | null | undefined>;
            theme: z.ZodEnum<["light", "dark"]>;
            visualEditor: z.ZodObject<{
                webhookBaseURL: z.ZodEffects<z.ZodDefault<z.ZodNullable<z.ZodString>>, string | null, string | null | undefined>;
                projectId: z.ZodEffects<z.ZodDefault<z.ZodNullable<z.ZodString>>, string | null, string | null | undefined>;
                notifyVisualEditor: z.ZodDefault<z.ZodNullable<z.ZodBoolean>>;
            }, "strip", z.ZodTypeAny, {
                webhookBaseURL: string | null;
                projectId: string | null;
                notifyVisualEditor: boolean | null;
            }, {
                webhookBaseURL?: string | null | undefined;
                projectId?: string | null | undefined;
                notifyVisualEditor?: boolean | null | undefined;
            }>;
            deployId: z.ZodEffects<z.ZodDefault<z.ZodNullable<z.ZodString>>, string | null, string | null | undefined>;
        }, "strip", z.ZodTypeAny, {
            auth: {
                netlifyToken: string | null;
                providerToken: string | null;
                providerTokens: {
                    externalId: string;
                    token: string;
                    connectionId: string;
                }[];
            };
            user: {
                id: string | null;
            };
            visualEditor: {
                webhookBaseURL: string | null;
                projectId: string | null;
                notifyVisualEditor: boolean | null;
            };
            projectId: string | null;
            configurationId: string | null;
            dataLayerId: string | null;
            siteId: string | null;
            teamId: string | null;
            accountId: string | null;
            theme: "light" | "dark";
            deployId: string | null;
        }, {
            auth: {
                netlifyToken?: string | null | undefined;
                providerToken?: string | null | undefined;
                providerTokens?: {
                    externalId: string;
                    token: string;
                    connectionId: string;
                }[] | undefined;
            };
            visualEditor: {
                webhookBaseURL?: string | null | undefined;
                projectId?: string | null | undefined;
                notifyVisualEditor?: boolean | null | undefined;
            };
            theme: "light" | "dark";
            user?: {
                id?: string | null | undefined;
            } | undefined;
            projectId?: string | null | undefined;
            configurationId?: string | null | undefined;
            dataLayerId?: string | null | undefined;
            siteId?: string | null | undefined;
            teamId?: string | null | undefined;
            accountId?: string | null | undefined;
            deployId?: string | null | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        context: {
            auth: {
                netlifyToken: string | null;
                providerToken: string | null;
                providerTokens: {
                    externalId: string;
                    token: string;
                    connectionId: string;
                }[];
            };
            user: {
                id: string | null;
            };
            visualEditor: {
                webhookBaseURL: string | null;
                projectId: string | null;
                notifyVisualEditor: boolean | null;
            };
            projectId: string | null;
            configurationId: string | null;
            dataLayerId: string | null;
            siteId: string | null;
            teamId: string | null;
            accountId: string | null;
            theme: "light" | "dark";
            deployId: string | null;
        };
    }, {
        context: {
            auth: {
                netlifyToken?: string | null | undefined;
                providerToken?: string | null | undefined;
                providerTokens?: {
                    externalId: string;
                    token: string;
                    connectionId: string;
                }[] | undefined;
            };
            visualEditor: {
                webhookBaseURL?: string | null | undefined;
                projectId?: string | null | undefined;
                notifyVisualEditor?: boolean | null | undefined;
            };
            theme: "light" | "dark";
            user?: {
                id?: string | null | undefined;
            } | undefined;
            projectId?: string | null | undefined;
            configurationId?: string | null | undefined;
            dataLayerId?: string | null | undefined;
            siteId?: string | null | undefined;
            teamId?: string | null | undefined;
            accountId?: string | null | undefined;
            deployId?: string | null | undefined;
        };
    }>;
}, "strip", z.ZodTypeAny, {
    data: {
        context: {
            auth: {
                netlifyToken: string | null;
                providerToken: string | null;
                providerTokens: {
                    externalId: string;
                    token: string;
                    connectionId: string;
                }[];
            };
            user: {
                id: string | null;
            };
            visualEditor: {
                webhookBaseURL: string | null;
                projectId: string | null;
                notifyVisualEditor: boolean | null;
            };
            projectId: string | null;
            configurationId: string | null;
            dataLayerId: string | null;
            siteId: string | null;
            teamId: string | null;
            accountId: string | null;
            theme: "light" | "dark";
            deployId: string | null;
        };
    };
    type: "NF::EUI_HOST::UPDATE_CONTEXT";
}, {
    data: {
        context: {
            auth: {
                netlifyToken?: string | null | undefined;
                providerToken?: string | null | undefined;
                providerTokens?: {
                    externalId: string;
                    token: string;
                    connectionId: string;
                }[] | undefined;
            };
            visualEditor: {
                webhookBaseURL?: string | null | undefined;
                projectId?: string | null | undefined;
                notifyVisualEditor?: boolean | null | undefined;
            };
            theme: "light" | "dark";
            user?: {
                id?: string | null | undefined;
            } | undefined;
            projectId?: string | null | undefined;
            configurationId?: string | null | undefined;
            dataLayerId?: string | null | undefined;
            siteId?: string | null | undefined;
            teamId?: string | null | undefined;
            accountId?: string | null | undefined;
            deployId?: string | null | undefined;
        };
    };
    type: "NF::EUI_HOST::UPDATE_CONTEXT";
}>]>, z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
    type: z.ZodLiteral<"NF::EUI_SURFACE::CONNECT_PROVIDER">;
    data: z.ZodDefault<z.ZodOptional<z.ZodObject<{
        additionalAuthURLQueryParams: z.ZodDefault<z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>>;
    }, "strip", z.ZodTypeAny, {
        additionalAuthURLQueryParams: Record<string, string>;
    }, {
        additionalAuthURLQueryParams?: Record<string, string> | undefined;
    }>>>;
}, "strip", z.ZodTypeAny, {
    data: {
        additionalAuthURLQueryParams: Record<string, string>;
    };
    type: "NF::EUI_SURFACE::CONNECT_PROVIDER";
}, {
    type: "NF::EUI_SURFACE::CONNECT_PROVIDER";
    data?: {
        additionalAuthURLQueryParams?: Record<string, string> | undefined;
    } | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"NF::EUI_SURFACE::DISCONNECT_PROVIDER">;
    data: z.ZodDefault<z.ZodOptional<z.ZodObject<{
        connectionID: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    }, "strip", z.ZodTypeAny, {
        connectionID: string | null;
    }, {
        connectionID?: string | null | undefined;
    }>>>;
}, "strip", z.ZodTypeAny, {
    data: {
        connectionID: string | null;
    };
    type: "NF::EUI_SURFACE::DISCONNECT_PROVIDER";
}, {
    type: "NF::EUI_SURFACE::DISCONNECT_PROVIDER";
    data?: {
        connectionID?: string | null | undefined;
    } | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"NF::EUI_SURFACE::INITIALIZE">;
    data: z.ZodDefault<z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>;
}, "strip", z.ZodTypeAny, {
    data: {};
    type: "NF::EUI_SURFACE::INITIALIZE";
}, {
    type: "NF::EUI_SURFACE::INITIALIZE";
    data?: {} | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"NF::EUI_SURFACE::REQUEST_DIMENSIONS">;
    data: z.ZodObject<{
        dimensions: z.ZodObject<{
            height: z.ZodNumber;
            width: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            height: number;
            width: number;
        }, {
            height: number;
            width: number;
        }>;
    }, "strip", z.ZodTypeAny, {
        dimensions: {
            height: number;
            width: number;
        };
    }, {
        dimensions: {
            height: number;
            width: number;
        };
    }>;
}, "strip", z.ZodTypeAny, {
    data: {
        dimensions: {
            height: number;
            width: number;
        };
    };
    type: "NF::EUI_SURFACE::REQUEST_DIMENSIONS";
}, {
    data: {
        dimensions: {
            height: number;
            width: number;
        };
    };
    type: "NF::EUI_SURFACE::REQUEST_DIMENSIONS";
}>, z.ZodObject<{
    type: z.ZodLiteral<"NF::EUI_SURFACE::REQUEST_TERMINATION">;
    data: z.ZodDefault<z.ZodOptional<z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>>;
}, "strip", z.ZodTypeAny, {
    data: {};
    type: "NF::EUI_SURFACE::REQUEST_TERMINATION";
}, {
    type: "NF::EUI_SURFACE::REQUEST_TERMINATION";
    data?: {} | undefined;
}>]>]>;
/**
 * `UIExtensionEvent` is a type that represents any type of event (both host and surface).
 *
 * In general, you probably don't want to use this--you're likely looking for either
 * `UIExtensionHostEvent` or `UIExtensionSurfaceEvent`.
 */
export type UIExtensionEvent = z.output<typeof UIExtensionEventSchema>;
/**
 * `UIExtensionEvent` is a union of all event `type`s (both host and surface).
 *
 * In general, you probably don't want to use this--you're likely looking for either
 * `UIExtensionHostEventType` or `UIExtensionSurfaceEventType`.
 */
export type UIExtensionEventType = UIExtensionEvent["type"];
//# sourceMappingURL=main.d.ts.map