import { jsx, Fragment } from "react/jsx-runtime";
import { Dropdown as Dropdown$1 } from "@netlify/ui";
import { forwardRef, useMemo } from "react";
import { cn } from "../classnames.js";
const getInitialSelectedOption = (options, initial) => {
  if (typeof initial === "number") {
    return options[initial];
  }
  if (typeof initial === "object") {
    return initial;
  }
  return options[0];
};
const getClassNamesForVariant = (variant) => {
  switch (variant) {
    case "danger":
      return ["danger"];
    case "standard":
      return [];
  }
};
const Dropdown = forwardRef(function Dropdown2({
  initialSelectedOption: originalInitialSelectedOption,
  onChange,
  options: originalOptions = [],
  selectedOptionIndicator: selectedItemIndicator,
  ...otherProps
}, ref) {
  const options = useMemo(
    () => originalOptions.map((originalOption) => {
      return {
        ...originalOption,
        className: cn(
          getClassNamesForVariant(originalOption.variant ?? "standard")
        ),
        label: originalOption.label === "" ? /* @__PURE__ */ jsx(Fragment, { children: "Â " }) : originalOption.label
      };
    }),
    [originalOptions]
  );
  return /* @__PURE__ */ jsx(
    Dropdown$1,
    {
      ref,
      initialSelectedItem: getInitialSelectedOption(
        options,
        originalInitialSelectedOption
      ),
      items: options,
      noCheck: selectedItemIndicator === null,
      onSelect: onChange,
      ...otherProps
    }
  );
});
export {
  Dropdown,
  getInitialSelectedOption
};
//# sourceMappingURL=Dropdown.js.map
