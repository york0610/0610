import { jsxs, jsx } from "react/jsx-runtime";
import { cn, ButtonIcon, Button } from "@netlify/ui";
import { useState } from "react";
const FEEDBACK_TIMEOUT_IN_MILLIS = 2e3;
const ClipboardWrapperCN = (icon, className) => cn(
  "tw-relative",
  "tw-inline-block",
  icon ? "tw-w-auto" : "tw-w-full md:tw-w-auto",
  className
);
const ClipboardAlertCN = ({ feedback }) => cn(
  "tw-block",
  "tw-absolute",
  "tw-bg-black",
  "tw-text-white",
  "tw-p-2",
  "tw-rounded-sm",
  "tw-text-xs",
  "tw-top-0",
  "tw-left-1/2",
  "tw-opacity-0",
  "tw-w-max",
  "dark:tw-border",
  "dark:tw-border-gray-dark",
  feedback && "tw-animate-pop-up"
);
const feedbackPopup = (feedback) => {
  return /* @__PURE__ */ jsx("div", { role: "alert", className: ClipboardAlertCN({ feedback }), children: feedback });
};
const ClipboardButton = ({
  disabled = false,
  icon = true,
  link,
  value,
  title = "Copy to clipboard",
  tooltip = "Copied!",
  onClick,
  className,
  level = "secondary"
}) => {
  const [feedback, setFeedback] = useState(null);
  const handleSuccess = () => {
    setFeedback(tooltip);
    setTimeout(() => {
      setFeedback(null);
    }, FEEDBACK_TIMEOUT_IN_MILLIS);
  };
  const handleError = () => {
    setFeedback("Couldn't copy text to clipboard");
  };
  const handleClick = () => {
    if (!value) {
      return;
    }
    void (async () => {
      try {
        await navigator.clipboard.writeText(value);
        if (onClick) {
          onClick();
        }
        handleSuccess();
      } catch {
        handleError();
      }
    })();
  };
  return /* @__PURE__ */ jsxs("div", { className: ClipboardWrapperCN(icon, className), children: [
    feedback && feedbackPopup(feedback),
    icon ? /* @__PURE__ */ jsx(
      ButtonIcon,
      {
        disabled,
        level,
        iconName: "copy-clipboard",
        onClick: handleClick,
        title
      }
    ) : link ? /* @__PURE__ */ jsx(
      "button",
      {
        className: "link",
        disabled,
        onClick: handleClick,
        title,
        children: link
      }
    ) : /* @__PURE__ */ jsx(Button, { disabled, level, onClick: handleClick, children: title })
  ] });
};
export {
  ClipboardWrapperCN,
  ClipboardButton as default,
  feedbackPopup
};
//# sourceMappingURL=ClipboardButton.js.map
