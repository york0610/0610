{"version":3,"file":"Dropdown.js","sources":["../../../src/components/Dropdown/Dropdown.tsx"],"sourcesContent":["import { Dropdown as BaseDropdown } from \"@netlify/ui\";\nimport React, { forwardRef, useMemo } from \"react\";\nimport { cn } from \"../classnames.js\";\n\nexport const getInitialSelectedOption = <T,>(\n  options: DropdownOption<T>[],\n  initial?: DropdownOption<T> | number | undefined,\n): DropdownOption<T> | undefined => {\n  if (typeof initial === \"number\") {\n    return options[initial];\n  }\n  if (typeof initial === \"object\") {\n    return initial;\n  }\n  return options[0];\n};\n\nconst getClassNamesForVariant = (\n  variant: Exclude<DropdownOption[\"variant\"], undefined>,\n): string[] => {\n  switch (variant) {\n    case \"danger\":\n      return [\"danger\"];\n    case \"standard\":\n      return [];\n  }\n};\n\nexport type DropdownOption<T = unknown> = {\n  /**\n   * A human-readable element rendered to represent the option.\n   */\n  label: React.ReactNode;\n\n  /**\n   * The programmatic value used when the option is selected.\n   */\n  value?: T | undefined;\n\n  /**\n   *\n   *\n   * @default standard\n   */\n  variant?: \"standard\" | \"danger\" | undefined;\n};\n\nexport type DropdownProps<T> = {\n  /**\n   * A class property to attach to the element.\n   *\n   * @see {@link !Element.className}\n   */\n  className?: string | undefined;\n\n  /**\n   * If `true`, the component is disabled.\n   *\n   * @default false\n   */\n  disabled?: boolean | undefined;\n\n  /**\n   * An option or an index of an option from `options` to select on first render.\n   */\n  initialSelectedOption?: DropdownOption<T> | number | undefined;\n\n  /**\n   * A callback invoked when an option is selected.\n   */\n  onChange?: ((option: DropdownOption<T> | null) => void) | undefined;\n\n  /**\n   * A list of options to render in the dropdown.\n   */\n  options?: DropdownOption<T>[] | undefined;\n\n  /**\n   * A visual element rendered next to the current selected option in the dropdown menu. To disable\n   * the indicator, specify `null`.\n   *\n   * Currently, only disabling the indicator is supported.\n   */\n  selectedOptionIndicator?: null | undefined;\n\n  /**\n   * Display a static value in place of the the dropdown toggle button (in place of the current\n   * selected option).\n   */\n  toggle?: { label?: React.ReactNode | undefined } | undefined;\n};\n\n/**\n * Dropdowns let users select from a list of options.\n *\n * <!-- TODO(ndhoule): Add a screenshot here -->\n *\n * @param props\n * @internal\n * @example\n * ```ts\n * import { Dropdown } from \"@netlify/sdk/react/components\";\n *\n * <Dropdown\n *   options=[\n *     { label: \"Pomeranian\", value: \"pomeranian\" },\n *     { label: \"Golden Retriever\", value: \"golden-retriever\" },\n *     { label: \"Doge\", value: \"shiba-inu\" },\n *   ]\n * />\n * ```\n */\nexport const Dropdown = forwardRef(function Dropdown<T>(\n  {\n    initialSelectedOption: originalInitialSelectedOption,\n    onChange,\n    options: originalOptions = [],\n    selectedOptionIndicator: selectedItemIndicator,\n    ...otherProps\n  }: DropdownProps<T>,\n  ref: React.ForwardedRef<HTMLFormElement>,\n) {\n  const options = useMemo<DropdownOption<T>[]>(\n    () =>\n      originalOptions.map((originalOption) => {\n        return {\n          ...originalOption,\n          className: cn(\n            getClassNamesForVariant(originalOption.variant ?? \"standard\"),\n          ),\n          label:\n            originalOption.label === \"\" ? <>&nbsp;</> : originalOption.label,\n        };\n      }),\n    [originalOptions],\n  );\n\n  return (\n    <BaseDropdown\n      // @ts-expect-error XXX(ndhoule): The Dropdown component technically accepts a ref, but it's\n      // not part of its public props interface.\n      ref={ref}\n      initialSelectedItem={getInitialSelectedOption(\n        options,\n        originalInitialSelectedOption,\n      )}\n      items={options}\n      noCheck={selectedItemIndicator === null}\n      onSelect={onChange}\n      {...otherProps}\n    />\n  );\n}) as <T>(\n  props: DropdownProps<T> & {\n    ref?: React.ForwardedRef<HTMLElement> | undefined;\n  },\n) => JSX.Element;\n"],"names":["Dropdown","BaseDropdown"],"mappings":";;;;AAIO,MAAM,2BAA2B,CACtC,SACA,YACkC;AAClC,MAAI,OAAO,YAAY,UAAU;AAC/B,WAAO,QAAQ,OAAO;AAAA,EACxB;AACA,MAAI,OAAO,YAAY,UAAU;AAC/B,WAAO;AAAA,EACT;AACA,SAAO,QAAQ,CAAC;AAClB;AAEA,MAAM,0BAA0B,CAC9B,YACa;AACb,UAAQ,SAAA;AAAA,IACN,KAAK;AACH,aAAO,CAAC,QAAQ;AAAA,IAClB,KAAK;AACH,aAAO,CAAA;AAAA,EAAC;AAEd;AAsFO,MAAM,WAAW,WAAW,SAASA,UAC1C;AAAA,EACE,uBAAuB;AAAA,EACvB;AAAA,EACA,SAAS,kBAAkB,CAAA;AAAA,EAC3B,yBAAyB;AAAA,EACzB,GAAG;AACL,GACA,KACA;AACA,QAAM,UAAU;AAAA,IACd,MACE,gBAAgB,IAAI,CAAC,mBAAmB;AACtC,aAAO;AAAA,QACL,GAAG;AAAA,QACH,WAAW;AAAA,UACT,wBAAwB,eAAe,WAAW,UAAU;AAAA,QAAA;AAAA,QAE9D,OACE,eAAe,UAAU,KAAK,oBAAA,UAAA,EAAE,UAAA,KAAM,IAAM,eAAe;AAAA,MAAA;AAAA,IAEjE,CAAC;AAAA,IACH,CAAC,eAAe;AAAA,EAAA;AAGlB,SACE;AAAA,IAACC;AAAAA,IAAA;AAAA,MAGC;AAAA,MACA,qBAAqB;AAAA,QACnB;AAAA,QACA;AAAA,MAAA;AAAA,MAEF,OAAO;AAAA,MACP,SAAS,0BAA0B;AAAA,MACnC,UAAU;AAAA,MACT,GAAG;AAAA,IAAA;AAAA,EAAA;AAGV,CAAC;"}