/**
 * createSignalHandler accepts a list of process signals to listen on and returns a function that,
 * when invoked, installs the specified onSignal handler for those signals.
 *
 * onSignal receives an object with two properties: the signal that prompted the invocation, and a
 * `force` value that is set to `false` on the first onSignal invocation and `true` thereafter. You
 * can ignore repeated signals by specifying `ignoreRepeatSignals: true`.
 *
 * @returns A function that installs a signal handler. It returns a function that removes the
 * installed signal handler.
 */
export const createSignalHandler = (signals, { ignoreRepeatSignals = false, process = global.process, } = {}) => {
    const uniqueSignals = new Set(signals);
    return ({ onSignal, }) => {
        let hasReceivedSignal = false;
        const handler = (signal) => {
            if (hasReceivedSignal) {
                if (ignoreRepeatSignals) {
                    return;
                }
                void onSignal({ signal, force: true });
                return;
            }
            hasReceivedSignal = true;
            void onSignal({ signal, force: false });
        };
        for (const signal of uniqueSignals) {
            process.on(signal, handler);
        }
        return () => {
            for (const signal of uniqueSignals) {
                process.off(signal, handler);
            }
        };
    };
};
//# sourceMappingURL=main.js.map