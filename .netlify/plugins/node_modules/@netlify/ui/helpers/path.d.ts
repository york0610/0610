/**
 * These path helpers are a non-Immutable port of the original path helpers.
 * They are used to generate URLs for the Netlify app, and are stricter than the original code.
 * The original code allowed undefined objects and strings, but this version is stricter.
 * Restore the original code if it causes issues.
 *
 * @see {@link file://./../../../../apps/netlify-react-ui/src/helpers/path.ts}
 */
type OrganizationWithRequiredSlug = {
    slug: string;
};
type AccountWithRequiredSlug = {
    slug: string;
};
type SiteWithRequiredName = {
    name: string;
};
type DeployWithRequiredId = {
    id: string;
    branch?: string | undefined;
    context?: string | undefined;
    review_id?: number | undefined;
};
type FunctionWithRequiredN = {
    n?: string | undefined;
};
type BuildWithRequiredDeployId = {
    deploy_id: string;
};
type DevServer = {
    id?: string | undefined;
    site_id?: string | undefined;
};
export declare function sitesPath(account: AccountWithRequiredSlug): string;
export declare function sitePath(site: SiteWithRequiredName, ...rest: string[]): string;
export declare function siteSettingsPath(site: SiteWithRequiredName, ...rest: string[]): string;
export declare function deploysPath(site: SiteWithRequiredName): string;
export declare function deployPath(site: SiteWithRequiredName, deploy: DeployWithRequiredId): string;
export declare function devServerPathWithSite(site: SiteWithRequiredName, devServer?: DevServer): string;
export declare function devServerPath(devServer: DevServer): string;
export declare function buildsPath(account: AccountWithRequiredSlug, ...rest: string[]): string;
export declare function buildPath(account: AccountWithRequiredSlug, build: BuildWithRequiredDeployId): string;
export declare function membersPath(account: AccountWithRequiredSlug, ...rest: string[]): string;
export declare function membersBuildPath(account: AccountWithRequiredSlug, deployId: string, ...rest: string[]): string;
export declare function functionsPath(site: SiteWithRequiredName, deploy: DeployWithRequiredId): string;
export declare function functionPath(site: SiteWithRequiredName, func: FunctionWithRequiredN, scope?: string): string;
export declare function functionPathWithTimeRangeAndBranch({ siteName, funcName, from, to, branch, }: {
    siteName: string;
    funcName?: string;
    from?: number;
    to?: number;
    branch?: string;
}): string;
export declare function edgeFunctionsPath(site: SiteWithRequiredName, query?: string): string;
export declare function edgeFunctionsPathWithTimeRangeAndBranch({ siteName, from, to, branch, isMainBranch, }: {
    siteName: string;
    from?: number;
    to?: number;
    branch?: string;
    isMainBranch?: boolean;
}): string;
export declare function formsPath(site: SiteWithRequiredName): string;
export declare function formPath(site: SiteWithRequiredName, formId?: string): string;
export declare function dnsPath(account: AccountWithRequiredSlug, ...rest: string[]): string;
export declare function accountPath(account: AccountWithRequiredSlug, ...rest: string[]): string;
export declare function reviewerPath(account: AccountWithRequiredSlug, ...rest: string[]): string;
export declare function teamSettingsPath(account: AccountWithRequiredSlug, ...rest: string[]): string;
export declare function teamAuditLogPath(account: AccountWithRequiredSlug, ...rest: string[]): string;
export declare function billingPath(account: AccountWithRequiredSlug, ...rest: string[]): string;
export declare function enterpriseUpgradePath(account: AccountWithRequiredSlug): string;
export declare function getPathSegments(path: string): string[];
export declare function getPathSegmentsWithoutParams(path: string, params?: Record<string, string>): string[];
export declare function getLastSegmentOfPath(path: string): string;
export declare function forumsPath(path?: string): string;
export declare function blogPath(path?: string): string;
export declare function organizationPath(organization: OrganizationWithRequiredSlug, ...rest: string[]): string;
export declare function integrationsPath(path?: string): string;
export declare function docsPathWithHash(...rest: string[]): string;
export declare function docsPath(...rest: string[]): string;
export declare function pathnameMatchesPattern(regexp: RegExp): boolean;
export {};
