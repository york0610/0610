/**
 * ExtensionResource is an enum containing resources a user can take action on, like "environment
 * variable".
 *
 * @internal
 */
export declare enum ExtensionResource {
    Blob = "blob",
    Build = "build",
    BuildHook = "buildhook",
    Deploy = "deploy",
    Dns = "dns",
    Env = "env",
    Form = "form",
    Hook = "hook",
    LogDrain = "logdrain",
    Site = "site",
    User = "user",
    /**
     * @deprecated This resource only exists for v1 extension support
     */
    Extension = "extension"
}
/**
 * ExtensionResource is an enum containing actions a user can take on resources, like "read" or
 * "write".
 *
 * @internal
 */
export declare enum ExtensionAction {
    Read = "read",
    Write = "write",
    Delete = "delete"
}
/**
 * An enum containing all extension permission scopes. These scopes are primarily used to restrict
 * interactions with the Netlify API (Bitballoon).
 *
 * @internal
 */
export declare enum ExtensionScope {
    BlobRead = "blob:read",
    BlobWrite = "blob:write",
    BlobDelete = "blob:delete",
    BuildRead = "build:read",
    BuildWrite = "build:write",
    BuildHookRead = "buildhook:read",
    BuildHookWrite = "buildhook:write",
    BuildHookDelete = "buildhook:delete",
    DeployRead = "deploy:read",
    DeployWrite = "deploy:write",
    DeployDelete = "deploy:delete",
    DnsRead = "dns:read",
    HookRead = "hook:read",
    HookWrite = "hook:write",
    HookDelete = "hook:delete",
    EnvRead = "env:read",
    EnvWrite = "env:write",
    EnvDelete = "env:delete",
    FormRead = "form:read",
    FormDelete = "form:delete",
    LogDrainRead = "logdrain:read",
    LogDrainWrite = "logdrain:write",
    LogDrainDelete = "logdrain:delete",
    SiteRead = "site:read",
    SiteWrite = "site:write",
    UserRead = "user:read",
    UserWrite = "user:write",
    /**
     * @deprecated This scope only exists for v1 extension support. It's used by v2 extensions in the
     * enable flow, but the permissions it grants are not required to enable a v2 extension.
     */
    EnableExtension = "enable"
}
/**
 * listExtensionScopes returns a list of all extension scope values.
 *
 * By default, deprecated scopes are filtered out.
 *
 * @internal
 */
export declare const listExtensionScopes: ({ includeDeprecated, }?: {
    includeDeprecated?: boolean | undefined;
}) => ExtensionScope[];
/**
 * humanizeExtensionResource formats a scope resource into a human-readable label.
 *
 * @internal
 */
export declare const humanizeExtensionResource: (resource: ExtensionResource) => string;
/**
 * humanizeExtensionAction formats a scope action into a human-readable label.
 *
 * @internal
 */
export declare const humanizeExtensionAction: (action: ExtensionAction) => string;
/**
 * parseExtensionScopeToResourceAndAction splits an extension scope into its resource (e.g. env) and
 * action (e.g. write) components.
 *
 * It's useful for e.g. grouping scopes by resource for display in a UI.
 *
 * Throws an error on failure to parse the scope (though it should only throw when there's a bug in
 * its implementation).
 *
 * @internal
 */
export declare const parseExtensionScopeToResourceAndAction: (scope: ExtensionScope) => [ExtensionResource, ExtensionAction];
/**
 * deserializeExtensionScopes transforms a serialized list of scopes into an array of
 * ExtensionScopes. Throws if the list is malformed or contains invalid scopes.
 *
 * @internal
 */
export declare const deserializeExtensionScopes: (value: string) => ExtensionScope[];
/**
 * serializeExtensionScopes serializes a list of extension scopes into a format suitable for
 * consumption by the Jigsaw API.
 *
 * @internal
 */
export declare const serializeExtensionScopes: (scopes: ExtensionScope[]) => string;
/**
 * isValidExtensionScope checks if a given value is a valid ExtensionScope.
 *
 * @internal
 */
export declare const isValidExtensionScope: (value: unknown) => value is ExtensionScope;
/**
 * extensionResourceComparator is a function that can be used with Array.prototype.sort to sort
 * resources in a predictable order.
 *
 * It's mainly useful for rendering scopes in a stable order in a UI.
 *
 * @internal
 */
export declare const extensionResourceComparator: (resourceA: ExtensionResource, resourceB: ExtensionResource) => number;
/**
 * extensionActionComparator is a function that can be used with Array.prototype.sort to sort
 * actions in a predictable order.
 *
 * It's mainly useful for rendering scopes in a stable order in a UI.
 *
 * @internal
 */
export declare const extensionActionComparator: (actionA: ExtensionAction, actionB: ExtensionAction) => number;
/**
 * extensionActionComparator is a function that can be used with Array.prototype.sort to sort
 * scopes in a predictable order.
 *
 * It's mainly useful for rendering scopes in a stable order in a UI.
 *
 * @internal
 */
export declare const extensionScopeComparator: (scopeA: ExtensionScope, scopeB: ExtensionScope) => number;
//# sourceMappingURL=scopes.d.ts.map