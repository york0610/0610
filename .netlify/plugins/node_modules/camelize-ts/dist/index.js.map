{"version":3,"file":"index.js","sourceRoot":"/","sources":["index.ts"],"names":[],"mappings":"AAyBA,SAAS,SAAS,CAAC,GAAW;IAC5B,OAAO,GAAG,CAAC,OAAO,CAAC,cAAc,EAAE,UAAU,CAAC,EAAE,CAAC;QAC7C,OAAO,CAAC,CAAC,WAAW,EAAE,CAAC;IAC3B,CAAC,CAAC,CAAC;AACL,CAAC;AAED,SAAS,IAAI,CAAC,GAAG,EAAE,OAAO,GAAG,KAAK;IAChC,IAAI,CAAC,GAAG,IAAI,OAAO,GAAG,KAAK,QAAQ;QAAE,OAAO,GAAG,CAAC;IAChD,IAAI,GAAG,YAAY,IAAI,IAAI,GAAG,YAAY,MAAM;QAAE,OAAO,GAAG,CAAC;IAC7D,IAAI,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC;QAAE,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE;YACzC,IAAI,CAAC,OAAO,EAAE;gBAAE,OAAO,IAAI,CAAC,CAAC,CAAC,CAAA;aAAE;YAChC,IAAI,OAAO,CAAC,KAAK,QAAQ;gBAAE,OAAO,IAAI,CAAC,CAAC,EAAE,OAAO,CAAC,CAAA;YAClD,OAAO,CAAC,CAAA;QACV,CAAC,CAAC,CAAA;IAEF,OAAO,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;QAC1C,MAAM,KAAK,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC;QAC7B,MAAM,aAAa,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QACrE,GAAG,CAAC,aAAa,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QACzD,OAAO,GAAG,CAAC;IACb,CAAC,EAAE,EAAE,CAAC,CAAC;AACT,CAAC;AAED,MAAM,CAAC,OAAO,UAAU,QAAQ;AAC9B;;GAEG;AACH,GAAM;AAEN;;GAEG;AACH,OAAW;IAEX,OAAO,OAAO,GAAG,KAAK,QAAQ,CAAC,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;AACvE,CAAC","sourcesContent":["type CamelCase<S extends string> =\n  S extends `${infer P1}_${infer P2}${infer P3}`\n    ? `${P1}${Uppercase<P2>}${CamelCase<P3>}`\n    : S;\n\ntype CamelizeObject<T, S = false> = {\n  [K in keyof T as Uncapitalize<CamelCase<string & K>>]:\n    T[K] extends Date ? T[K] :\n      T[K] extends RegExp ? T[K] :\n        T[K] extends Array<infer U>\n          ? U extends ({} | undefined)\n            ? Array<CamelizeObject<U>>\n            : T[K]\n          : T[K] extends ({} | undefined)\n          ? S extends true\n            ? T[K]\n            : CamelizeObject<T[K]>\n          : T[K]\n};\n\nexport type Camelize<T, S = false> =\n  T extends Array<(infer U)>\n    ? Array<CamelizeObject<U, S>>\n    : CamelizeObject<T, S>;\n\nfunction camelCase(str: string) {\n  return str.replace(/[_.-](\\w|$)/g, function (_, x) {\n      return x.toUpperCase();\n  });\n}\n\nfunction walk(obj, shallow = false): any {\n  if (!obj || typeof obj !== \"object\") return obj;\n  if (obj instanceof Date || obj instanceof RegExp) return obj;\n  if (Array.isArray(obj)) return obj.map(v => {\n    if (!shallow) { return walk(v) }\n    if (typeof v === 'object') return walk(v, shallow)\n    return v\n  })\n\n  return Object.keys(obj).reduce((res, key) => {\n    const camel = camelCase(key);\n    const uncapitalized = camel.charAt(0).toLowerCase() + camel.slice(1);\n    res[uncapitalized] = shallow ? obj[key] : walk(obj[key]);\n    return res;\n  }, {});\n}\n\nexport default function camelize<T, S extends boolean = false>(\n  /**\n   * Value to be camelized\n   */\n  obj: T,\n\n  /**\n   * If true, only the top level keys of the obj will be camel cased\n   */\n  shallow?: S\n): T extends String ? string : Camelize<T, S> {\n  return typeof obj === \"string\" ? camelCase(obj) : walk(obj, shallow);\n}\n"]}