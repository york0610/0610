import { IconName } from '../Icon/types';
import { ButtonIconAdditionalProps, ButtonIconXPosition, ButtonLevel, ButtonSize, ButtonVariant } from './types';
import * as React from 'react';
export declare const render: ({ children, iconName, iconXPosition, iconClassName, iconProps, }: {
    iconName?: IconName;
    iconXPosition?: ButtonIconXPosition;
    iconClassName?: string;
    iconProps?: ButtonIconAdditionalProps;
    children: React.ReactNode;
}) => string | number | boolean | import("react/jsx-runtime").JSX.Element | Iterable<React.ReactNode> | null | undefined;
interface NetlifyButtonProps {
    level?: ButtonLevel;
    variant?: ButtonVariant;
    size?: ButtonSize;
    saving?: boolean;
    disabled?: boolean;
    iconName?: IconName;
    iconXPosition?: ButtonIconXPosition;
    iconClassName?: string;
    iconProps?: ButtonIconAdditionalProps;
    outset?: string;
    type?: 'button' | 'submit' | 'reset';
    activeClassName?: string;
}
export interface ButtonProps extends React.ComponentPropsWithoutRef<'button'>, NetlifyButtonProps {
}
interface AnchorProps extends Omit<React.ComponentPropsWithoutRef<'a'>, 'type'>, NetlifyButtonProps {
    /** To render an HTML link. */
    to?: string;
    /** To render an HTML link. */
    href?: string;
}
type Element = HTMLAnchorElement | HTMLButtonElement;
export type Props = ButtonProps | AnchorProps;
/**
 * For HTML buttons and links styled as buttons.
 */
export declare const Button: React.ForwardRefExoticComponent<(ButtonProps | AnchorProps) & React.RefAttributes<Element>>;
export {};
