{"version":3,"file":"FullstorySetup.js","sources":["../../../../node_modules/.pnpm/@fullstory+browser@2.0.6/node_modules/@fullstory/browser/dist/index.esm.js","../../src/components/FullstorySetup.tsx"],"sourcesContent":["import { initFS } from '@fullstory/snippet';\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\n\r\nvar __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\n\nvar getFullStory = function () {\n    if (window._fs_namespace) {\n        return window[window._fs_namespace];\n    }\n    return undefined;\n};\nvar ensureSnippetLoaded = function () {\n    var fs = getFullStory();\n    if (!fs) {\n        throw Error('FullStory is not loaded, please ensure the init function is invoked before calling FullStory API functions');\n    }\n    return fs;\n};\nvar _init = function (inputOptions, readyCallback) {\n    // Make a copy so we can modify `options` if desired.\n    var options = __assign({}, inputOptions);\n    if (getFullStory()) {\n        console.warn('The FullStory snippet has already been defined elsewhere (likely in the <head> element)');\n        return;\n    }\n    // see README for details on the recordCrossDomainIFrames option\n    if (options.recordCrossDomainIFrames) {\n        window._fs_run_in_iframe = true;\n    }\n    if (options.appHost) {\n        window._fs_app_host = options.appHost;\n    }\n    if (options.assetMapId) {\n        window._fs_asset_map_id = options.assetMapId;\n    }\n    if (options.startCaptureManually) {\n        window._fs_capture_on_startup = false;\n    }\n    // record the contents of this iFrame when embedded in a parent site\n    if (options.recordOnlyThisIFrame) {\n        window._fs_is_outer_script = true;\n    }\n    // Set cookie domain if it was specified.\n    if (options.cookieDomain) {\n        window._fs_cookie_domain = options.cookieDomain;\n    }\n    if (options.debug === true) {\n        if (!options.script) {\n            options.script = 'edge.fullstory.com/s/fs-debug.js';\n        }\n        else {\n            console.warn('Ignoring `debug = true` because `script` is set');\n        }\n    }\n    initFS(options);\n    var fs = getFullStory();\n    if (!fs) {\n        console.warn('Failed to initialize FS snippet');\n        return;\n    }\n    if (readyCallback) {\n        fs('observe', { type: 'start', callback: readyCallback });\n    }\n    if (options.devMode === true) {\n        var message = 'FullStory was initialized in devMode and will stop recording';\n        fs('trackEvent', {\n            name: 'FullStory Dev Mode',\n            properties: {\n                message: message,\n            }\n        });\n        fs('shutdown');\n        window._fs_dev_mode = true;\n        console.warn(message);\n    }\n};\nvar initOnce = function (message) { return function (inputOptions, readyCallback) {\n    if (window._fs_initialized) {\n        if (message)\n            console.warn(message);\n        return;\n    }\n    _init(inputOptions, readyCallback);\n    window._fs_initialized = true;\n}; };\nvar init = initOnce('FullStory init has already been called once, additional invocations are ignored');\n// normalize undefined into boolean\nvar isInitialized = function () { return !!window._fs_initialized; };\nvar hasFullStoryWithFunction = function () {\n    var testNames = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        testNames[_i] = arguments[_i];\n    }\n    var fs = ensureSnippetLoaded();\n    return testNames.every(function (current) { return fs[current]; });\n};\nvar guard = function (name) { return function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    if (window._fs_dev_mode) {\n        var message = \"FullStory is in dev mode and is not capturing: \".concat(name, \" method not executed\");\n        console.warn(message);\n        return message;\n    }\n    var fs = getFullStory();\n    if (hasFullStoryWithFunction(name) && fs) {\n        return fs[name].apply(fs, args);\n    }\n    console.warn(\"FS.\".concat(name, \" not ready\"));\n    return null;\n}; };\nvar buildFullStoryShim = function () {\n    var FS = function (operation, options, source) {\n        var fs = ensureSnippetLoaded();\n        if (window._fs_dev_mode) {\n            var message = \"FullStory is in dev mode and is not capturing: \".concat(operation, \" not executed\");\n            console.warn(message);\n            return undefined;\n        }\n        return fs(operation, options, source);\n    };\n    FS.anonymize = guard('anonymize');\n    FS.consent = guard('consent');\n    FS.disableConsole = guard('disableConsole');\n    FS.enableConsole = guard('enableConsole');\n    FS.event = guard('event');\n    FS.getCurrentSessionURL = guard('getCurrentSessionURL');\n    FS.identify = guard('identify');\n    FS.log = guard('log');\n    FS.restart = guard('restart');\n    FS.setUserVars = guard('setUserVars');\n    FS.setVars = guard('setVars');\n    FS.shutdown = guard('shutdown');\n    return FS;\n};\nvar FullStory = buildFullStoryShim();\n\nexport { FullStory, init, isInitialized };\n","import { init } from \"@fullstory/browser\";\nimport React, { useEffect } from \"react\";\n\nexport interface FullstorySetupProps {\n  children?: React.ReactNode | undefined;\n}\n\nexport const FullstorySetup = ({ children }: FullstorySetupProps) => {\n  useEffect(() => {\n    init({\n      orgId: \"o-1VMFTK-na1\",\n      namespace: \"FS\",\n      recordCrossDomainIFrames: true,\n    });\n  }, []);\n  return <>{children}</>;\n};\n"],"names":["__assign"],"mappings":";;;AAmBA,IAAI,WAAW,WAAW;AACtB,aAAW,OAAO,UAAU,SAASA,UAAS,GAAG;AAC7C,aAAS,GAAG,IAAI,GAAG,IAAI,UAAU,QAAQ,IAAI,GAAG,KAAK;AACjD,UAAI,UAAU,CAAC;AACf,eAAS,KAAK,EAAG,KAAI,OAAO,UAAU,eAAe,KAAK,GAAG,CAAC,EAAG,GAAE,CAAC,IAAI,EAAE,CAAC;AAAA,IAC/E;AACA,WAAO;AAAA,EACX;AACA,SAAO,SAAS,MAAM,MAAM,SAAS;AACzC;AAEA,IAAI,eAAe,WAAY;AAC3B,MAAI,OAAO,eAAe;AACtB,WAAO,OAAO,OAAO,aAAa;AAAA,EACtC;AACA,SAAO;AACX;AAQA,IAAI,QAAQ,SAAU,cAAc,eAAe;AAE/C,MAAI,UAAU,SAAS,CAAA,GAAI,YAAY;AACvC,MAAI,aAAY,GAAI;AAChB,YAAQ,KAAK,yFAAyF;AACtG;AAAA,EACJ;AAEA,MAAI,QAAQ,0BAA0B;AAClC,WAAO,oBAAoB;AAAA,EAC/B;AACA,MAAI,QAAQ,SAAS;AACjB,WAAO,eAAe,QAAQ;AAAA,EAClC;AACA,MAAI,QAAQ,YAAY;AACpB,WAAO,mBAAmB,QAAQ;AAAA,EACtC;AACA,MAAI,QAAQ,sBAAsB;AAC9B,WAAO,yBAAyB;AAAA,EACpC;AAEA,MAAI,QAAQ,sBAAsB;AAC9B,WAAO,sBAAsB;AAAA,EACjC;AAEA,MAAI,QAAQ,cAAc;AACtB,WAAO,oBAAoB,QAAQ;AAAA,EACvC;AACA,MAAI,QAAQ,UAAU,MAAM;AACxB,QAAI,CAAC,QAAQ,QAAQ;AACjB,cAAQ,SAAS;AAAA,IACrB,OACK;AACD,cAAQ,KAAK,iDAAiD;AAAA,IAClE;AAAA,EACJ;AACA,SAAO,OAAO;AACd,MAAI,KAAK,aAAY;AACrB,MAAI,CAAC,IAAI;AACL,YAAQ,KAAK,iCAAiC;AAC9C;AAAA,EACJ;AACA,MAAI,eAAe;AACf,OAAG,WAAW,EAAE,MAAM,SAAS,UAAU,eAAe;AAAA,EAC5D;AACA,MAAI,QAAQ,YAAY,MAAM;AAC1B,QAAI,UAAU;AACd,OAAG,cAAc;AAAA,MACb,MAAM;AAAA,MACN,YAAY;AAAA,QACR;AAAA,MAChB;AAAA,IACA,CAAS;AACD,OAAG,UAAU;AACb,WAAO,eAAe;AACtB,YAAQ,KAAK,OAAO;AAAA,EACxB;AACJ;AACA,IAAI,WAAW,SAAU,SAAS;AAAE,SAAO,SAAU,cAAc,eAAe;AAC9E,QAAI,OAAO,iBAAiB;AAEpB,cAAQ,KAAK,OAAO;AACxB;AAAA,IACJ;AACA,UAAM,cAAc,aAAa;AACjC,WAAO,kBAAkB;AAAA,EAC7B;AAAG;AACH,IAAI,OAAO,SAAS,iFAAiF;ACvG9F,MAAM,iBAAiB,CAAC,EAAE,eAAoC;AACnE,YAAU,MAAM;AACd,SAAK;AAAA,MACH,OAAO;AAAA,MACP,WAAW;AAAA,MACX,0BAA0B;AAAA,IAAA,CAC3B;AAAA,EACH,GAAG,CAAA,CAAE;AACL,yCAAU,UAAS;AACrB;","x_google_ignoreList":[0]}