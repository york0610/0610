import { jsx, jsxs } from "react/jsx-runtime";
import { useState, useLayoutEffect } from "react";
import { cn } from "../classnames.js";
import { ClipboardButton } from "../ClipboardButton/ClipboardButton.js";
import { isSupportedLanguage, highlight } from "./highlight.js";
const Code = ({
  children,
  className,
  // eslint-disable-line react/prop-types
  copiable,
  ...otherProps
}) => /* @__PURE__ */ jsx("div", { className: cn("tw-overflow-x-auto"), children: /* @__PURE__ */ jsx(
  "code",
  {
    className: cn(
      "tw-flex",
      "tw-flex-col",
      // Required to make right padding apply when scrolling
      "tw-float-left",
      "tw-py-6",
      "tw-pl-4",
      // When the copy button is displayed, add some right padding to extend the scroll distance.
      // This makes content that would otherwise be rendered underneath the button readable.
      copiable ? "tw-pr-20" : "tw-pr-4",
      // Disable line wrapping on long lines (we want long lines to trigger scrolling)
      "tw-whitespace-pre",
      className
    ),
    ...otherProps,
    children
  }
) });
const Pre = ({
  // Ignore the style prop, which the highlighter uses to set the background color. (In order to
  // match the Netlify app's highlighter styling, we instead control the background color manually.)
  style: _style,
  // eslint-disable-line react/prop-types
  children,
  className,
  // eslint-disable-line react/prop-types
  copiable,
  copyValue,
  ...otherProps
}) => /* @__PURE__ */ jsxs(
  "pre",
  {
    className: cn("tw-bg-black", "tw-p-0", className),
    ...otherProps,
    "data-testid": "codeblock-highlighted",
    children: [
      children,
      copiable && /* @__PURE__ */ jsx(
        "div",
        {
          className: cn(
            "tw-absolute",
            // Vertically center the button and pin it to the top right corner
            "tw-top-8",
            "tw-right-8",
            "tw-height-100%",
            // Add a drop shadow around the button
            "tw-shadow-[8px_0_0_8px_theme('colors.black.DEFAULT'),_-8px_1px_12px_12px_theme('colors.black.DEFAULT')]",
            "dark:tw-shadow-[8px_0_0_8px_theme('colors.black.darker'),_-8px_1px_12px_12px_theme('colors.black.darker')]"
          ),
          children: /* @__PURE__ */ jsx(ClipboardButton, { value: copyValue })
        }
      )
    ]
  }
);
const CodeBlock = ({
  content,
  highlighting = true,
  copiable = false,
  language = "text"
}) => {
  const [nodes, setNodes] = useState(null);
  if (!isSupportedLanguage(language)) {
    language = "text";
  }
  useLayoutEffect(() => {
    if (highlighting) {
      void (async () => {
        setNodes(
          await highlight(content, {
            components: {
              code: ({ children, className, ...otherProps }) => /* @__PURE__ */ jsx(Code, { copiable, ...otherProps, children }),
              pre: ({ children, className, ...otherProps }) => /* @__PURE__ */ jsx(Pre, { copiable, copyValue: content, ...otherProps, children })
            },
            language,
            theme: "github-dark-default"
          })
        );
      })();
    }
  }, [content, highlighting, language, copiable]);
  return nodes ?? /* @__PURE__ */ jsx(Pre, { className: "tw-bg-black", copiable, copyValue: content, children: /* @__PURE__ */ jsx(Code, { className: "tw-text-white", copiable, children: content }) });
};
export {
  CodeBlock
};
//# sourceMappingURL=CodeBlock.js.map
