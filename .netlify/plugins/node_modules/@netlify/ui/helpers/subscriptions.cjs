"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const helpers_format = require("./format.cjs");
const siteAddons = [
  {
    feature: "form_submissions",
    title: "Forms",
    path: "forms",
    description: "Sites that use Forms to manage submissions",
    docsLink: "https://docs.netlify.com/forms/setup/"
  },
  {
    feature: "large_media",
    title: "Large Media",
    path: "large-media",
    description: "Sites that use Large Media to manage assets",
    docsLink: "https://docs.netlify.com/git/large-media/overview/"
  },
  {
    feature: "analytics",
    title: "Analytics",
    path: "metrics/analytics",
    description: "Sites that use Analytics to track visitor data",
    docsLink: "https://docs.netlify.com/monitor-sites/site-analytics/"
  },
  {
    feature: "identity",
    title: "Identity",
    path: "configuration/identity",
    description: "Sites that use Identity to manage users & access",
    docsLink: "https://docs.netlify.com/security/secure-access-to-sites/identity/"
  },
  {
    feature: "functions",
    title: "Functions",
    path: "configuration/functions",
    description: "Sites that use Functions to run serverless code",
    docsLink: "https://docs.netlify.com/functions/overview"
  }
];
const SUBSCRIPTIONS_ACCOUNT_USAGE = [
  "bandwidth",
  "build_minutes",
  "edge_functions"
];
const SUBSCRIPTIONS_ACCOUNT_ADDONS = [
  "concurrent_builds",
  "members",
  "active_git_contributors"
];
const SUBSCRIPTIONS_ACCOUNT_LEVEL = [
  ...SUBSCRIPTIONS_ACCOUNT_USAGE,
  ...SUBSCRIPTIONS_ACCOUNT_ADDONS
];
const SUBSCRIPTIONS_SITE_USAGE = ["form_submissions", "functions"];
const SUBSCRIPTIONS_SITE_ADDONS = [
  "identity",
  "analytics",
  "large_media"
];
const SUBSCRIPTIONS_SITE_LEVEL = [
  ...SUBSCRIPTIONS_SITE_USAGE,
  ...SUBSCRIPTIONS_SITE_ADDONS
];
const getSiteAddonsInfo = () => {
  return siteAddons;
};
const humanizeSubscriptionName = (subscriptionName) => subscriptionName.split("_").map(helpers_format.capitalize).join(" ");
const isSubscriptionUsageBased = (subscriptionName) => {
  if (!subscriptionName) return false;
  const usageBased = [
    ...SUBSCRIPTIONS_ACCOUNT_USAGE,
    ...SUBSCRIPTIONS_SITE_USAGE
  ];
  return usageBased.includes(subscriptionName);
};
const getSubscriptionSiteUsage = (subscriptions) => SUBSCRIPTIONS_SITE_LEVEL.map((type) => {
  var _a;
  return {
    type,
    sites: (((_a = subscriptions.find((sub) => sub.type === type)) == null ? void 0 : _a.sites) || []).length
  };
});
const transformOrbSubscriptions = ({
  base,
  domains,
  usage
}) => {
  const domainSubscriptions = domains.map(
    (domain) => ({
      id: domain.id,
      due_date: domain.due_date,
      amount: Number(domain.amount),
      domain: domain.invoice_items[0].title
    })
  );
  const accountSubscriptions = usage.filter(
    (accountUsage) => SUBSCRIPTIONS_ACCOUNT_LEVEL.includes(accountUsage.type)
  );
  const siteSubscriptions = usage.filter(
    (accountUsage) => SUBSCRIPTIONS_SITE_LEVEL.includes(accountUsage.type)
  );
  return {
    baseSubscription: base || null,
    accountSubscriptions,
    siteSubscriptions,
    domainSubscriptions
  };
};
const transformZuoraSubscriptions = (subscriptions) => {
  if (!subscriptions)
    return {
      baseSubscription: null,
      accountSubscriptions: [],
      domainSubscriptions: [],
      siteSubscriptions: []
    };
  const accountBaseSubscription = subscriptions.find(isZuoraSubscriptionBase);
  const baseSubscription = {
    id: accountBaseSubscription == null ? void 0 : accountBaseSubscription.id,
    amount: accountBaseSubscription == null ? void 0 : accountBaseSubscription.amount,
    start_date: accountBaseSubscription == null ? void 0 : accountBaseSubscription.start_date,
    end_date: accountBaseSubscription == null ? void 0 : accountBaseSubscription.end_date,
    title: accountBaseSubscription == null ? void 0 : accountBaseSubscription.title.replace(/ team plan/g, "")
  };
  const accountSubscriptions = subscriptions.filter(
    (sub) => isZuoraSubscriptionAccountUsage(sub) && isZuoraSubscriptionPaid(sub)
  ).map(
    (subscription) => ({
      quantity: subscription.quantity,
      amount: Number(subscription.amount),
      type: getZuoraSubscriptionAccountUsageType(subscription),
      included: 0
    })
  );
  const siteSubscriptions = subscriptions.filter((sub) => isZuoraSubscriptionSiteAddon(sub)).reduce(
    (siteAddonSubscriptions, subscription) => {
      const type = getZuoraSubscriptionSiteAddonType(subscription);
      if (!type) return siteAddonSubscriptions;
      const emptySubscription = {
        type,
        amount: 0,
        quantity: 0,
        sites: []
      };
      const existingSubscription = siteAddonSubscriptions.find((sub) => sub.type === type) || emptySubscription;
      const subscriptionAmount = Number(subscription.amount);
      if (!isNaN(subscriptionAmount)) {
        existingSubscription.amount += subscriptionAmount;
      }
      existingSubscription.quantity += 1;
      existingSubscription.sites.push({
        site_id: subscription.site_id || "",
        site_name: subscription.site_name,
        site_domain: subscription.site_domain
      });
      const newSiteSubscriptions = [
        ...siteAddonSubscriptions.filter((sub) => sub.type !== type),
        existingSubscription
      ];
      return newSiteSubscriptions;
    },
    []
  );
  const domainSubscriptions = subscriptions.filter(isZuoraSubscriptionDomain).map(
    (subscription) => ({
      id: subscription.id,
      due_date: subscription.start_date,
      amount: Number(subscription.amount),
      domain: subscription.domain_name
    })
  );
  return {
    baseSubscription,
    accountSubscriptions,
    siteSubscriptions,
    domainSubscriptions
  };
};
const getZuoraSubscriptionSiteAddonType = (subscription) => {
  if (isZuoraSubscriptionFormsAddon(subscription)) return "form_submissions";
  if (isZuoraSubscriptionFunctionsAddon(subscription)) return "functions";
  if (isZuoraSubscriptionAnalyticsAddon(subscription)) return "analytics";
  if (isZuoraSubscriptionIdentityAddon(subscription)) return "identity";
  if (isZuoraSubscriptionLargeMediaAddon(subscription)) return "large_media";
  return null;
};
const isZuoraSubscriptionSiteAddon = (subscription) => {
  return isZuoraSubscriptionFormsAddon(subscription) || isZuoraSubscriptionFunctionsAddon(subscription) || isZuoraSubscriptionAnalyticsAddon(subscription) || isZuoraSubscriptionIdentityAddon(subscription) || isZuoraSubscriptionLargeMediaAddon(subscription);
};
const isZuoraSubscriptionFormsAddon = (subscription) => subscription.product_name === "forms";
const isZuoraSubscriptionFunctionsAddon = (subscription) => subscription.product_name === "functions";
const isZuoraSubscriptionAnalyticsAddon = (subscription) => subscription.product_name === "analytics";
const isZuoraSubscriptionIdentityAddon = (subscription) => subscription.product_name === "identity";
const isZuoraSubscriptionLargeMediaAddon = (subscription) => subscription.product_name === "large_media";
const isZuoraSubscriptionAccountUsage = (subscription) => {
  return isZuoraSubscriptionExtraMembers(subscription) || isZuoraSubscriptionConcurrentBuilds(subscription) || isZuoraSubscriptionBuildMinutes(subscription) || isZuoraSubscriptionBandwidth(subscription) || isZuoraSubscriptionEdgeFunctions(subscription);
};
const getZuoraSubscriptionAccountUsageType = (subscription) => {
  if (isZuoraSubscriptionExtraMembers(subscription)) return "members";
  if (isZuoraSubscriptionConcurrentBuilds(subscription))
    return "concurrent_builds";
  if (isZuoraSubscriptionBuildMinutes(subscription)) return "build_minutes";
  if (isZuoraSubscriptionBandwidth(subscription)) return "bandwidth";
  if (isZuoraSubscriptionEdgeFunctions(subscription)) return "edge_functions";
  return null;
};
const isZuoraSubscriptionExtraMembers = (subscription) => subscription.product_name === "Extra team members";
const isZuoraSubscriptionConcurrentBuilds = (subscription) => subscription.product_name === "Concurrent Builds";
const isZuoraSubscriptionBuildMinutes = (subscription) => subscription.product_name === "build_minutes";
const isZuoraSubscriptionBandwidth = (subscription) => subscription.product_name === "bandwidth";
const isZuoraSubscriptionEdgeFunctions = (subscription) => subscription.product_name === "edge_functions";
const isZuoraSubscriptionDomain = (subscription) => !!(subscription && /domains/i.test(subscription == null ? void 0 : subscription.product_name));
const isZuoraSubscriptionBase = (subscription) => {
  if (!subscription) return false;
  return !isZuoraSubscriptionSiteAddon(subscription) && !isZuoraSubscriptionDomain(subscription) && !isZuoraSubscriptionConcurrentBuilds(subscription) && !isZuoraSubscriptionExtraMembers(subscription) && !isZuoraSubscriptionBuildMinutes(subscription) && !isZuoraSubscriptionBandwidth(subscription) && !isZuoraSubscriptionEdgeFunctions(subscription);
};
const isZuoraSubscriptionPaid = (subscription) => {
  if (!subscription) return false;
  const amount = Number(subscription.amount);
  return !isNaN(amount) && amount > 0;
};
exports.getSiteAddonsInfo = getSiteAddonsInfo;
exports.getSubscriptionSiteUsage = getSubscriptionSiteUsage;
exports.humanizeSubscriptionName = humanizeSubscriptionName;
exports.isSubscriptionUsageBased = isSubscriptionUsageBased;
exports.transformOrbSubscriptions = transformOrbSubscriptions;
exports.transformZuoraSubscriptions = transformZuoraSubscriptions;
//# sourceMappingURL=subscriptions.cjs.map
