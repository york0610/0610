import { DecorativeIconProps } from '../Icon/DecorativeIcon';
import { IconName } from '../Icon/types';
import * as React from 'react';
export declare enum BadgeState {
    Error = "error",
    Info = "info",
    Success = "success",
    Warning = "warning"
}
export declare enum BadgeVariant {
    Default = "default",
    Highlight = "highlight",
    Pop = "pop",
    Upgrade = "upgrade",
    Unlisted = "unlisted",
    Enhance = "enhance"
}
type BadgeBaseProps<T extends React.ElementType> = {
    iconName?: IconName;
    iconProps?: Omit<DecorativeIconProps, 'name'>;
    disabled?: boolean;
    lowercase?: boolean;
    as?: T;
    title?: string;
    href?: string;
    showCursor?: boolean;
    externalHref?: boolean;
    className?: string;
    outset?: string;
    children?: React.ReactNode;
};
interface BadgeWithStateProps<T extends React.ElementType> extends BadgeBaseProps<T> {
    state?: BadgeState;
    variant?: never;
}
interface BadgeWithVariantProps<T extends React.ElementType> extends BadgeBaseProps<T> {
    state?: never;
    variant?: BadgeVariant;
}
export type BadgeProps<T extends React.ElementType = 'span'> = (BadgeWithStateProps<T> | BadgeWithVariantProps<T>) & Omit<React.ComponentPropsWithoutRef<T>, keyof BadgeBaseProps<T>>;
export declare const Badge: React.ForwardRefExoticComponent<(Omit<BadgeWithStateProps<React.ElementType<any, keyof React.JSX.IntrinsicElements>> & Omit<Omit<any, "ref">, keyof BadgeBaseProps<T>>, "ref"> | Omit<BadgeWithVariantProps<React.ElementType<any, keyof React.JSX.IntrinsicElements>> & Omit<Omit<any, "ref">, keyof BadgeBaseProps<T>>, "ref">) & React.RefAttributes<unknown>>;
export {};
