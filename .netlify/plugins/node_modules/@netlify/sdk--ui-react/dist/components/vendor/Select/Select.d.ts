import { RefCallback } from 'react';
import { GroupBase, Props, PropsValue, SelectInstance } from 'react-select';
import { AsyncProps } from 'react-select/async';
import { CreatableProps } from 'react-select/creatable';

type SelectAsyncCreatableProps<Option, IsMulti extends boolean, Group extends GroupBase<Option>> = Props<Option, IsMulti, Group> & AsyncProps<Option, IsMulti, Group> & CreatableProps<Option, IsMulti, Group>;
export type SelectProps<Option, IsMulti extends boolean, Group extends GroupBase<Option>> = Omit<SelectAsyncCreatableProps<Option, IsMulti, Group>, "value" | "onChange"> & {
    value?: PropsValue<unknown>;
    creatable?: CreatableProps<Option, IsMulti, Group>;
    valueOnly?: boolean;
    outset?: string;
    hasSearchStyles?: boolean;
    maxLength?: number;
    onChange?: (e: {
        target: {
            name: string;
            value: unknown;
        };
    } | PropsValue<Option>) => void;
    inputProps?: React.HTMLProps<HTMLInputElement>;
    refCallback?: RefCallback<SelectInstance<Option, IsMulti, Group>>;
};
declare const Select: import('react').ForwardRefExoticComponent<Omit<any, "ref"> & import('react').RefAttributes<unknown>>;
export default Select;
//# sourceMappingURL=Select.d.ts.map