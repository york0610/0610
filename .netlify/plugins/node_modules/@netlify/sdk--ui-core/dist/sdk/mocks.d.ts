import fc from "fast-check";
import { type NetlifySDK } from "./sdk.js";
export declare const NetlifySDKContextArbitrary: fc.Arbitrary<{
    auth: {
        netlifyToken: string | null;
        providerToken: string | null;
        providerTokens: {
            externalId: string;
            token: string;
            connectionId: string;
        }[];
    };
    user: {
        id: string | null;
    };
    visualEditor: {
        webhookBaseURL: string | null;
        projectId: string | null;
        notifyVisualEditor: boolean | null;
    };
    projectId: string | null;
    configurationId: string | null;
    dataLayerId: string | null;
    siteId: string | null;
    teamId: string | null;
    accountId: string | null;
    theme: "light" | "dark";
    deployId: string | null;
}>;
export declare const NetlifySDKExtensionArbitrary: fc.Arbitrary<{
    id: string;
    name: string;
    slug: string;
}>;
export declare const NetlifySDKSurfaceArbitrary: fc.Arbitrary<{
    is: (value: string) => boolean;
    name: import("../surfaces.js").Surfaces | null;
}>;
export declare const NetlifySDKArbitrary: fc.Arbitrary<{
    listen: () => void;
    onChange: (callback: () => void) => () => void;
    beginProviderAuthFlow: (data?: import("../main.js").UIExtensionSurfaceConnectProviderEvent["data"]) => Promise<void>;
    disconnectProviderAuth: (data?: import("../main.js").UIExtensionSurfaceDisconnectProviderEvent["data"]) => Promise<void>;
    context: {
        auth: {
            netlifyToken: string | null;
            providerToken: string | null;
            providerTokens: {
                externalId: string;
                token: string;
                connectionId: string;
            }[];
        };
        user: {
            id: string | null;
        };
        configurationId: string | null;
        dataLayerId: string | null;
        projectId: string | null;
        siteId: string | null;
        teamId: string | null;
        accountId: string | null;
        theme: "light" | "dark";
        visualEditor: {
            webhookBaseURL: string | null;
            projectId: string | null;
            notifyVisualEditor: boolean | null;
        };
        deployId: string | null;
    };
    extension: {
        id: string;
        name: string;
        slug: string;
    };
    requestDimensions: (dimensions: {
        height: number;
        width: number;
    }) => void;
    surface: {
        is: (value: string) => boolean;
        name: import("../surfaces.js").Surfaces | null;
    };
    requestTermination: () => void;
}>;
export declare const createMockNetlifySDK: (overrides?: Partial<NetlifySDK>) => NetlifySDK;
//# sourceMappingURL=mocks.d.ts.map