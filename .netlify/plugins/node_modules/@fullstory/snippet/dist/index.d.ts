// Generated by dts-bundle-generator v8.0.0

export type PublicVarScope = "document" | "page" | "user";
export type PublicLogLevel = "log" | "warn" | "error" | "debug";
export type V1OperationOption = boolean | {
	[key: string]: any;
};
/** API functions that are available as soon as the snippet has executed. */
export interface V1PublicApi {
	/**
	 * @deprecated use FS('setIdentity', { consent }) instead: https://developer.fullstory.com/browser/v2/auto-capture/user-consent/
	 */
	consent(userConsents?: boolean): void;
	/**
	 * @deprecated use FS('trackEvent') instead: https://developer.fullstory.com/browser/v2/capture-events/analytics-events/
	 */
	event(eventName: string, eventProperties: V1OperationOption, source?: string): void;
	/**
	 * @deprecated use FS('setIdentity') instead: https://developer.fullstory.com/browser/v2/identification/identify-users/
	 */
	identify(uid: string | undefined | null | boolean, customVars?: V1OperationOption, source?: string): void;
	/**
	 * @deprecated use FS('setIdentity', { anonymous }) instead: https://developer.fullstory.com/browser/v2/identification/anonymize-users/
	 */
	anonymize(): void;
	/**
	 * @deprecated use FS('log') instead: https://developer.fullstory.com/browser/v2/auto-capture/logging/
	 */
	log(level: PublicLogLevel, ...msg: any[]): void;
	/**
	 * @deprecated use FS('log') instead: https://developer.fullstory.com/browser/v2/auto-capture/logging/
	 */
	log(...msg: any[]): void;
	/**
	 * @deprecated use FS('restart') instead: https://developer.fullstory.com/browser/v2/auto-capture/capture-data/#restart-data-capture
	 */
	restart(): void;
	/**
	 * @deprecated use FS('shutdown') instead: https://developer.fullstory.com/browser/v2/auto-capture/capture-data/#stop-data-capture
	 */
	shutdown(): void;
	/**
	 * @deprecated use FS('setProperties', { type: 'user' }) instead: https://developer.fullstory.com/browser/v2/identification/set-user-properties/
	 */
	setUserVars(customVars: V1OperationOption, source?: string): void;
	/**
	 * @deprecated use FS('setProperties') instead: https://developer.fullstory.com/browser/v2/set-page-properties/
	 */
	setVars(varScope: PublicVarScope, properties?: V1OperationOption, source?: string): void;
}
/** API functions that are available after /rec/page returns. */
export interface V1DeferredPublicApi {
	/**
	 * @deprecated use FS('setConfig', { console: false }) instead
	 */
	disableConsole?: () => void;
	/**
	 * @deprecated use FS('setConfig', { console: true }) instead
	 */
	enableConsole?: () => void;
	/**
	 * @deprecated use FS('getSession', { format: 'id' }) instead: https://developer.fullstory.com/browser/v2/get-session-details/
	 */
	getCurrentSession?: () => string | null;
	/**
	 * @deprecated use FS('getSession') instead: https://developer.fullstory.com/browser/v2/get-session-details/
	 */
	getCurrentSessionURL?: (now?: boolean) => string | null;
}
export interface ApiV1 extends V1PublicApi, V1DeferredPublicApi {
}
declare namespace ObserveEventName {
	const START = "start";
	const SHUTDOWN = "shutdown";
	const INTERNAL_BUNDLE = "internal/bundle";
	const INTERNAL_ERROR = "internal/error";
	const INTERNAL_FS_INIT = "internal/fs-init";
}
export type ObserveEventRegisterCallback = {
	disconnect: () => void;
};
export type ObserveEventType = (typeof ObserveEventName)[keyof typeof ObserveEventName];
export type ObserveEventCallbacks<T extends ObserveEventType> = (op: ObserveCallbackParams[T]) => void;
export type ObserveEventOptions<T extends ObserveEventType = ObserveEventType> = {
	type: T;
	callback: ObserveEventCallbacks<T>;
};
export type ObserveCallbackParams = {
	[ObserveEventName.START]: {
		sessionUrl: string;
		settings: Readonly<object>;
	};
	[ObserveEventName.SHUTDOWN]: {
		reason: number;
	};
	[ObserveEventName.INTERNAL_BUNDLE]: {
		clientTime: number;
		lastActivity?: number | null;
		orgId: string;
		pageId: string;
		pageStart?: number | null;
		prevBundleTime?: number | null;
		recHost: string;
		response: unknown;
		seq: number;
		sessionId: string;
		size: number;
		userId: string;
	};
	[ObserveEventName.INTERNAL_ERROR]: {
		message: string;
	};
	[ObserveEventName.INTERNAL_FS_INIT]: {};
};
declare namespace V2OperationName {
	const TrackEvent = "trackEvent";
	const GetSession = "getSession";
	const Init = "init";
	const Log = "log";
	const Source = "source";
	const Observe = "observe";
	const Restart = "restart";
	const SetIdentity = "setIdentity";
	const SetConfig = "setConfig";
	const SetPage = "setPage";
	const SetProperties = "setProperties";
	const Shutdown = "shutdown";
	const Start = "start";
	const Stat = "stat";
}
export type GetSessionFormat = "url" | "id" | "url.now";
/** Public Api definition of an AttributeBlockeEntry, used directly by our customers */
export type AttributeBlockEntryForApi = {
	target: "any" | "exclude" | "mask";
	tag: string;
	name?: string;
	action: "erase" | "maskText" | "scrubUrl" | "scrubCss";
	type?: "static" | "prefix";
};
export type V2Operation = (typeof V2OperationName)[keyof typeof V2OperationName];
export type CaptureSource = {
	integration?: string;
	userInitiated?: boolean;
};
export type V2OperationOptions = {
	[V2OperationName.TrackEvent]: {
		name: string;
		properties: object;
		schema?: object;
	};
	[V2OperationName.GetSession]: {
		format: GetSessionFormat;
	};
	[V2OperationName.Init]: {
		privacy?: {
			attributeBlocklist?: AttributeBlockEntryForApi[];
		};
	};
	[V2OperationName.Log]: {
		level?: PublicLogLevel;
		msg: any;
	};
	[V2OperationName.Source]: {
		source: CaptureSource;
	};
	[V2OperationName.Observe]: ObserveEventOptions<"start"> | ObserveEventOptions<"shutdown"> | ObserveEventOptions<"internal/bundle"> | ObserveEventOptions<"internal/error"> | ObserveEventOptions<"internal/fs-init">;
	[V2OperationName.Restart]: void;
	[V2OperationName.SetIdentity]: {
		anonymous?: boolean;
		consent?: boolean;
		uid?: string | false;
		properties?: object;
		schema?: object;
	} | string | boolean | null | undefined;
	[V2OperationName.SetConfig]: {
		console: boolean;
	};
	[V2OperationName.SetPage]: object;
	[V2OperationName.SetProperties]: {
		type: PublicVarScope;
		properties: object;
		schema?: object;
	};
	[V2OperationName.Shutdown]: void;
	[V2OperationName.Stat]: {
		event_type: string;
		properties: {
			[key: string]: unknown;
		};
	};
	[V2OperationName.Start]: void;
};
export type V2OperationReturnTypes = {
	[V2OperationName.TrackEvent]: void;
	[V2OperationName.GetSession]: string | null | undefined;
	[V2OperationName.Init]: void;
	[V2OperationName.Log]: void;
	[V2OperationName.Source]: void;
	[V2OperationName.Observe]: ObserveEventRegisterCallback | null | undefined;
	[V2OperationName.Restart]: void;
	[V2OperationName.SetIdentity]: void;
	[V2OperationName.SetConfig]: void;
	[V2OperationName.SetPage]: void;
	[V2OperationName.SetProperties]: void;
	[V2OperationName.Shutdown]: void;
	[V2OperationName.Stat]: void;
	[V2OperationName.Start]: void;
};
export type V2OperationAsyncReturnTypes = V2OperationReturnTypes & {
	[V2OperationName.GetSession]: string;
	[V2OperationName.Observe]: ObserveEventRegisterCallback;
};
export interface ApiV2 extends ApiV1 {
	<Op extends V2Operation = V2Operation>(operation: `${Op}Async`, options?: V2OperationOptions[Op], source?: string): Promise<V2OperationAsyncReturnTypes[Op]>;
	<Op extends V2Operation = V2Operation>(operation: Op, options?: V2OperationOptions[Op], source?: string): V2OperationReturnTypes[Op];
}
export type FSApi = ApiV2;
export type FSApiV1 = ApiV1;
export type InitFSArgs = {
	orgId: string;
	namespace?: string;
	host?: string;
	script?: string;
};
export declare const initFS: ({ orgId, namespace, host, script }: InitFSArgs) => void;
export declare const initFSV1: ({ orgId, namespace, host, script }: InitFSArgs) => void;
export declare const SnippetSrc: string;
export declare const SnippetSrcDelayed: string;
export declare const SnippetSrcV1: string;
export declare const generateSnippetText: ({ orgId, namespace, host, script }: InitFSArgs) => string;
export declare const generateSnippetTextV1: ({ orgId, namespace, host, script }: InitFSArgs) => string;
export declare const mockSnippetSrc: string;
export declare const mockSnippetSrcV1: string;

export {};
