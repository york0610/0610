/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
export interface paths {
    "/api/v1/access_tokens/revoke": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** @description Revokes the token that the client is currently using to access to the
         *     API. */
        delete: operations["revokeAccessToken"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/accounts/{account_id}/builds/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getAccountBuildStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/{account_id}/members": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns a list of members for the account (team). */
        get: operations["listMembersForAccount"];
        put?: never;
        /** @description Creates a new member for the account (team). */
        post: operations["addMemberToAccount"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/{account_slug}/sites": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns a list of sites for an account (team). */
        get: operations["listSitesForAccount"];
        put?: never;
        /** @description Creates a site for an account (team). */
        post: operations["createSiteInTeam"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/accounts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns a list of accounts for the current user.
         *     The accounts list excludes accounts that only allow SSO if the current
         *     user is not logged in with SSO. If the user is logged in with SSO, all
         *     accounts are listed. */
        get: operations["listAccountsForUser"];
        put?: never;
        /** @description Creates an account (team). */
        post: operations["createAccount"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/accounts/{account_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns the details of an account (team). */
        get: operations["getAccount"];
        /** @description Updates an account (team). */
        put: operations["updateAccount"];
        post?: never;
        /** @description Cancels an account (team). */
        delete: operations["cancelAccount"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/accounts/{account_id}/audit": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Return an account's audit logs. */
        get: operations["listAccountAuditEvents"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sites/{site_id}/analytics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Enables Analytics for the site. */
        post: operations["enableAnalytics"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sites/{site_id}/analytics/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** @description Disables Analytics for the site. */
        delete: operations["disableAnalytics"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sites/{site_id}/assets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns a list of assets for the site.
         *     _This endpoint is only available to certain sites._ */
        get: operations["listSiteAssets"];
        put?: never;
        /** @description Creates an asset for the site.
         *     _This endpoint is only available to certain sites._ */
        post: operations["createSiteAsset"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sites/{site_id}/assets/{asset_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns an asset for the site.
         *     _This endpoint is only available to certain sites._ */
        get: operations["getSiteAssetInfo"];
        /** @description Updates a state of the asset.
         *     _This endpoint is only available to certain sites._ */
        put: operations["updateSiteAsset"];
        post?: never;
        /** @description Deletes an asset.
         *     _This endpoint is only available to certain sites._ */
        delete: operations["deleteSiteAsset"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sites/{site_id}/assets/{asset_id}/public_signature": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns a URL of the asset. If the asset isn't publicly visible, returns
         *     the signed URL of the asset.
         *     _This endpoint is only available to certain sites._ */
        get: operations["getSiteAssetPublicSignature"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/billing/payment_methods": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns available payment methods for the current user. Returns list
         *     of payment methods for the account if account_id is provided. */
        get: operations["listPaymentMethodsForUser"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sites/{site_id}/build_hooks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns a list of build hooks for a site. */
        get: operations["listSiteBuildHooks"];
        put?: never;
        /** @description Creates a build hook for a site. */
        post: operations["createSiteBuildHook"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sites/{site_id}/build_hooks/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns a build hook for a site. */
        get: operations["getSiteBuildHook"];
        /** @description Updates a build hook for a site. */
        put: operations["updateSiteBuildHook"];
        post?: never;
        /** @description Deletes a build hook for a site. */
        delete: operations["deleteSiteBuildHook"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/builds/{build_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getSiteBuild"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sites/{site_id}/builds": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["listSiteBuilds"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sites/{site_id}/builds": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Runs a build for a site. The build will be scheduled to run at the first opportunity, but it might not start immediately if insufficient account build capacity is available.
         *     Files for build could be also uploaded as a zipped site. */
        post: operations["createSiteBuild"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/builds/{build_id}/log": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Add a message to the build log. */
        post: operations["updateSiteBuildLog"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/builds/{build_id}/start": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Mark that the build has started. */
        post: operations["notifyBuildStart"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/deploy_keys": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns a list of deploy keys. */
        get: operations["listDeployKeys"];
        put?: never;
        /** @description Creates a deploy key for the current user. */
        post: operations["createDeployKey"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/deploy_keys/{key_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns a deploy key. */
        get: operations["getDeployKey"];
        put?: never;
        post?: never;
        /** @description Deletes a deploy key. */
        delete: operations["deleteDeployKey"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sites/{site_id}/deploys": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Lists the deploys of a site. */
        get: operations["listSiteDeploys"];
        put?: never;
        /** @description Creates a deploy for a site. */
        post: operations["createSiteDeploy"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/deploys/{deploy_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns details about a deploy. */
        get: operations["getDeploy"];
        put?: never;
        post?: never;
        /** @description Marks a deploy for deletion. */
        delete: operations["deleteDeploy"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sites/{site_id}/deploys/{deploy_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns details about a deploy. */
        get: operations["getSiteDeploy"];
        /** @description Updates a deploy for a site. */
        put: operations["updateSiteDeploy"];
        post?: never;
        /** @description Marks a deploy for deletion. */
        delete: operations["deleteSiteDeploy"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sites/{site_id}/deploys/{deploy_id}/restore": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Deploys a different version of a site. */
        post: operations["restoreSiteDeploy"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/deploys/{deploy_id}/lock": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Locks a specific deploy (subsequent deploys will be built but not published). */
        post: operations["lockDeploy"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/deploys/{deploy_id}/unlock": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Unlocks a specific deploy. */
        post: operations["unlockDeploy"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/deploys/{deploy_id}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Cancels a deploy. */
        post: operations["cancelSiteDeploy"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/deploys/{deploy_id}/simple": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns public information about a deploy. */
        get: operations["getSimplePublicDeploy"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sites/{site_id}/dev_server_hooks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns a list of dev server hooks for a site. */
        get: operations["listSiteDevServerHooks"];
        put?: never;
        /** @description Creates a dev server hook for a site. */
        post: operations["createSiteDevServerHook"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sites/{site_id}/dev_server_hooks/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns a dev server hook for a site. */
        get: operations["getSiteDevServerHook"];
        /** @description Updates a dev server hook for a site. */
        put: operations["updateSiteDevServerHook"];
        post?: never;
        /** @description Deletes a dev server hook for a site. */
        delete: operations["deleteSiteDevServerHook"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/dns_zones/{zone_id}/dns_records": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns a list of DNS records. */
        get: operations["getDnsRecords"];
        put?: never;
        /** @description Creates a DNS record. */
        post: operations["createDnsRecord"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/dns_zones/{zone_id}/dns_records/{dns_record_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns a DNS record. */
        get: operations["getIndividualDnsRecord"];
        put?: never;
        post?: never;
        /** @description Deletes a DNS record. */
        delete: operations["deleteDnsRecord"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/dns_zones": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns a list of DNS zones. If the `account_slug` is passed, returns
         *     the list for the account. Otherwise, returns the list for all DNS zones
         *     that the current user has access to. */
        get: operations["getDnsZones"];
        put?: never;
        /** @description Creates a DNS zone. */
        post: operations["createDnsZone"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/dns_zones/{zone_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns a DNS zone. */
        get: operations["getDnsZone"];
        put?: never;
        post?: never;
        /** @description Deletes a DNS zone. */
        delete: operations["deleteDnsZone"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/dns_zones/{zone_id}/enable-ipv6": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Enables IPv6 with a DNS zone. */
        put: operations["enableDnsZoneIpv6"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/dns_zones/{zone_id}/transfer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Transfers a DNS zone to the different account. */
        put: operations["transferDnsZone"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sites/{site_id}/dns": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns a list of the DNS configuration for a site. */
        get: operations["getDNSForSite"];
        /** @description Configures all automatic DNS entries for a site. Based on the custom
         *     domain and domain aliases, create DNS zones and/or records if they
         *     don't exist already.
         *     This configuration usually runs automatically when the custom domain or
         *     domain aliases are modified. */
        put: operations["configureDNSForSite"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/accounts/{account_id}/env": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns all environment variables for an account or site. An account corresponds to a team in the Netlify UI. */
        get: operations["getEnvVars"];
        put?: never;
        /** @description Creates new environment variables. Granular scopes are available on Pro plans and above. */
        post: operations["createEnvVars"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sites/{site_id}/env": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns all environment variables for a site. */
        get: operations["getSiteEnvVars"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/accounts/{account_id}/env/{env_key}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns an individual environment variable. */
        get: operations["getEnvVar"];
        /** @description Updates an existing environment variable and all of its values. Existing values will be replaced by values provided. */
        put: operations["updateEnvVar"];
        post?: never;
        /** @description Deletes an environment variable. */
        delete: operations["deleteEnvVar"];
        options?: never;
        head?: never;
        /** @description (SET) Updates or creates a value on an environment variable. */
        patch: operations["setEnvVarValue"];
        trace?: never;
    };
    "/api/v1/accounts/{account_id}/env/{env_key}/value/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** @description Deletes a specific environment variable value. */
        delete: operations["deleteEnvVarValue"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sites/{site_id}/files": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns a list of files for a site. */
        get: operations["listSiteFiles"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sites/{site_id}/files/{file_path}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns a file for a site by a path name. */
        get: operations["getSiteFileByPathName"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sites/{site_id}/forms": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns a list of forms for the site. */
        get: operations["listSiteForms"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sites/{site_id}/forms/{form_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns the details of a form. */
        get: operations["getSiteForm"];
        put?: never;
        post?: never;
        /** @description Deletes a form and all its submissions. */
        delete: operations["deleteSiteForm"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/deploys/{deploy_id}/functions/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Uploads a function of the deploy. */
        put: operations["uploadDeployFunction"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/hooks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns a list of outgoing hooks of site. You can pass form_id or
         *     event to filter the result. */
        get: operations["listHooksBySiteId"];
        put?: never;
        /** @description Creates a new outgoing hook. */
        post: operations["createHookBySiteId"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/hooks/{hook_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns an outgoing hook. */
        get: operations["getHook"];
        /** @description Updates an outgoing hook. */
        put: operations["updateHook"];
        post?: never;
        /** @description Deletes an outgoing hook. */
        delete: operations["deleteHook"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/hooks/types": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns a list of hook types that are available.
         *
         *     Returns only a list of available hook types to the site if the `site_id`.
         *     is given. */
        get: operations["listHookTypes"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/hooks/{hook_id}/enable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Enables an outgoing hook that was disabled due to the error count. */
        post: operations["enableHook"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sites/{site_id}/metadata": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns metadata for a site. */
        get: operations["getSiteMetadata"];
        /** @description Updates metadata for a site. */
        put: operations["updateSiteMetadata"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/oauth/tickets/{ticket_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns an OAuth ticket by ID. */
        get: operations["showTicket"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/oauth/tickets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Creates an OAuth ticket with the OAuth application. */
        post: operations["createTicket"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/oauth/tickets/{ticket_id}/authorize": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Authorizes a current user with the OAuth ticket. */
        post: operations["authorizeWithTicket"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/oauth/tickets/{ticket_id}/exchange": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Exchanges an OAuth ticket to an OAuth token. */
        post: operations["exchangeTicket"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/organizations/{organization_id}/receipts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns all receipts for an organization. */
        get: operations["getOrganizationReceipts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/organizations/{organization_id}/receipts/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns a specific receipt for an organization. */
        get: operations["getOrganizationReceipt"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/organizations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns a list of all organizations that the current user is an owner of. */
        get: operations["listOrganizationsForUser"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/organizations/:id": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns an organization. */
        get: operations["getOrganization"];
        /** @description Updates an organization. */
        put: operations["updateOrganization"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/organizations/{id}/logo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Uploads an organization logo as multipart/form-data. Maximum file size is 1 MB. Accepts JPEG, PNG, GIF image formats. */
        post: operations["createOrganizationLogo"];
        /** @description Removes an organizations logo. */
        delete: operations["deleteOrganizationLogo"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/organizations/{id}/accounts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get all accounts associated to an organization. */
        get: operations["getOrganizationAccounts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/organizations/{id}/invoices": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Lists all the invoices for an organization. */
        get: operations["getOrganizationInvoices"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/organizations/{id}/invoices/{invoice_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns the invoice PDF for an organization. */
        get: operations["getOrganizationInvoice"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/organizations/{id}/client_token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns a client token for an organization to use with credit card payments. */
        get: operations["getOrganizationClientToken"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/organizations/{id}/payments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Sets the payment method for an organization. */
        post: operations["createOrganizationPayment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sites/{site_id}/services/{addon}/instances": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["createServiceInstance"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sites/{site_id}/services/{addon}/instances/{instance_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["showServiceInstance"];
        put: operations["updateServiceInstance"];
        post?: never;
        delete: operations["deleteServiceInstance"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sites/{site_id}/service-instances": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["listServiceInstancesForSite"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/services": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getServices"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/service/{addonName}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["showService"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/service/{addonName}/manifest": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["showServiceManifest"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sites": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Lists available sites. */
        get: operations["listSites"];
        put?: never;
        /** @description Creates a site. */
        post: operations["createSite"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sites/{site_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns the details of a site. */
        get: operations["getSite"];
        put?: never;
        post?: never;
        /** @description Deletes a site. */
        delete: operations["deleteSite"];
        options?: never;
        head?: never;
        /** @description Updates a site. */
        patch: operations["updateSite"];
        trace?: never;
    };
    "/api/v1/sites/{site_id}/deployed-branches": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns the deployed branches for a site. */
        get: operations["listSiteDeployedBranches"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sites/{site_id}/rollback": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Rolls back the production deploy for this site
         *     to the latest known based on the `rollback_id` attribute in the deploy.
         *     It does nothing if the rollback_id in the current production deploy is
         *     empty. */
        put: operations["rollbackSiteDeploy"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sites/{id}/unlink_repo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Unlinks the repo from the site.
         *     This will:
         *     * Delete associated deploy keys
         *     * Delete outgoing webhooks for the repo
         *     * Delete the site's build hooks
         *     * Delete associated visual editing project */
        put: operations["unlinkSiteRepo"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sites/{site_id}/simple": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns public information about a site. */
        get: operations["getSimplePublicSite"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sites/{site_id}/snippets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns a list of snippets for a site. */
        get: operations["listSiteSnippets"];
        put?: never;
        /** @description Creates a snippet for a site. */
        post: operations["createSiteSnippet"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sites/{site_id}/snippets/{snippet_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns a snippet. */
        get: operations["getSiteSnippet"];
        /** @description Creates a snippet for a site. */
        put: operations["updateSiteSnippet"];
        post?: never;
        /** @description Deletes a snippet. */
        delete: operations["deleteSiteSnippet"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sites/{site_id}/ssl": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns a TLS certificate of the site. */
        get: operations["showSiteTLSCertificate"];
        put?: never;
        /** @description Creates a certificate with the site. If the certificate param is passed,
         *     create a custom certificate with it. Otherwise, initiate the Let's
         *     Encrypt certificate provisioning.
         *     If there is already associated certificate with the site, update it. */
        post: operations["provisionSiteTLSCertificate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sites/{site_id}/ssl/certificates": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns details about certificates associated with a domain. The site must be using the domain. */
        get: operations["getAllCertificates"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/form/{form_id}/submissions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["listFormSubmissions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sites/{site_id}/submissions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["listSiteSubmissions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/submissions/{submission_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["listFormSubmission"];
        put?: never;
        post?: never;
        delete: operations["deleteSubmission"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sites/{site_id}/traffic_splits": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getSplitTests"];
        put?: never;
        post: operations["createSplitTest"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sites/{site_id}/traffic_splits/{split_test_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getSplitTest"];
        put: operations["updateSplitTest"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sites/{site_id}/traffic_splits/{split_test_id}/unpublish": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["disableSplitTest"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sites/{site_id}/traffic_splits/{split_test_id}/publish": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["enableSplitTest"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns the details of the current user. */
        get: operations["getCurrentUser"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/organizations/{organization_id}/workos_scim": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns the details of an existing directory. */
        get: operations["getDirectory"];
        put?: never;
        post?: never;
        /** @description Deletes the WorkOS directory */
        delete: operations["deleteDirectory"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/organizations/{organization_id}/workos_scim/delete_directory_sync": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** @description Deletes the WorkOS directory keeping users in their teams. */
        delete: operations["deleteDirectorySync"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description AccountBuild model definition */
        AccountBuild: {
            /** @description the identifier for the build */
            id: string;
            sha: string;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            started_at: string;
            state: string;
            error: string;
            error_message: string;
            done: boolean;
            /** @description included if the build is prioritized */
            priority: {
                /** Format: date-time */
                prioritized_at?: string;
                prioritized_by?: string;
            };
            site_id: string;
            subdomain: string;
            custom_domain: string;
            deploy_id: string;
            context: string;
            branch: string;
            commit_ref: string;
            commit_url: string;
            committer: string;
            title: string;
            review_id: string;
            review_url: string;
            /** Format: date-time */
            deploy_time: string;
            deploy_state: string;
            deploy_pending_review_reason: string;
            deploy_ssl_url: string;
        };
        /** @description AccountCompliance definition */
        AccountCompliance: {
            private_corp_repos: {
                in_compliance?: boolean;
            };
            max_members: {
                in_compliance?: boolean;
                count?: number;
                in_negotiation?: boolean;
                continuous_deployment_disabled?: boolean;
            };
        };
        /** @description AccountFirewallConfig model definition */
        AccountFirewallConfig: {
            id: string;
            unpublished: components["schemas"]["FirewallRuleSet"];
            published: components["schemas"]["FirewallRuleSet"];
            site_overrides: Record<string, never>[];
            /**
             * Format: date-time
             * @description When the deployed branch was created
             */
            created_at: string;
            /**
             * Format: date-time
             * @description When the deployed branch was updated
             */
            updated_at: string;
        };
        CreateAccountFirewallConfig: {
            unpublished?: components["schemas"]["FirewallRuleSet"];
            published?: components["schemas"]["FirewallRuleSet"];
        };
        AccountMemberRole: Record<string, never>;
        /** @description AccountType model definition */
        AccountType: {
            id: string;
            name: string;
            slug: string;
            description: string;
            capabilities: Record<string, never>;
            /** @description when requested for an account indicates it's available for the account subscribe to, without an account, indicates if it's available for the user to use for a new team */
            available: boolean;
            monthly_dollar_price: string;
            monthly_seats_addon_dollar_price: string;
            monthly_concurrent_builds_addon_dollar_price: string;
            skip_payment?: boolean;
        };
        /** @description Account model definition */
        Account: {
            billing_details: string;
            billing_email: string;
            billing_name: string;
            billing_period: string;
            capabilities: Record<string, never>;
            /** Format: date-time */
            created_at: string;
            id: string;
            member_roles: components["schemas"]["AccountMemberRole"][];
            name: string;
            owner_ids: string[];
            payment_method_id: string;
            role: string;
            roles_allowed: string[];
            slug: string;
            type_id: string;
            type_name: string;
            type_slug: string;
            /** Format: date-time */
            updated_at: string;
            vat: string;
            support_administration_enabled: boolean;
            deploy_diagnostics_setting: string;
        };
        AccountUpdateParams: {
            name?: string;
            slug?: string;
            type_id?: string;
            payment_method_id?: string;
            /** @enum {string} */
            period?: "monthly" | "yearly";
            billing_name?: string;
            billing_email?: string;
            billing_details?: string;
            free_trial?: boolean;
            enforce_mfa?: boolean;
        };
        /** @description AdminSite model definition. Obfuscates private fields */
        AdminSite: components["schemas"]["Site"] & {
            site_build_timelimit: number;
            site_build_pre_process_timeout: number;
            site_functions_config: Record<string, never>;
            edge_functions_manifest?: Record<string, never>;
        };
        /** @description Administrator model definition */
        Administrator: {
            /** @description The URL for the avatar */
            avatar_url: string;
            /** @description The administrator email */
            email: string;
            /** @description The administrator name */
            full_name: string;
            /** @description The identifier for the administrator record */
            id: string;
            /**
             * Format: date-time
             * @description When this user last logged in
             */
            last_login: string;
            /** @description Whether the user has two-factor authentication enabled or not */
            mfa_enabled: boolean;
            /** @description The role of the administrator */
            role: string;
            /** @description A space-separated list of scopes given based on the role */
            scopes: string;
            /** @description The identifier for the user */
            user_id: string;
        };
        /** @description Asset model definition */
        Asset: {
            id: string;
            site_id: string;
            account_id: string;
            name: string;
            size: number;
            content_type: string;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
            state: string;
            key: string;
            url: string;
            visibility: string;
            uploaded_url: string;
        };
        AssetCreateParams: {
            account_id?: string;
            key?: string;
            name?: string;
            uploaded_url?: string;
            size?: number;
            content_type?: string;
            visibility?: string;
        };
        AssetCreateResult: {
            form?: components["schemas"]["AssetCreateForm"];
            asset?: components["schemas"]["Asset"];
        };
        AssetCreateForm: {
            url?: string;
            fields?: {
                property1?: string;
                property2?: string;
            };
        };
        /** @description AuditLog model definition */
        AuditLog: {
            id: string;
            account_id: string;
            payload: Record<string, never>;
        };
        BandwidthUsage: {
            used: number;
            included: number;
            additional: number;
            /** Format: date-time */
            last_updated_at: string;
            /** Format: date-time */
            period_start_date: string;
            /** Format: date-time */
            period_end_date: string;
        };
        /** @description ZuoraInvoiceItem model definition */
        Billing_ZuoraInvoiceItem: {
            /** @description The Zuora id of the invoice item */
            id: string;
            /** @description The title of the Zuora invoice item */
            title: string;
            /** @description The amount of the Zuora invoice item */
            amount: number;
            /** @description The formatted amount with currency */
            display_amount: string;
            /** @description The quantity of the Zuora invoice item */
            quantity: number;
            /**
             * Format: date
             * @description The start date of the Zuora invoice item
             */
            start_date: string;
            /**
             * Format: date
             * @description The end date of the Zuora invoice item
             */
            end_date: string;
            /** @description The start date of the Zuora invoice item */
            service_start_date: string;
            /** @description The end date of the Zuora invoice item */
            service_end_date: string;
            /** @description The Netlify site ID in which this invoice belongs to */
            site_id: number;
            /** @description The domain name of the site connected to this Zuora invoice item */
            domain_name: string;
            /** @description The formatted domain expiration date */
            expires_at: string;
            /** @description The site name of site connected to this Zuora invoice item */
            site_name: string;
            /** @description The site domain of the site connected to this Zuora invoice item */
            site_domain: string;
            /** @description If this Zuora invoice item is recurring */
            recurring: boolean;
            /** @description The tax amount on the Zuora invoice */
            tax_amount: number;
        };
        /** @description ZuoraInvoice model definition */
        Billing_ZuoraInvoice: {
            /** @description The Zuora ID of the invoice */
            id: string;
            /** @description The Zuora invoice number */
            invoice_number: string;
            /**
             * Format: date
             * @description The Zuora invoice date
             */
            invoice_date: string;
            /**
             * Format: date
             * @description The Zuora due_date
             */
            due_date: string;
            /** @description The remaining balance in Zuora */
            balance: number;
            /** @description The amount due in Zuora */
            amount: number;
            /** @description The payment amount on the Zuora invoice */
            payment_amount: number;
            /** @description The refund amount on the Zuora invoice */
            refund_amount: number;
            /** @description The credit balance adjustment amount */
            credit_balance_adjustment_amount: number;
            /** @description The tax amount on the Zuora Invoice */
            tax_amount: number;
            /** @description Zuora invoice items */
            invoice_items: components["schemas"]["Billing_ZuoraInvoiceItem"][];
        };
        BitbucketSelfHostedConfig: {
            /** @description the url for the bitbucket instance */
            instance_url?: string;
            /** @description the clone url for the bitbucket instance */
            clone_url?: string;
            /** @description the client id of the bitbucket application */
            client_id?: string;
            /** @description the client secret of the bitbucket application */
            client_secret?: string;
        };
        /** @description BuildBotAccount model definition */
        BuildBotAccount: {
            /** @description The ID of the account */
            id: string;
            /** @description The name of the account */
            name: string;
            /** @description The URL of the team logo */
            team_logo_url: string;
        };
        BuildHook: {
            /** @description The ID of the build hook */
            id: string;
            /** @description The site ID of the build hook */
            site_id: string;
            /** @description The title of the build hook */
            title: string;
            /** @description The branch of the build hook */
            branch: string;
            /** @description The URL of the build hook */
            url: string;
            /** @description If this build hook should be used to create draft deploys */
            draft: boolean;
            /** @description The message of the build hook */
            msg: string;
            /**
             * Format: date-time
             * @description When the build hook was created
             */
            created_at: string;
        };
        CreateBuildHook: {
            /** @description The title of the build hook */
            title?: string;
            /** @description The branch of the build hook */
            branch?: string;
            /** @description If this build hook should be used to create draft deploys */
            draft?: boolean;
        };
        UpdateBuildHook: {
            /** @description The title of the build hook */
            title?: string;
            /** @description The branch of the build hook */
            branch?: string;
            /** @description If this build hook should be used to create draft deploys */
            draft?: boolean;
        };
        Build: {
            id: string;
            deploy_id: string;
            /**
             * @description The state of the associated deploy, or empty string if there's no associated deploy.
             * @enum {string}
             */
            deploy_state: "new" | "pending_review" | "accepted" | "rejected" | "enqueued" | "building" | "uploading" | "uploaded" | "preparing" | "prepared" | "processing" | "ready" | "error" | "retrying";
            sha: string;
            done: boolean;
            error: string;
            /** Format: date-time */
            created_at: string;
        };
        BuildStatus: {
            /** @description Number of active builds */
            active: number;
            /** @description Number of pending concurrency */
            pending_concurrency: number;
            /** @description Number of enqueued builds */
            enqueued: number;
            /** @description Build minutes information */
            minutes: {
                current?: number;
                previous?: number;
                /** Format: date-time */
                period_start_date?: string;
                /** Format: date-time */
                period_end_date?: string;
                /** Format: date-time */
                last_updated_at?: string;
                included_minutes?: number;
                included_minutes_with_packs?: number;
            };
        };
        CDP_Comment: {
            /** @description The ID of the Event */
            id: string;
            user: components["schemas"]["CDP_User"];
            /** @description The type of event (ticket, comment, view etc.) */
            type: string;
            /**
             * Format: date-time
             * @description When the Event ticket was created
             */
            created_at: string;
            /**
             * Format: date-time
             * @description When the Event ticket was created
             */
            updated_at: string;
            /** @description Information about the metadata for the Event */
            metadata: Record<string, never>;
            /** @description The body of the comment */
            body: string;
            /** @description Whether the comment has been resolved */
            resolved: boolean;
            resolved_by: components["schemas"]["CDP_User"];
            /** @description The service the comment belongs to (github etc) */
            service: string;
            /** @description The service id of the comment */
            service_comment_id: string;
            /** @description The review state of the comment (approved, denied) */
            review: string;
            /** @description Whether the comment is automated */
            automated: boolean;
            /** @description Whether the comment is pending */
            pending: boolean;
            /** @description The ID of the user who created the comment */
            reviewer_id: string;
        };
        /** @description CDP::Data::Branch model definition */
        CDP_Data_Branch: {
            /** @description The number of git additions in the PullRequest */
            additions: number;
            author: components["schemas"]["CDP_TicketData_Member"];
            /** @description The base ref of the branch */
            base: Record<string, never>;
            /** @description The body text for the commit */
            body: string;
            /**
             * Format: date-time
             * @description When the commit was pushed
             */
            created_at: string;
            /** @description The number of git deletions in the PullRequest */
            deletions: number;
            /** @description The number of git files changed in the commit */
            files: number;
            /** @description The sha of the commit */
            id: string;
            /** @description The id of the vcs repository for associated with the commit */
            repo_id: number;
            /** @description The commit message of the commit */
            title: string;
            /** @description The web url of the commit */
            url: string;
            /** @description The git host of the commit (github, gitlab, bitbucket) */
            vcs: string;
        };
        /** @description CDP::Data::PullRequest model definition */
        CDP_Data_PullRequest: {
            /** @description The number of git additions in the PullRequest */
            additions: number;
            /** @description Information about the assignees for the PullRequest */
            assignees: components["schemas"]["CDP_TicketData_Member"][];
            author: components["schemas"]["CDP_TicketData_Member"];
            /** @description The base ref of the PullRequest */
            base: Record<string, never>;
            /** @description The body text for the PullRequest */
            body: string;
            /**
             * Format: date-time
             * @description When the PullRequest was closed
             */
            closed_at: string;
            /** @description Array of information about the comments for the PullRequest */
            comments: Record<string, never>[];
            /** @description Array of information about the commits for the PullRequest */
            commits: Record<string, never>[];
            /** @description The number of comments in the PullRequest */
            comments_count: number;
            /** @description The number of commits in the PullRequest */
            commits_count: number;
            /** @description Array of information about the contributors to the PullRequest */
            contributors: components["schemas"]["CDP_TicketData_Member"][];
            /**
             * Format: date-time
             * @description When the PullRequest was created
             */
            created_at: string;
            /** @description The number of git deletions in the PullRequest */
            deletions: number;
            /** @description Whether the PullRequest is a draft */
            draft: boolean;
            /** @description The number of git files changed in the PullRequest */
            files: number;
            /** @description The head ref of the PullRequest */
            head: Record<string, never>;
            /** @description The id of the PullRequest */
            id: string;
            /** @description Array of information about the labels for the PullRequest */
            labels: components["schemas"]["CDP_TicketData_Label"][];
            /**
             * Format: date-time
             * @description When the last commit was authored
             */
            last_commit_at: string;
            /**
             * Format: date-time
             * @description When the PullRequest was merged
             */
            merged_at: string;
            milestone: components["schemas"]["CDP_TicketData_Epic"];
            /** @description The review number of the PullRequest */
            number: number;
            /** @description Array of project_ids associated with the PullRequest */
            projects: string[];
            /** @description The id of the vcs repository for associated with the PullRequest */
            repo_id: number;
            /** @description Array of information about the reviewers for the PullRequest */
            reviewers: components["schemas"]["CDP_TicketData_Member"][];
            /** @description The state of the PullRequest (open, merged, closed) */
            state: string;
            /** @description The title of the PullRequest */
            title: string;
            /** @description The web url of the PullRequest */
            url: string;
            /** @description The git host of the PullRequest (github, gitlab, bitbucket) */
            vcs: string;
        };
        CDP_Event: {
            /** @description The ID of the Event */
            id: string;
            user: components["schemas"]["CDP_User"];
            /** @description The type of event (ticket, comment, view etc.) */
            type: string;
            /**
             * Format: date-time
             * @description When the Event ticket was created
             */
            created_at: string;
            /**
             * Format: date-time
             * @description When the Event ticket was created
             */
            updated_at: string;
            /** @description Information about the metadata for the Event */
            metadata: Record<string, never>;
        };
        CDP_RunTimeError: {
            /** @description The ID of the Event */
            id: string;
            user: components["schemas"]["CDP_User"];
            /** @description The type of event (ticket, comment, view etc.) */
            type: string;
            /**
             * Format: date-time
             * @description When the Event ticket was created
             */
            created_at: string;
            /**
             * Format: date-time
             * @description When the Event ticket was created
             */
            updated_at: string;
            /** @description Information about the metadata for the Event */
            metadata: Record<string, never>;
            /** @description Information about the data for the Error */
            data: Record<string, never>;
        };
        CDP_TicketData_Board: {
            /** Format: date-time */
            created_at: string;
            description: string;
            id: string;
            name: string;
            project_ids: string[];
            states: components["schemas"]["CDP_TicketData_State"][];
        };
        CDP_TicketData_Epic: {
            archived: boolean;
            completed: boolean;
            /** Format: date-time */
            created_at: string;
            description: string;
            /** Format: date-time */
            ended_at: string;
            id: string;
            name: string;
            state_type: string;
            /** Format: date-time */
            started_at: string;
            /** Format: date-time */
            updated_at: string;
        };
        CDP_TicketData_Label: {
            archived: boolean;
            /** Format: date-time */
            created_at: string;
            color: string;
            /** Format: date-time */
            description: string;
            id: string;
            name: string;
        };
        CDP_TicketData_Member: {
            avatar: string;
            /** Format: date-time */
            created_at: string;
            disabled: boolean;
            email: string;
            id: string;
            name: string;
            role: string;
            username: string;
        };
        CDP_TicketData_Milestone: {
            archived: boolean;
            completed: boolean;
            /** Format: date-time */
            created_at: string;
            description: string;
            /** Format: date-time */
            ended_at: string;
            id: string;
            name: string;
            state_type: string;
            /** Format: date-time */
            started_at: string;
            /** Format: date-time */
            updated_at: string;
        };
        CDP_TicketData_Project: {
            archived: boolean;
            color: string;
            /** Format: date-time */
            created_at: string;
            description: string;
            id: string;
            name: string;
            /** Format: date-time */
            updated_at: string;
            /** @description An array of issue types of the project. Only available for Jira */
            issue_types: components["schemas"]["CDP_TicketData_Project_IssueType"][];
        };
        CDP_TicketData_Project_IssueType: {
            /** @description The ID of the issue type */
            id?: string;
            /** @description The name of the issue type */
            name?: string;
        };
        CDP_TicketData_Sprint: {
            archived: boolean;
            /** Format: date-time */
            created_at: string;
            description: string;
            /** Format: date-time */
            ended_at: string;
            id: string;
            name: string;
            /** Format: date-time */
            started_at: string;
            /** Format: date-time */
            updated_at: string;
        };
        CDP_TicketData_State: {
            color: string;
            /** Format: date-time */
            created_at: string;
            description: string;
            id: string;
            name: string;
            position: number;
            state_type: string;
        };
        CDP_TicketData_Team: {
            archived: boolean;
            color: string;
            id: string;
            name: string;
        };
        CDP_TicketData_Template: {
            /** Format: date-time */
            created_at: string;
            fields: Record<string, never>;
            id: string;
            name: string;
        };
        CDP_Ticket: {
            /** @description Whether the ticket is only visible to members with certain access */
            confidential: boolean;
            /** @description The body text of the ticket */
            description: string;
            /**
             * Format: date-time
             * @description The Date the ticket is due
             */
            due_at: string;
            /** @description The Epic ID for the ticket */
            epic: string;
            /** @description The estimate for the ticket */
            estimate: number;
            /** @description The labels for the ticket */
            labels: string[];
            /** @description The IDs for the owners of the ticket */
            owners: string[];
            /** @description The priority of the ticket */
            priority: number;
            /** @description The project id for the ticket */
            project: string;
            /** @description The sprint id for the ticket */
            sprint: string;
            /** @description The state of the ticket */
            state: string;
            /** @description The IDs for the subscribers to the ticket */
            subscribers: string[];
            /** @description The team ID of the ticket */
            team: string;
            /** @description The title of the ticket */
            title: string;
            /** @description The type of the ticket */
            ticket_type: string;
            /** @description The ticket number */
            number: string;
            /** @description The web url of the ticket */
            url: string;
            /** @description The Ticket's service (github, clubhouse, trello etc) */
            service: string;
        };
        CDP_UserIntegration: {
            /** @description The ID of the UserIntegration */
            id: string;
            /** @description The slug if the integration provider */
            slug: string;
            /**
             * Format: date-time
             * @description When the Event ticket was created
             */
            created_at: string;
            /**
             * Format: date-time
             * @description When the Event ticket was created
             */
            updated_at: string;
            /** @description Information about the user integration */
            integration_data: Record<string, never>;
        };
        /** @description User model definition */
        CDP_User: {
            /** @description the identifier for the user */
            id: string;
            full_name: string;
            /** @description the URL for the avatar */
            avatar_url: string;
            /** Format: date-time */
            created_at: string;
            /** @description information of the connected providers' slug if any */
            connected_accounts: {
                github?: string;
                gitlab?: string;
                bitbucket?: string;
            };
        };
        CDP_View: {
            /** @description The ID of the Event */
            id: string;
            user: components["schemas"]["CDP_User"];
            /** @description The type of event (ticket, comment, view etc.) */
            type: string;
            /**
             * Format: date-time
             * @description When the Event ticket was created
             */
            created_at: string;
            /**
             * Format: date-time
             * @description When the Event ticket was created
             */
            updated_at: string;
            /** @description Information about the metadata for the Event */
            metadata: Record<string, never>;
            /** @description The page that was viewed */
            path: string;
        };
        /** @description CertOrder model definition */
        CertOrder: {
            /** @description The ID of the certificate order */
            id: string;
            /** @description The URL of the certificate order */
            url: string;
            /** @description The state of the certificate order */
            state: string;
            /** @description The state of the certificate order managed by AASM gem */
            aasm_state: string;
            /** @description The exception class and message putting the order into an error state */
            error_reason: string;
            /**
             * Format: date-time
             * @description When the certificate order was created
             */
            created_at: string;
            /**
             * Format: date-time
             * @description When the certificate order was updated
             */
            updated_at: string;
        };
        /** @description Committer model definition */
        Committer: {
            /** @description The ID for the committer */
            id: string;
            /** @description The ID of the account the committer is associated with */
            account_id: string;
            /** @description The ID of the user associated with the committer, if found */
            user_id: string;
            /** @description The name of the provider, for example: **github**, **gitlab**, **bitbucket** */
            provider: string;
            /** @description The ID of the committer within the provider's system */
            provider_id: number;
            /** @description The username of the committer within the provider's system */
            provider_slug: string;
            /** @description The ID of the member of the account matched to this committer */
            member_id: string;
            /** @description The invite ID matched to this committer */
            invite_id: string;
            /**
             * @description How the member was matched to the committer: **automatic** for our system, or **manual**  for a human
             * @enum {string}
             */
            match_method: "automatic" | "manual";
            /**
             * Format: date-time
             * @description The last time an event (push/pull/merge request) was detected for the committer
             */
            last_seen: string;
        };
        ConnectBandwidthUsage: {
            used: number;
            /** Format: date-time */
            last_updated_at: string;
            /** Format: date-time */
            period_start_date: string;
            /** Format: date-time */
            period_end_date: string;
        };
        CreateProject: {
            create_project_id: string;
            branch: string;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
        };
        /** @description Deploy model definition */
        Deploy_LogAttributes: Record<string, never>;
        Deploy_Simple: {
            admin_url: string;
            commit_ref: string;
            commit_url: string;
            title: string;
            /** Format: date-time */
            published_at: string;
        };
        Deploy_SimpleState: {
            id: string;
            site_id: string;
            state: string;
            /**
             * Format: date-time
             * @description When the deploy was created
             */
            created_at: string;
            /** @description The total time, in seconds, it took to deploy */
            deploy_time: number;
            /**
             * @description The deploy context
             * @enum {string}
             */
            context: "production" | "branch-deploy" | "deploy-preview";
            concurrent_upload_limit: number;
        };
        Deploy_SiteDeploy: {
            id: string;
            site_id: string;
            state: string;
            /**
             * Format: date-time
             * @description When the deploy was created
             */
            created_at: string;
            /** @description The total time, in seconds, it took to deploy */
            deploy_time: number;
            /**
             * @description The deploy context
             * @enum {string}
             */
            context: "production" | "branch-deploy" | "deploy-preview";
            /** @description The git branch name of the deploy */
            branch: string;
            /** @description The git commit SHA */
            commit_ref: string;
            /** @description The URL for the commit of the deploy */
            commit_url: string;
            /** @description The HTTPS URL of the production deploy */
            ssl_url: string;
            /** @description The HTTPS URL of the Deploy Preview */
            deploy_ssl_url: string;
            /** @description The build ID */
            build_id: string;
            /** @description The pull request or merge request number */
            review_id: number;
            /** @description The error message, if an error occurred during the deploy */
            error_message: string;
            /** @description The title of the pull request or merge request */
            title: string;
            /** @description Whether the deploy has been skipped */
            skipped: boolean;
            /**
             * @description The state of the deploy's plugins
             * @enum {string}
             */
            plugin_state: "success" | "canceled_build" | "failed_plugin" | "failed_build" | "skipped" | "none";
        };
        SiteFile: {
            /** @description The path of the file */
            id: string;
            /** @description The path of the file */
            path: string;
            /** @description The sha of the file */
            sha: string;
            /** @description The mime_type of the file */
            mime_type: string;
            /** @description The size of the file in bytes */
            size: number;
            /** @description The site ID of the file */
            site_id: string;
            /** @description The deploy ID of the file */
            deploy_id: string;
        };
        SiteFileUploadResponse: {
            /** @description The path of the file */
            id?: string;
            /** @description The path of the file */
            path?: string;
            /** @description The sha of the file */
            sha?: string;
            /** @description The mime_type of the file */
            mime_type?: string;
            /** @description The size of the file in bytes */
            size?: number;
        };
        /** @description DeployKey model definition */
        DeployKey: {
            /** @description The deploy key ID */
            id: string;
            /** @description The public key */
            public_key: string;
            /**
             * Format: date-time
             * @description When the deploy key was created
             */
            created_at: string;
        };
        /** @description Deploy model definition */
        Deploy: {
            /** @description The deploy ID */
            id: string;
            /** @description The site ID */
            site_id: string;
            /** @description The build ID */
            build_id: string;
            /**
             * @description The state of the deploy
             * @enum {string}
             */
            state: "new" | "pending_review" | "accepted" | "rejected" | "enqueued" | "building" | "uploading" | "uploaded" | "preparing" | "prepared" | "processing" | "ready" | "error" | "retrying";
            /** @description The site name */
            name: string;
            /** @description The HTTP URL of the production deploy */
            url: string;
            /** @description The HTTPS URL of the production deploy */
            ssl_url: string;
            /** @description The URL of the deploy in the Netlify UI */
            admin_url: string;
            /** @description The HTTP URL of the Deploy Preview */
            deploy_url: string;
            /** @description The HTTPS URL of the Deploy Preview */
            deploy_ssl_url: string;
            /**
             * Format: date-time
             * @description When the deploy was created
             */
            created_at: string;
            /**
             * Format: date-time
             * @description When the deploy was updated
             */
            updated_at: string;
            /** @description The user ID of the deploy's site owner */
            user_id: string;
            /** @description The error message, if an error occurred during the deploy */
            error_message: string;
            /** @description An array of required files that need to be uploaded to complete the deploy */
            required: string[];
            /** @description An array of required functions that need to be uploaded to complete the deploy */
            required_functions: string[];
            /** @description The git commit SHA */
            commit_ref: string;
            /** @description The pull request or merge request number */
            review_id: number;
            /** @description The git branch name of the deploy */
            branch: string;
            /** @description The URL for the commit of the deploy */
            commit_url: string;
            /** @description Whether the deploy has been skipped */
            skipped: boolean;
            /** @description Whether the deploy has been locked */
            locked: boolean;
            /** @description The title of the pull request or merge request */
            title: string;
            /** @description The latest commit message for the pull request or merge request */
            commit_message: string;
            /** @description The URL of the pull request or merge request */
            review_url: string;
            /**
             * Format: date-time
             * @description When the deploy was published to production
             */
            published_at: string;
            /**
             * @description The deploy context
             * @enum {string}
             */
            context: "production" | "branch-deploy" | "deploy-preview";
            /** @description The total time, in seconds, it took to deploy */
            deploy_time: number;
            /** @description An array of available functions */
            available_functions: string[];
            /** @description The URL of the screenshot of the deploy */
            screenshot_url: string;
            /** @description The username of the committer on GitHub, GitLab, or BitBucket */
            committer: string;
            /** @description Whether the build logs have been skipped */
            skipped_log: boolean;
            /** @description Whether the deploy was deployed manually */
            manual_deploy: boolean;
            /**
             * @description The state of the deploy's plugins
             * @enum {string}
             */
            plugin_state: "success" | "canceled_build" | "failed_plugin" | "failed_build" | "skipped" | "none";
            /** @description The frontend framework detected, if any */
            framework: string;
            /** @description The initial route of the Deploy Preview */
            entry_path: string;
            /** @description Information about the summary of the deploy */
            summary: {
                status?: string;
                messages?: {
                    type?: string;
                    title?: string;
                    description?: string;
                    details?: string;
                }[];
            };
            /** @description The number of times the deploy has been viewed */
            views_count: number;
            /** @description An array of function schedules */
            function_schedules: {
                name?: string;
                cron?: string;
            }[];
            /** @description Whether the deploy includes at least one Edge Function */
            edge_functions_present?: boolean;
            /**
             * Format: date-time
             * @description The date at which the deploy will be soft-deleted
             */
            expires_at?: string;
        };
        /** @description Deploy summary details */
        DeploySummary: {
            /**
             * @description The status of the summary
             * @enum {string}
             */
            status: "ready" | "unavailable";
            /** @description The messages of the summary */
            messages: components["schemas"]["DeploySummaryMessage"][];
        };
        /** @description Deploy summary message */
        DeploySummaryMessage: {
            /** @description The description of the message in Markdown format */
            description?: string;
            /** @description The details of the message in Markdown format */
            details?: string;
            /** @description The title of the message */
            title?: string;
            /**
             * @description The type of the message
             * @enum {string}
             */
            type?: "info" | "warning";
        };
        /** @description DeployedBranch model definition */
        DeployedBranch: {
            /** @description The ID of the deployed branch */
            id: string;
            /** @description The site ID of the deployed branch */
            site_id: string;
            /** @description The deploy ID of the deployed branch */
            deploy_id: string;
            /** @description The name of the deployed branch */
            name: string;
            /** @description The slugified name of the deployed branch */
            slug: string;
            /** @description The URL of the deployed branch */
            url: string;
            /** @description The SSL URL of the deployed branch */
            ssl_url: string;
            /**
             * Format: date-time
             * @description When the deployed branch was created
             */
            created_at: string;
            /**
             * Format: date-time
             * @description When the deployed branch was updated
             */
            updated_at: string;
        };
        /** @description DevServer model definition */
        DevServer_LogAttributes: Record<string, never>;
        DevServerHook: {
            /** @description The ID of the dev server hook */
            id: string;
            /** @description The site ID of the dev server hook */
            site_id: string;
            /** @description The title of the dev server hook */
            title: string;
            /** @description The branch of the dev server hook */
            branch: string;
            /** @description The URL of the dev server hook */
            url: string;
            /** @description The message of the dev server hook */
            msg: string;
            /** @description The type of the dev server hook */
            type: string;
            /**
             * Format: date-time
             * @description When the dev server hook was created
             */
            created_at: string;
        };
        CreateDevServerHook: {
            /** @description The title of the dev server hook */
            title?: string;
            /** @description The branch of the dev server hook */
            branch?: string;
            /** @description The type of dev server hook */
            type?: string;
        };
        UpdateDevServerHook: {
            /** @description The title of the dev server hook */
            title?: string;
            /** @description The branch of the dev server hook */
            branch?: string;
            /** @description The type of dev server hook */
            type?: string;
        };
        DevServer: {
            /** @description The id of the dev server */
            id?: string;
            /** @description The id of the site */
            site_id?: string;
            /** @description The state of the dev server */
            state?: string;
            /** @description The time the dev server was enqueued */
            enqueued_at?: string;
            /** @description The time the dev server was created */
            created_at?: string;
            /** @description The time the dev server was updated */
            updated_at?: string;
            /** @description The time the dev server was last active */
            last_activity_at?: string;
            /** @description The url of the dev server */
            url?: string;
            /** @description The time the dev server started */
            starting_at?: string;
            /** @description The time the dev server errored */
            error_at?: string;
            /** @description The time the dev server went live */
            live_at?: string;
            /** @description The time the dev server was done */
            done_at?: string;
            /** @description The branch of the dev server */
            branch?: string;
            /** @description The title of the dev server */
            title?: string;
            /** @description The reason the dev server was stopped */
            stop_reason?: string;
        };
        DevServerEnvironment: {
            /** @description The branch of the dev server environment */
            branch?: string;
            live?: components["schemas"]["DevServer"];
            latest?: components["schemas"]["DevServer"];
        };
        DevServerConfig: {
            /** @description The id of the dev server */
            id?: string;
            /** @description The time the new config should expire */
            expires_at?: string;
            /** @description The repo url */
            repo_url?: string;
        };
        DirectorySyncEntity: Record<string, never>;
        DnsRecord: {
            /** @description The ID of the DNS record */
            id: string;
            /** @description The site ID */
            site_id: string;
            /** @description The ID of the DNS zone the record belongs to */
            dns_zone_id: string;
            /** @description An array of error messages */
            errors: string[];
            /** @description Whether Netlify created (managed) record or the user created */
            managed: boolean;
            /** @description The value of the DNS record */
            value: string;
            /** @description The hostname of the DNS record */
            hostname: string;
            /** @description The type of the DNS record */
            type: string;
            /** @description The TTL of the DNS record */
            ttl: number;
            /** @description The priority of the DNS record */
            priority: number;
            /** @description The weight of the DNS record (for SRV type record) */
            weight: number;
            /** @description The port of the DNS record (for SRV type record) */
            port: number;
            /** @description The flag of the DNS record (for CAA type record) */
            flag: number;
            /** @description The tag of the DNS record (for CAA type record) */
            tag: string;
        };
        DnsRecordCreateParams: {
            /** @description The site ID */
            site_id?: string;
            /** @description Whether Netlify created (managed) record or the user created */
            managed?: boolean;
            /** @description The value of the DNS record */
            value?: string;
            /** @description The hostname of the DNS record */
            hostname?: string;
            /** @description The type of the DNS record */
            type?: string;
            /** @description The TTL of the DNS record */
            ttl?: number;
            /** @description The priority of the DNS record */
            priority?: number;
            /** @description The weight of the DNS record (for SRV type record) */
            weight?: number;
            /** @description The port of the DNS record (for SRV type record) */
            port?: number;
            /** @description The flag of the DNS record (for CAA type record) */
            flag?: number;
            /** @description The tag of the DNS record (for CAA type record) */
            tag?: string;
        };
        DnsZone: {
            /** @description The ID of the DNS zone */
            id: string;
            /** @description The name of the DNS zone */
            name: string;
            /** @description An array of error messages */
            errors: string[];
            /** @description An array of supported DNS record types */
            supported_record_types: string[];
            /** @description The user ID of the DNS zone creator */
            user_id: string;
            /** @description An array of DNS records for this DNS zone */
            records: components["schemas"]["DnsRecord"][];
            /** @description The name servers of the DNS zone */
            dns_servers: string[];
            /** @description The account ID */
            account_id: string;
            /** @description The site ID */
            site_id: string;
            /** @description The account slug */
            account_slug: string;
            /** @description The account name */
            account_name: string;
            domain: components["schemas"]["Domain"];
            /** @description Whether IPv6 is enabled */
            ipv6_enabled: boolean;
            /** @description Whether using a dedicated network */
            dedicated: boolean;
            /**
             * Format: date-time
             * @description When the DNS zone was created
             */
            created_at: string;
            /**
             * Format: date-time
             * @description When the DNS zone was updated
             */
            updated_at: string;
        };
        DnsZoneCreateParams: {
            /** @description The ID of the site */
            site_id?: string;
            /** @description The account slug. If not provided, the current user's default account will be used */
            account_slug?: string;
            /** @description The name of the DNS zone */
            name?: string;
        };
        DnsZoneTransferParams: {
            /** @description The current account ID of the DNS zone */
            account_id?: string;
            /** @description The account ID to transfer the DNS zone to */
            transfer_account_id?: string;
            /** @description The userID to transfer the DNS zone to */
            transfer_user_id?: string;
        };
        Domain: {
            /** @description The ID of the domain */
            id: string;
            /** @description The name of the domain */
            name: string;
            /** @description The user ID of the domain creator */
            user_id: string;
            /**
             * Format: date-time
             * @description When the domain expires
             */
            expires_at: string;
            /**
             * Format: date-time
             * @description When the domain was registered
             */
            registered_at: string;
            /** @description The renewal price of the domain */
            renewal_price: string;
            /** @description Whether the domain auto renews or not */
            auto_renew: boolean;
            /** @description The auth code used for transferring out the domain */
            auth_code: string;
            /**
             * Format: date-time
             * @description When the domain was transferred
             */
            transferred_at: string;
            /**
             * Format: date-time
             * @description When the domain was auto renewed
             */
            auto_renew_at: string;
            /**
             * Format: date-time
             * @description When the domain was created
             */
            created_at: string;
            /**
             * Format: date-time
             * @description When the domain was updated
             */
            updated_at: string;
        };
        Doorkeeper_AccessToken: {
            /** @description The ID for the access token (same as access token) */
            id: string;
            /** @description The access token */
            access_token: string;
            /** @description The refresh token set during OAuth */
            refresh_token: string;
            /** @description The user ID of this token's owner */
            user_id: string;
            /** @description List of scopes for this token */
            scopes: string[];
            /**
             * Format: date-time
             * @description When the access token was created
             */
            created_at: string;
            /**
             * Format: date-time
             * @description When the access token expires
             */
            expires_at: string;
        };
        /** @description Doorkeeper::Application model definition */
        Doorkeeper_Application: {
            id: string;
            name: string;
            description: string;
            personal: boolean;
            redirect_uri: string;
            client_id: string;
            secret: string;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
            /** Format: date-time */
            authorized_at: string;
            saml_account_id: string;
        };
        EdgeFunctionConfig: {
            function: string;
            generator?: string;
            name?: string;
            path?: string;
            pattern?: string;
            excluded_patterns?: string[];
            cache?: boolean;
        };
        EdgeFunctionsUsage: {
            used: number;
            included: number;
            additional: number;
            /** Format: date-time */
            last_updated_at: string;
            /** Format: date-time */
            period_start_date: string;
            /** Format: date-time */
            period_end_date: string;
        };
        /** @description Environment variable model definition */
        EnvVar: {
            /** @description The environment variable key, like ALGOLIA_ID (case-sensitive) */
            key: string;
            /** @description The scopes that this environment variable is set to */
            scopes: ("builds" | "functions" | "runtime" | "post_processing")[];
            /** @description An array of Value objects containing values and metadata */
            values: components["schemas"]["EnvVarValue"][];
            /**
             * Format: date-time
             * @description The timestamp of when the value was last updated
             */
            updated_at: string;
            updated_by: components["schemas"]["EnvVarUser"];
            /** @description Should this environment variable be treated as a write-only variable and not accesible outside of Netlify runtimes */
            is_secret?: boolean;
        };
        /** @description Environment variable value model definition */
        EnvVarValue: {
            /** @description The environment variable value's universally unique ID */
            id?: string;
            /** @description The environment variable's unencrypted value */
            value?: string;
            /**
             * @description The deploy context in which this value will be used. `dev` refers to local development when running `netlify dev`. `branch` must be provided with a value in `context_parameter`.
             * @enum {string}
             */
            context?: "all" | "dev" | "dev-server" | "branch-deploy" | "deploy-preview" | "production" | "branch";
            /** @description An additional parameter for custom branches. Currently, this is used for providing a branch name when `context=branch`. */
            context_parameter?: string;
        };
        EnvVarUser: {
            /** @description The user's unique identifier */
            id?: string;
            /** @description The user's full name (first and last) */
            full_name?: string;
            /** @description The user's email address */
            email?: string;
            /** @description A URL pointing to the user's avatar */
            avatar_url?: string;
        };
        EnvVarSet: {
            /**
             * @description The deploy context where this value will be applied
             * @enum {string}
             */
            context?: "dev" | "dev-server" | "branch-deploy" | "deploy-preview" | "production" | "branch";
            /** @description If present, the name of the custom context related to the context_parameter */
            context_parameter?: string;
            /** @description The plaintext value to be set on the key-context */
            value?: string;
            /** @description Should this environment variable be treated as a write-only variable and not accesible outside of Netlify runtimes */
            is_secret?: boolean;
        };
        SiteFirewallConfig: {
            id: string;
            unpublished: components["schemas"]["FirewallRuleSet"];
            published: components["schemas"]["FirewallRuleSet"];
            /**
             * Format: date-time
             * @description When the deployed branch was created
             */
            created_at: string;
            /**
             * Format: date-time
             * @description When the deployed branch was updated
             */
            updated_at: string;
        };
        CreateSiteFirewallConfig: {
            unpublished?: components["schemas"]["FirewallRuleSet"];
            published?: components["schemas"]["FirewallRuleSet"];
        };
        FirewallRule: {
            /** @enum {string} */
            action: "allow" | "deny";
            /** @enum {string} */
            type: "geo" | "ip";
            data: {
                [key: string]: string[];
            };
            description?: string;
            disabled?: Record<string, never>;
        };
        FirewallRuleSet: {
            /** @enum {string} */
            default: "allow" | "deny";
            rules: components["schemas"]["FirewallRule"][];
        };
        Form: {
            id: string;
            site_id: string;
            name: string;
            paths: string[];
            submission_count: number;
            fields: Record<string, never>[];
            honeypot: boolean;
            recaptcha: boolean;
            /** Format: date-time */
            last_submission_at: string;
            /** Format: date-time */
            created_at: string;
        };
        FormSubmission: {
            id: string;
            form_id: string;
            form_name: string;
            site_url: string;
            site_name: string;
            number: number;
            email: string;
            name: string;
            first_name: string;
            last_name: string;
            company: string;
            summary: string;
            body: string;
            data: Record<string, never>;
            /** Format: date-time */
            created_at: string;
        };
        FormSubmissionParams: {
            /** @description The form ID */
            form_id?: string;
            /** @description The deploy ID of the form submission */
            deploy_id?: string;
            /** @description The form submission values in hash */
            form_submission?: Record<string, never>;
            /** @description Whether to persist changes to the database or not */
            dry?: boolean;
            /** @description The client IP address of the form submission request */
            connection_ip?: string;
            /** @description The user agent of the form submission request */
            user_agent?: string;
            /** @description The referrer of the form submission request */
            referrer?: string;
        };
        /** @description FunctionBundle model definition */
        FunctionBundle: {
            /** @description The function bundle ID */
            id: string;
            /**
             * @description The provider of the function
             * @enum {string}
             */
            provider: "aws_lambda";
            /**
             * Format: date-time
             * @description When the function bundle was created
             */
            created_at: string;
            /** @description An array of the functions of this function bundle */
            functions: components["schemas"]["Function"][];
            /**
             * @description The function log type
             * @enum {string}
             */
            log_type: "socketeer";
            /** @description The branch of the deploy */
            branch?: string;
        };
        Function: {
            /** @description The name of the function */
            n?: string;
            /** @description The sha256 of the function */
            d?: string;
            /** @description The ID of the function */
            id?: string;
            /** @description The size of the function */
            s?: string;
            /** @description The runtime of the function */
            r?: string;
            /**
             * Format: date-time
             * @description When the function was created
             */
            c?: string;
            /** @description Routes for a function */
            ro?: {
                p?: string;
            }[];
            /** @description The endpoint of the function */
            endpoint?: string;
            /** @description The schedule of the function as a cron expression */
            schedule?: string;
        };
        GithubEnterpriseConfig: {
            /** @description The URL for the GitHub instance */
            instance_url: string;
            /** @description The clone URL for the GitHub instance */
            clone_url: string;
            /** @description The client ID of the GitHub application */
            client_id: string;
            /** @description The client secret of the GitHub application */
            client_secret: string;
            /** @description The app ID of the GitHub application */
            app_id: number;
            /** @description The private key of the GitHub application */
            private_key: string;
            /** @description The webhook secret of the GitHub application */
            webhook_secret: string;
        };
        GitlabSelfHostedConfig: {
            /** @description the url for the gitlab instance */
            instance_url: string;
            /** @description the clone url for the gitlab instance */
            clone_url: string;
            /** @description the client id of the gitlab application */
            client_id: string;
            /** @description the client secret of the gitlab application */
            client_secret: string;
        };
        /** @description HeroAccount model definition, see AccountUserMembershipSerializer for other fields */
        HeroAccount: {
            admin_url: string;
            build_node_pool: string;
            build_pre_process_timeout: number;
            build_resources: Record<string, never>;
            build_timelimit: number;
            dev_server_resources: Record<string, never>;
            concurrent_upload_limit: number;
            functions_config: Record<string, never>;
            zuora_url?: string;
            orb_url?: string;
            sites_count: number;
            dunning: boolean;
            enterprise_features: components["schemas"]["EnterpriseFeatures"];
        };
        /** @description EnterpriseFeatures model definition. */
        EnterpriseFeatures: {
            high_performance_builds?: components["schemas"]["HighPerformanceFeatureAttributes"];
            high_performance_edge?: components["schemas"]["HighPerformanceFeatureAttributes"];
            support_level?: components["schemas"]["EnterpriseFeatureAttributes"];
            concurrent_builds?: components["schemas"]["EnterpriseFeatureAttributes"];
            build_minutes?: components["schemas"]["EnterpriseFeatureAttributes"];
            additional_build_minutes?: components["schemas"]["EnterpriseFeatureAttributes"];
            edge_functions?: components["schemas"]["EnterpriseFeatureAttributes"];
            additional_edge_functions?: components["schemas"]["EnterpriseFeatureAttributes"];
            bandwidth?: components["schemas"]["EnterpriseFeatureAttributes"];
            additional_bandwidth?: components["schemas"]["EnterpriseFeatureAttributes"];
            seats?: components["schemas"]["EnterpriseFeatureAttributes"];
            additional_seats?: components["schemas"]["EnterpriseFeatureAttributes"];
        };
        /** @description EnterpriseFeatureAttributes model definition. */
        EnterpriseFeatureAttributes: {
            /** @description The custom price for the feature in the contract; per unit for features that start with `additional_` */
            price?: string;
            /** @description The amount included in the contract; consult Account#capabilities first */
            included_quantity?: number;
        };
        /** @description HighPerformanceFeatureAttributes model definition. */
        HighPerformanceFeatureAttributes: {
            /** @description Whether the feature is enabled for the account */
            enabled?: boolean;
            /** @description The custom price for the feature in the contract; per unit for features that start with `additional_` */
            price?: string;
            /** @description The amount included in the contract; consult Account#capabilities first */
            included_quantity?: number;
        };
        /** @description EnterpriseFeatureAdditional model definition. */
        EnterpriseFeatureAdditional: {
            /** @description The custom per unit price for the feature in the contract */
            price?: string;
        };
        /** @description EnterpriseFeatureEnablePrice model definition. */
        EnterpriseFeatureEnablePrice: {
            /** @description Whether the feature is enabled for the account */
            enabled?: boolean;
            /** @description The custom price for the feature in the contract */
            price?: string;
        };
        /** @description EnterpriseFeatureSupport model definition. */
        EnterpriseFeatureSupport: {
            /** @description The custom price for support in the contract */
            price?: string;
            /** @description The support level, either **0**, **1** or **2** */
            level?: number;
        };
        /** @description EnterpriseFeaturesParam model definition. */
        EnterpriseFeaturesParam: {
            /** @description Whether SAML is enabled for the account */
            saml_enabled?: boolean;
            /** @description Whether Netlify Connect is enabled for the account */
            connect_api_enabled?: boolean;
            high_performance_builds?: components["schemas"]["EnterpriseFeatureEnablePrice"];
            high_performance_edge?: components["schemas"]["EnterpriseFeatureEnablePrice"];
            support_level?: components["schemas"]["EnterpriseFeatureSupport"];
            concurrent_builds?: components["schemas"]["EnterpriseFeatureAttributes"];
            additional_concurrent_builds?: components["schemas"]["EnterpriseFeatureAdditional"];
            build_minutes?: components["schemas"]["EnterpriseFeatureAttributes"];
            additional_build_minutes?: components["schemas"]["EnterpriseFeatureAdditional"];
            edge_functions?: components["schemas"]["EnterpriseFeatureAttributes"];
            additional_edge_functions?: components["schemas"]["EnterpriseFeatureAdditional"];
            bandwidth?: components["schemas"]["EnterpriseFeatureAttributes"];
            additional_bandwidth?: components["schemas"]["EnterpriseFeatureAdditional"];
            seats?: components["schemas"]["EnterpriseFeatureAttributes"];
            additional_seats?: components["schemas"]["EnterpriseFeatureAdditional"];
            additional_committers?: components["schemas"]["EnterpriseFeatureAdditional"];
        };
        /** @description HeroOrganization model definition, see OrganizationSerializer for other fields */
        HeroOrganization: {
            /** @description The URL of the organization in the Netlify UI */
            admin_url: string;
            /** @description The URL of the zuora account */
            zuora_url: string;
            capabilities: Record<string, never>;
        };
        /** @description HeroSitesSummary model definition */
        HeroSitesSummary: {
            account_id: string;
            total: number;
            use_functions_count: number;
            use_forms_count: number;
            use_edge_functions_count: number;
            use_lm_count: number;
            functions_breakdown: Record<string, never>;
        };
        /** @description HeroUser model definition, see UserSerializer for other fields */
        HeroUser: {
            disabled: boolean;
            disabled_reason: string;
            spam: boolean;
            spam_score: number;
            billing_details: string;
            payments_gateway_name: string;
            github_slug: string;
            bitbucket_slug: string;
            all_sites: number;
            support_priority: number;
            zuora_url: string;
            all_accounts: string[];
            all_organizations: string[];
            sift_spam_score: number;
            safe_to_spam: boolean;
        };
        /** @description Outgoing hook model definition */
        OutgoingHook: {
            /** @description The ID of the hook */
            id: string;
            /** @description The site ID associated with this hook */
            site_id: string;
            /** @description The form ID associated with this hook */
            form_id: string;
            /** @description The form name of this hook */
            form_name: string;
            /** @description The user ID of the hook creator */
            user_id: string;
            /**
             * @description The type of the hook
             * @example email
             */
            type: string;
            /**
             * @description The name of the hook event
             * @example deploy_created
             */
            event: string;
            /**
             * @description The additional data for the hook
             * @example {
             *       "email": "foo@example.com"
             *     }
             */
            data: Record<string, never>;
            /** @description Whether the last notification succeeded */
            success: boolean;
            /**
             * Format: date-time
             * @description When the hook was created
             */
            created_at: string;
            /**
             * Format: date-time
             * @description When the hook was updated
             */
            updated_at: string;
            /**
             * @description Which actor the hook is triggered by
             * @example deploy
             */
            actor: string;
            /** @description Whether the hook is disabled due to the error rate */
            disabled: boolean;
            /** @description Whether this hook type is supported by the account type */
            restricted: boolean;
        };
        CreateOutgoingHook: {
            /** @description The site ID of the hook */
            site_id?: string;
            /** @description The form ID of the hook (either form_id or form_name is required if the hook will be created for the form) */
            form_id?: string;
            /** @description The form name of the hook */
            form_name?: string;
            /**
             * @description The type of the hook
             * @example email
             */
            type?: string;
            /**
             * @description The name of the hook event
             * @example deploy_created
             */
            event?: string;
            /**
             * @description Additional data for the hook
             * @example {
             *       "email": "foo@example.com"
             *     }
             */
            data?: {
                [key: string]: unknown;
            };
        };
        UpdateOutgoingHook: {
            /** @description The site ID of the hook */
            site_id?: string;
            /** @description The form ID of the hook (either form_id or form_name is required if the hook will be created for the form) */
            form_id?: string;
            /** @description The form name of the hook */
            form_name?: string;
            /**
             * @description The name of the hook event
             * @example deploy_created
             */
            event?: string;
            /**
             * @description Additional data for the hook
             * @example {
             *       "email": "foo@example.com"
             *     }
             */
            data?: {
                [key: string]: unknown;
            };
        };
        OutgoingHookType: {
            /** @description The name of the hook type */
            name?: string;
            /** @description The list of available events for this type */
            events?: string[];
            /** @description The list of fields this hook type can take */
            fields?: {
                name?: string;
                options?: Record<string, never>;
            }[];
        };
        IdentityVerification: {
            /** @description The provider of the IdentityVerification (stripe) */
            provider?: string;
            /** @description The UUID for IdentityVerification lookups */
            code?: string;
            /** @description The session_id for IdentityVerification session */
            session_id?: string;
            /** @description The report from the identity verification service */
            report?: Record<string, never>;
            user?: components["schemas"]["User"];
            /** @description The current state of the verification */
            state?: string;
            /**
             * Format: date-time
             * @description When the Event IdentityVerification was created
             */
            created_at?: string;
            /**
             * Format: date-time
             * @description When the Event IdentityVerification was updated
             */
            updated_at?: string;
        };
        /** @description Invite model definition */
        Invite: {
            /** @description The identifier for the user */
            id: string;
            /** @description The name of the team the invite is for */
            account_name?: string;
            /** @description The name of the organization the invite is for */
            organization_name?: string;
            /** @description The name of the role the user is invited to */
            role_name: string;
            /** @description The invite code for acceptance */
            code: string;
            /** @description When the invite was created */
            created_at: string;
        };
        /** @description Log Drain model definition */
        LogDrain: {
            /** @description The ID of the log drain */
            id: string;
            /** @description The site ID */
            site_id: string;
            /** @description An array of the selected log types */
            log_types: string;
            /**
             * @description The format for log drain output
             * @enum {string}
             */
            format: "json" | "ndjson";
            /**
             * @description The destination of the log drain
             * @enum {string}
             */
            destination: "datadog";
            /** @description Whether to exclude PII from the user traffic logs */
            exclude_pii?: boolean;
            service_config: components["schemas"]["LogDrainServiceConfig"];
        };
        /** @description The configuration for sending log drains to the destination service */
        LogDrainServiceConfig: {
            /** @description The URL for the log drain */
            url: string;
        };
        /** @description Member model definition. Similar to the User model, but includes the information
         *     of the associated team (account). */
        Member: {
            /** @description the identifier for the member */
            id: string;
            /** @description the user id of the member */
            user_id: string;
            /** @description the full name of the member */
            full_name: string;
            /** @description the email of the member */
            email: string;
            /** @description the avatar URL of the member */
            avatar: string;
            /** @description the role of the member in the team */
            role: string;
            /** @description if the member has 2Factor Auth enabled or */
            mfa_enabled: boolean;
            /** @description the table of what CRUD actions that the member could take in the UI */
            capabilities: Record<string, never>;
            /** @description information of the connected providers' slug if any */
            connected_accounts: {
                github?: string;
                gitlab?: string;
                bitbucket?: string;
            };
            /** @description site ids this member has access to */
            site_ids: string[];
            /** @description which site access this member has. either all, selected, or none */
            site_access: string;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
            /** @description if the associated invite is pending acceptance */
            pending: boolean;
            /** @description flag indicating if the member is managed by an idp directory */
            managed_by_directory_sync: boolean;
            /** @description the method the member is matched to a committer by. */
            committer_match_method?: {
                automatic?: string;
                manual?: string;
            };
            /**
             * Format: date
             * @description The last activity date of the member on the site. Note: activity data cannot be accessed before Nov 17th 2023, null values indicate last activity was before this date.
             */
            last_activity_date?: string;
        };
        OAuth_Ticket: {
            /** @description The ID for the OAuth ticket */
            id: string;
            /** @description The UID of the OAuth application */
            client_id: string;
            /** @description Whether the OAuth ticket is authorized */
            authorized: boolean;
            /**
             * Format: date-time
             * @description When the OAuth ticket was created
             */
            created_at: string;
        };
        /** @description Account model definition, with more details relating to organizations. */
        OrganizationAccount: {
            bandwidth_usage: components["schemas"]["BandwidthUsage"];
            /** @description The billing email for the account */
            billing_email: string;
            /** @description The billing name for the account */
            billing_name: string;
            build_status: components["schemas"]["BuildStatus"];
            /** @description Whether the HP builds is enabled for the account */
            high_performance_builds_enabled: boolean;
            /** @description Whether the HP edge is enabled for the account */
            high_performance_edge_enabled: boolean;
            /** @description The identifier for the account (account ID) */
            id: string;
            /** @description The number of included concurrent builds */
            included_concurrent_builds: number;
            member_roles: components["schemas"]["AccountMemberRole"][];
            /** @description The name for the account */
            name: string;
            /** @description An array of owner_ids on the account */
            owner_ids: string[];
            /** @description The slug for the account */
            slug: string;
            /** @description The support level of the account */
            support_level: string;
            /** @description Total seats */
            total_seats: number;
            /** @description Used seats */
            used_seats: number;
        };
        /** @description Organization model definition */
        Organization: {
            /** @description The slug for the organization, a normalized internal identifier for use in places like URLs */
            slug: string;
            /** @description The organization ID */
            id: string;
            /** @description The name for the organization */
            name: string;
            /**
             * Format: date-time
             * @description When the organization was created
             */
            created_at: string;
            /**
             * Format: date-time
             * @description When the organization was updated
             */
            updated_at: string;
            /** @description The billing email for the organization */
            billing_email: string;
            /** @description The logo url of the organization */
            logo_url: string;
            /** @description Billing Period */
            billing_period: string;
            /** @description Whether the organization uses invoices */
            invoicing: boolean;
            /** @description The number of days to pay the invoice; Only applies to organizations where invoicing is true.  Value values: *30*, *60*, *null*, defaults to 30. */
            payment_term: number;
            /** @description The payment method ID */
            payment_method_id: string;
            /** @description Whether the organization uses Zuora sandbox */
            sandbox: boolean;
            /** @description The bill cycle day of the month for the Zuora account */
            bill_cycle_day: number;
            /**
             * Format: date-time
             * @description When the current contract starts
             */
            contract_start_date: string;
            /**
             * Format: date-time
             * @description When the current contract ends
             */
            contract_end_date: string;
            /** @description The contract term length in months */
            contract_term_months: number;
            /** @description Whether the enterprise subscription automatically renews at the end of its term in Zuora */
            auto_renew: boolean;
            /** @description The purchase order number */
            purchase_order: string;
            /** @description The first name to show on invoice */
            first_name: string;
            /** @description The last name to show on invoice */
            last_name: string;
            /** @description The company name to show on invoice */
            company_name: string;
            /** @description The first address line to show on invoice */
            address1: string;
            /** @description The second address line to show on invoice */
            address2: string;
            /** @description The city to show on invoice */
            city: string;
            /** @description The state to show on invoice */
            state: string;
            /** @description The postal code to show on invoice */
            postal_code: string;
            /** @description The country to show on invoice */
            country: string;
            /** @description Whether the organization has configured sso */
            saml_enabled: boolean;
            /**
             * @description Determines type of saml enforcement
             * @enum {string|null|null}
             */
            enforce_saml: "not_enforced" | "enforced_strict" | null;
            /**
             * @description Determines type of mfa enforcement
             * @enum {string|null|null}
             */
            enforce_mfa: "not_enforced" | "encouraged" | "enforced" | null;
            capabilities: Record<string, never>;
            /** @description Whether the organization allows Netlify support to access their account via UI */
            support_administration_enabled: boolean;
            /**
             * Format: date-time
             * @description When the organization connected to directory sync
             */
            directory_sync_connected_at: ((string | null) | null) | null;
            /**
             * Format: date-time
             * @description When the organization activated directory sync
             */
            directory_sync_activated_at: ((string | null) | null) | null;
            /**
             * Format: date-time
             * @description When the organization deactivated directory sync
             */
            directory_sync_deactivated_at: ((string | null) | null) | null;
            /**
             * Format: date-time
             * @description When the organization deleted directory sync
             */
            directory_sync_deleted_at: ((string | null) | null) | null;
            /**
             * Format: date-time
             * @description When the organization enabled SAML
             */
            saml_enabled_at: ((string | null) | null) | null;
            /** @description The number of team members in the organization */
            total_member_count: number;
        };
        /** @description PaymentMethod model definition */
        PaymentMethod: {
            /** @description The payment method ID */
            id: string;
            /** @description The name for the organization */
            type: string;
            /** @description The payment method data */
            data: {
                name?: string;
                last4?: string;
                card_type?: string;
            };
            /**
             * @description The state of the payment method
             * @enum {string}
             */
            state: "success" | "error";
            /**
             * Format: date-time
             * @description When the payment method was created
             */
            created_at: string;
            /**
             * Format: date-time
             * @description When the payment method was updated
             */
            updated_at: string;
            /** @description The ID of the account the payment method belongs to */
            account_id: string;
            /** @description The ID of the customer the payment method belongs to */
            customer_id: string;
            /** @description The Zuora payment method ID */
            zuora_id: string;
            /** @description The ID of the organization the payment method belongs to */
            organization_id: string;
        };
        /** @description PluginRun model definition */
        PluginRun: {
            /** @description The ID of the deploy during which the plugin ran */
            deploy_id: string;
            /** @description The ID of the site for which the plugin ran */
            site_id: string;
            /** @description The name of the plugin npm package */
            package: string;
            /** @description The version of the plugin that ran during the deploy */
            version: string;
            /** @description The last build lifecycle event during which the plugin ran */
            reporting_event: string;
            /**
             * @description The resulting success, failure, or cancelation state
             * @enum {string}
             */
            state: "success" | "canceled_build" | "failed_plugin" | "failed_build" | "skipped" | "none";
            /** @description The title reported by the plugin */
            title: string;
            /** @description The summary reported by the plugin */
            summary: string;
            /** @description The full text result reported by the plugin */
            text: string;
        };
        PluginRunCreateParams: {
            /** @description The name of the plugin */
            package?: string;
            /** @description The version of the plugin that was run */
            version?: string;
            /** @description The plugin build lifecycle event that generated the report e.g onPostBuild */
            reporting_event?: string;
            /**
             * @description The resulting success, failure or cancellation state
             * @enum {string}
             */
            state?: "success" | "canceled_build" | "failed_plugin" | "failed_build" | "skipped" | "none";
            /** @description The summary reported by the plugin */
            summary?: string;
            /** @description The full text result reported by the plugin */
            text?: string;
            /** @description The ID of the deploy during which the plugin ran */
            deploy_id?: string;
            /** @description The ID of the site for which the plugin ran */
            site_id?: string;
        };
        /** @description Plugin model definition */
        Plugin: {
            /** @description The name of the plugin package */
            package: string;
            /** @description The pinned major version for the plugin */
            pinned_version: string;
        };
        PluginParams: {
            /** @description The pinned major version for the plugin */
            pinned_version?: string;
        };
        PluginCreateParams: {
            /** @description The name of the plugin package */
            package?: string;
            /** @description The pinned major version for the plugin */
            pinned_version?: string;
        };
        /** @description PublicDeploy model definition */
        PublicDeploy: {
            /** @description The deploy ID */
            id: string;
            /** @description The site ID */
            site_id: string;
            /** @description The build ID */
            build_id: string;
            /**
             * @description The state of the deploy
             * @enum {string}
             */
            state: "new" | "pending_review" | "accepted" | "rejected" | "enqueued" | "building" | "uploading" | "uploaded" | "preparing" | "prepared" | "processing" | "ready" | "error" | "retrying";
            /** @description The site name */
            name: string;
            /** @description The HTTP URL of the production deploy */
            url: string;
            /** @description The HTTPS URL of the production deploy */
            ssl_url: string;
            /** @description The URL of the deploy in the Netlify UI */
            admin_url: string;
            /** @description The HTTP URL of the Deploy Preview */
            deploy_url: string;
            /** @description The HTTPS URL of the Deploy Preview */
            deploy_ssl_url: string;
            /**
             * Format: date-time
             * @description When the deploy was created
             */
            created_at: string;
            /**
             * Format: date-time
             * @description When the deploy was updated
             */
            updated_at: string;
            /** @description The git commit SHA */
            commit_ref: string;
            /** @description The pull request or merge request number */
            review_id: number;
            /** @description Whether the deploy has been skipped */
            skipped: boolean;
            /** @description Whether the deploy has been locked */
            locked: boolean;
            /** @description The git branch name of the deploy */
            branch: string;
            /** @description The URL for the commit of the deploy */
            commit_url: string;
            /** @description The title of the pull request or merge request */
            title: string;
            /** @description The URL of the pull request or merge request */
            review_url: string;
            /**
             * Format: date-time
             * @description When the deploy was published to production
             */
            published_at: string;
            /**
             * @description The deploy context
             * @enum {string}
             */
            context: "production" | "branch-deploy" | "deploy-preview";
            /** @description The total time, in seconds, it took to deploy */
            deploy_time: number;
            /** @description Information about the summary of the deploy */
            summary: {
                status?: string;
                messages?: {
                    type?: string;
                    title?: string;
                    description?: string;
                    details?: string;
                }[];
            };
            /**
             * @description The state of the deploy's plugins
             * @enum {string}
             */
            plugin_state: "success" | "canceled_build" | "failed_plugin" | "failed_build" | "skipped" | "none";
            /** @description Whether the deploy is public */
            public: boolean;
        };
        Receipt: {
            id: string;
            transaction_id: string;
            amount: string;
            print_fields: string[];
            items: string[];
            usage: string[];
            display_amount: string;
            tax_amount: string;
            user_id: string;
            site_id: string;
            payment_method_id: string;
            payment_method_last_four: string;
            payment_method_card_type: string;
            html_stored: boolean;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
            /** Format: date-time */
            transaction_created_at: string;
        };
        /** @description Repo model definition */
        Repo: {
            allowed_branches: string[];
            base: string;
            base_rel_dir: boolean;
            configuration_file_path: string;
            cmd: string;
            /** Format: date-time */
            created_at: string;
            deploy_key_id: string;
            dir: string;
            env: Record<string, never>;
            functions_dir: string;
            installation_id: number;
            private_logs: boolean;
            provider: string;
            public_repo: boolean;
            repo_branch: string;
            repo_owner_type: string;
            repo_path: string;
            /** @description Always "git" */
            repo_type: string;
            repo_url: string;
            skip_automatic_builds: boolean;
            skip_prs: boolean;
            stop_builds: boolean;
            untrusted_flow: string;
            /** Format: date-time */
            updated_at: string;
        };
        /** @description Reviewer model definition */
        Reviewer: {
            /** @description The ID for the reviewer */
            id: string;
            /** @description The ID of the account the reviewer is associated with */
            account_id: string;
            /** @description The ID of the user associated with the reviewer */
            user_id: string;
            /**
             * @description The state of the reviewer
             * @enum {string}
             */
            state: "pending" | "approved" | "blocked";
            /**
             * @description The site access type of the reviewer
             * @enum {string}
             */
            site_access: "all" | "selected" | "none";
            /** @description The email address of the reviewer */
            email: string;
            /** @description The full name of the reviewer */
            full_name: string;
            /**
             * Format: date-time
             * @description When the reviewer was created
             */
            created_at: string;
            /**
             * Format: date-time
             * @description Last time the reviewer was updated
             */
            updated_at: string;
        };
        ReviewerSetup: {
            /**
             * @description The state of the reviewer
             * @enum {string}
             */
            state?: "pending" | "approved" | "blocked";
            /**
             * @description The site access type of the reviewer. Currently, only **all** is supported
             * @enum {string}
             */
            site_access?: "all" | "selected" | "none";
            /** @description An array of site IDs the reviewer has access to. Only required when site_access is selected */
            site_ids?: string[];
        };
        ReviewerInvite: {
            /** @description The email address to send a reviewer invitation */
            email?: string;
            /** @description The deploy ID of the deploy preview which will be used to create a deploy preview link as an invitation link */
            deploy_id?: string;
        };
        /** @description SecurityContact model definition */
        SecurityContact: {
            /** @description Email address of the security contact */
            email: string;
            /** @description Role of the security contact */
            role: string;
            /**
             * Format: date-time
             * @description When the security contact was created
             */
            created_at: string;
            /**
             * Format: date-time
             * @description When the security contact was updated
             */
            updated_at: string;
        };
        ServiceInstance: {
            /** @description the identifier for the service instance */
            id: string;
            url: string;
            config: Record<string, never>;
            /** @description the service slug of the instance */
            service_slug: string;
            /** @description the service path of the instance */
            service_path: string;
            /** @description the service name of the instance */
            service_name: string;
            env: Record<string, never>;
            snippets: Record<string, never>;
            auth_url: string;
            external_attributes: Record<string, never>;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
        };
        Service: {
            id: string;
            name: string;
            slug: string;
            service_path: string;
            long_description: string;
            description: string;
            events: Record<string, never>[];
            tags: string[];
            icon: string;
            manifest_url: string;
            environments: string[];
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
        };
        /** @description SimpleAccount model definition */
        SimpleAccount: {
            /** @description The ID of the account */
            id: string;
            /** @description The name of the account */
            name: string;
            /** @description The URL of the team logo */
            team_logo_url: string;
            /** @description The hash list of capabilities related to CDP */
            cdp_capabilities: Record<string, never>;
        };
        Site_Simple: {
            primary_create_project: string;
            pending_create_changes: number;
        };
        SiteLabel: {
            /** @description the id of the label */
            id?: string;
            /** @description the name of the label */
            name?: string;
            /** @description the description of the label */
            description?: string;
            /** @description the color of the label */
            color?: string;
            /** @description the account_id of the label */
            account_id?: string;
        };
        /** @description Site model definition */
        Site: {
            id: string;
            plan: string;
            name: string;
            default_domain: string;
            custom_domain: string;
            branch_deploy_custom_domain: string;
            deploy_preview_custom_domain: string;
            domain_aliases: string[];
            password_context: string;
            sso_login: boolean;
            sso_login_context: string;
            notification_email: string;
            url: string;
            admin_url: string;
            deploy_url: string;
            state: string;
            screenshot_url: string;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
            ssl_url: string;
            force_ssl: boolean;
            build_settings: components["schemas"]["Repo"];
            processing_settings: {
                html?: {
                    pretty_urls?: boolean;
                };
                ignore_html_forms?: boolean;
            };
            deploy_hook: string;
            managed_dns: boolean;
            account_id: string;
            account_slug: string;
            account_name: string;
            capabilities: Record<string, never>;
            id_domain: string;
            build_image: string;
            build_timelimit: number;
            deploy_retention_in_days: number;
            labels: components["schemas"]["SiteLabel"][];
        };
        /** @description SitesSummary model definition */
        SitesSummary: {
            account_id: string;
            concurrent_builds_count: number;
            extra_concurrent_builds: number;
            included_sites: number;
            sites_with_custom_domains_count: number;
            total_sites: number;
        };
        Slack_Generic: {
            /** @description The ID of the TeamWorkspace */
            id?: string;
            /** @description The ID of the TeamWorkspace's Account */
            account_id?: string;
            /** @description The data for the Notification */
            data?: Record<string, never>;
        };
        /** @description @property(x-internal:true) other_sites [array<object>] A list of sites also using this certificate. Included only in `show` responses. */
        Slack_SniCertificate: {
            id: string;
            state: string;
            domains: string[];
            /** Format: date-time */
            expires_at: string;
            custom: boolean;
            migrate_to_le_running: boolean;
            renewal_error_message: string;
            renewable: boolean;
            renew_running: boolean;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
        };
        CertificateInfo: {
            certificate?: string;
            key?: string;
            ca_certificates?: string;
        };
        Slack_TeamWorkspace: {
            /** @description The ID of the TeamWorkspace */
            id?: string;
            /** @description The ID of the TeamWorkspace's Account */
            account_id?: string;
            /** @description When the TeamWorkspace was created */
            created_at?: Record<string, never>;
            /** @description When the TeamWorkspace was updated */
            updated_at?: Record<string, never>;
            workspace: components["schemas"]["Slack_Workspace"];
        };
        Slack_TeamWorkspaceSubscription: {
            /** @description The ID of the TeamWorkspaceSubscription */
            id: string;
            /** @description The name of the Site the subscription is configured to */
            site_name: string;
            /** @description The id of the Site the subscription is configured to */
            site_id: string;
            /** @description The event_type for the subscription (deploy / site / membership / collaboration) */
            event_type: string;
            /** @description The slack channel ID for the subscription */
            channel_id: string;
            /** @description The context for the subscription (only set for deploy events) */
            deploy_contexts?: string[];
            /** @description The states for the subscription (only set for deploy events) */
            deploy_states?: string[];
            /** @description When the subscription was created */
            created_at?: Record<string, never>;
            /** @description When the subscription was updated */
            updated_at?: Record<string, never>;
            /** @description The account ID for the subscription */
            account_id?: string;
            /** @description If the channel is paused */
            paused?: boolean;
        };
        Slack_UserWorkspace: {
            /** @description The ID of the UserWorkspace */
            id: string;
            /** @description The Slack User ID for user in the Workspace */
            slack_user_id: string;
            workspace: components["schemas"]["Slack_Workspace"];
            /** @description The settings for the Workspace */
            configuration: Record<string, never>;
        };
        Slack_Workspace: {
            /** @description The ID of the Workspace */
            id: string;
            /** @description The name of the Workspace */
            name: string;
            /** @description The Slack ID of the Workspace */
            slack_team_id: string;
            /** @description The cooldown datetime for the Workspace */
            cooldown_until?: Record<string, never>;
            /** @description The billing tier of the Workspace */
            plan?: string;
        };
        /** @description @property(x-internal:true) other_sites [array<object>] A list of sites also using this certificate. Included only in `show` responses. */
        SniCertificate: {
            id: string;
            state: string;
            domains: string[];
            /** Format: date-time */
            expires_at: string;
            custom: boolean;
            migrate_to_le_running: boolean;
            renewal_error_message: string;
            renewable: boolean;
            renew_running: boolean;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
        };
        Snippet: {
            /** @description The ID of the snippet */
            id: number;
            /** @description The title of the snippet */
            title: string;
            /** @description The general snippet content */
            general: string;
            /**
             * @description The position to inject the snippet. Uses footer if not specified
             * @enum {string}
             */
            general_position: "head" | "footer";
            /** @description The goal snippet content */
            goal: string;
            /**
             * @description The position to inject the snippet. Uses footer if not specified
             * @enum {string}
             */
            goal_position: "head" | "footer";
        };
        SnippetParams: {
            /** @description The type of the snippet */
            type?: string;
            /** @description The title of the snippet */
            title?: string;
            /** @description The general snippet content */
            general?: string;
            /**
             * @description The position to inject the snippet. Uses footer if not specified
             * @enum {string}
             */
            general_position?: "head" | "footer";
            /** @description The goal snippet content */
            goal?: string;
            /**
             * @description The position to inject the snippet. Uses footer if not specified
             * @enum {string}
             */
            goal_position?: "head" | "footer";
        };
        /** @description StripePaymentMethod model definition */
        StripePaymentMethod: {
            /** @description The StripePaymentMethod ID */
            id: string;
            /** @description The name for the organization */
            type: string;
            /** @description The payment method data */
            data: {
                name?: string;
                last4?: string;
                card_type?: string;
            };
            /**
             * @description The state of the payment method
             * @enum {string}
             */
            state: "success" | "error";
            /**
             * Format: date-time
             * @description When the payment method was created
             */
            created_at: string;
            /**
             * Format: date-time
             * @description When the payment method was updated
             */
            updated_at: string;
            /** @description The ID of the Account the payment method belongs to */
            account_id: string;
            /** @description The ID of the OrbCustomer the payment method belongs to */
            orb_customer_id: string;
            /** @description The ID of the organization the payment method belongs to */
            organization_id: string;
        };
        TrafficRule: {
            action: components["schemas"]["TrafficRule_Action"];
            target: components["schemas"]["TrafficRule_Target"];
            description?: string;
            id: string;
        };
        TrafficRule_Action: {
            /** @enum {string} */
            type: "rate_limit" | "rewrite";
            config: components["schemas"]["ResponseConfig"] | components["schemas"]["RewriteConfig"];
        };
        TrafficRule_Target: {
            /** @enum {string} */
            type: "or" | "and" | "geo" | "header" | "cookie" | "path" | "connection_ip" | "query" | "domain" | "method" | "client_ip";
            config: components["schemas"]["CompositeTargetConfig"] | components["schemas"]["GeoTargetConfig"] | components["schemas"]["KeyValueTargetConfig"] | components["schemas"]["ValueTargetConfig"] | components["schemas"]["IPTargetConfig"];
        };
        ResponseConfig: {
            aggregate: components["schemas"]["RateLimitConfig_AggregateConfig"];
            rate_limit_config: components["schemas"]["RateLimitConfig"];
            /** @description Response status code. Default: 429 */
            status_code?: number;
        };
        RateLimitConfig_AggregateConfig: {
            keys: components["schemas"]["RateLimitConfig_AggregateConfig_AggregateKey"][];
        };
        RateLimitConfig: {
            /**
             * @description ]
             * @enum {string}
             */
            algorithm: "sliding_window";
            /** @description In seconds */
            window_size?: number;
            window_limit: number;
        };
        RateLimitConfig_RateLimits: {
            window: number;
        };
        RateLimitConfig_AggregateConfig_AggregateKey: {
            /** @enum {string} */
            type: "ip" | "domain";
        };
        RewriteConfig: {
            aggregate: components["schemas"]["RateLimitConfig_AggregateConfig"];
            limits: components["schemas"]["RateLimitConfig_RateLimits"];
            rate_limit_config: components["schemas"]["RateLimitConfig"];
            /** @description The path and query to rewrite the request to */
            to: string;
        };
        CompositeTargetConfig: {
            conditions: components["schemas"]["TrafficRule_Target"][];
        };
        GeoTargetConfig: {
            country: string;
            sub_region?: string;
            exclude?: boolean;
        };
        KeyValueTargetConfig: {
            key: string;
            value: string;
            regex?: boolean;
            exclude?: boolean;
        };
        ValueTargetConfig: {
            value: string;
            regex?: boolean;
            exclude?: boolean;
        };
        IPTargetConfig: {
            address: string;
            exclude?: boolean;
        };
        /** @description TrafficRulesConfig model definition */
        TrafficRulesConfig: {
            id: string;
            name?: string;
            description?: string;
            rules: components["schemas"]["TrafficRule"][];
            /**
             * Format: date-time
             * @description When the traffic rule config was created
             */
            created_at: string;
            /**
             * Format: date-time
             * @description When the traffic rule config was updated
             */
            updated_at: string;
        };
        SetTrafficRulesConfig: {
            config_id?: string;
            scope?: string;
        };
        SplitTest: {
            id: string;
            site_id: string;
            name: string;
            path: string;
            branches: Record<string, never>[];
            active: boolean;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
            /** Format: date-time */
            unpublished_at: string;
        };
        UserRegistrationScore: {
            /** @description The display name of the user. */
            display_name?: string;
            /** @description The score of the user's guess. */
            guess_score?: number;
            /** @description The index guessed by the user. */
            guessed_index?: number;
            /** @description The top scorers in the user registration scoring. */
            top_scorers?: Record<string, never>[];
            /** @description The user's ID. */
            user_id?: string;
            /** @description The current index of the user. */
            current_index?: number;
        };
        /** @description User model definition */
        User: {
            /** @description The identifier for the user */
            id: string;
            /** @description The uid for multipass */
            uid: string;
            /** @description The identifier for the user's personal account */
            account_id: string;
            /** @description The full name of the user */
            full_name: string;
            /** @description The URL for the avatar */
            avatar_url: string;
            /** @description The email of the user */
            email: string;
            /** @description The number of sites the user has */
            site_count: number;
            /**
             * Format: date-time
             * @description When the user was created
             */
            created_at: string;
            /**
             * Format: date-time
             * @description Last time this user logged in
             */
            last_login: string;
            /** @description An array of login providers the user has */
            login_providers: string[];
            /** @description The slug of the user */
            slug: string;
            /** @description Information of the connected providers' slug if any */
            connected_accounts: {
                github?: string;
                gitlab?: string;
                bitbucket?: string;
            };
            /** @description The tracking ID of the user */
            tracking_id: string;
            /** @description Whether the user has 2 Factor Auth enabled */
            mfa_enabled: boolean;
            /** @description The account_id that is used for SSO */
            saml_account_id: string;
            /** @description The account slug that is used for SSO */
            saml_slug: string;
            /** @description Only provided in `/auth/login` response */
            access_token: string;
            /** @description Issued during OAuth flows */
            refresh_token: string;
            /** @description Id of account user wants UI to start on */
            preferred_account_id: string;
            /** @description HMAC-signed user ID to be shared with CommandBar for storing user preferences */
            command_bar_user_id: string;
            /** @description Favorited sites UUIDs */
            favorite_sites: string[];
        };
        MfaSetup: {
            /** @description OTP seed */
            seed?: string;
            /** @description Base-64 encoded QR Code png to setup 2FA */
            qrcode?: string;
            /** @description To be returned on 2FA code confirmation */
            token?: string;
        };
        MfaConfirmation: {
            /** @description MFA Backup codes */
            backup_codes?: string[];
        };
        UserSignup: {
            /** @description The email address */
            email?: string;
            /** @description The password */
            password?: string;
            /** @description The full name */
            full_name?: string;
            /** @description The job role (used for the user identify) */
            jobrole?: string;
            reviewer_signup?: components["schemas"]["ReviewerSignupInfo"];
        };
        ReviewerSignupInfo: {
            /** @description The deploy ID that the user wants to join as a reviewer */
            deploy_id?: string;
            /** @description The path of Deploy Previews page that the reviewer was on during the signup */
            path?: string;
        };
        UserQuestionnaireParams: {
            userId?: string;
            email?: string;
            fullName?: string;
            use_case_context?: string;
            teamName?: string;
            jobrole?: string;
            job_leadership_title?: string;
            company_size__c?: string;
            useCase?: string;
            useCaseSomethingElse?: string;
        };
        Questionnaire: {
            company_size_c?: string;
            job_leadership_title?: string;
            job_role?: string;
            use_case?: string;
            use_case_context?: string;
            use_case_something_else?: string;
        };
        /** @description VisualEditorSite model definition */
        VisualEditorSite: {
            id: string;
            name: string;
            default_domain: string;
            custom_domain: string;
            branch_deploy_custom_domain: string;
            deploy_preview_custom_domain: string;
            domain_aliases: string[];
            url: string;
            admin_url: string;
            deploy_url: string;
            state: string;
            screenshot_url: string;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
            ssl_url: string;
            force_ssl: boolean;
            build_settings: components["schemas"]["Repo"];
            deploy_hook: string;
            account_id: string;
            account_slug: string;
            capabilities: Record<string, never>;
            id_domain: string;
            labels: components["schemas"]["SiteLabel"][];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    revokeAccessToken: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description successfully revoked */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getAccountBuildStatus: {
        parameters: {
            query?: {
                /** @description site_id */
                site_id?: string;
                /** @description state */
                state?: string;
            };
            header?: never;
            path: {
                /** @description account_id */
                account_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccountBuild"][];
                };
            };
        };
    };
    listMembersForAccount: {
        parameters: {
            query?: {
                /** @description Search for members in email field */
                emails?: string[];
                /** @description Number of per_page to skip when returning records */
                page?: string;
                /** @description Number of records to return */
                per_page?: string;
                /** @description Filter members by role(s) */
                roles?: string[];
                /** @description Filter members by a site */
                site_id?: string;
                /** @description Field of member to sort by (descending). When reviewer role is specified self_invite_pending and invite_pending are the defaults. */
                sort_by?: "id" | "full_name" | "email" | "updated_at" | "created_at" | "self_invite_pending" | "invite_pending";
                /** @description Filter members by invite state(s) */
                states?: ("invite_pending" | "self_invite_pending")[];
            };
            header?: never;
            path: {
                /** @description Account ID or slug */
                account_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Member"][];
                };
            };
        };
    };
    addMemberToAccount: {
        parameters: {
            query: {
                /** @description Build ID member was invited from */
                build_id?: string;
                /** @description Email to invite to the account */
                email: string;
                /** @description Name of the role for the new member (DefaultMemberRole.names) */
                role?: "array";
            };
            header?: never;
            path: {
                /** @description Account ID or slug */
                account_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Member"];
                };
            };
        };
    };
    listSitesForAccount: {
        parameters: {
            query?: {
                /** @description filter */
                filter?: "owner" | "guest";
                /** @description include_favorites */
                include_favorites?: boolean;
                /** @description name */
                name?: string;
                /** @description page */
                page?: number;
                /** @description per_page */
                per_page?: number;
                /** @description sort_by */
                sort_by?: "created_at" | "updated_at" | "alphabetical" | "published_at";
                /** @description When provided, returns only SSO/password protected / unprotected sites */
                visibility?: "protected" | "public";
            };
            header?: never;
            path: {
                /** @description The account slug */
                account_slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Site"][];
                };
            };
        };
    };
    createSiteInTeam: {
        parameters: {
            query?: {
                /** @description configure_dns */
                configure_dns?: boolean;
            };
            header?: never;
            path: {
                /** @description The account slug */
                account_slug: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Site"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Site"];
                };
            };
        };
    };
    listAccountsForUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Account"][];
                };
            };
        };
    };
    createAccount: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    name?: string;
                    type_id?: string;
                    payment_method_id?: string;
                    /** @enum {string} */
                    period?: "monthly" | "yearly";
                };
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Account"];
                };
            };
        };
    };
    getAccount: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the account */
                account_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Account"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateAccount: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the account */
                account_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AccountUpdateParams"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Account"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    cancelAccount: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the account */
                account_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    listAccountAuditEvents: {
        parameters: {
            query?: {
                /** @description Filter logs by one of the accepted types */
                log_type?: ("team" | "site")[];
            };
            header?: never;
            path: {
                /** @description The ID of the account */
                account_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuditLog"][];
                };
            };
        };
    };
    enableAnalytics: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The site ID */
                site_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ServiceInstance"];
                };
            };
            /** @description Payment Method not found, Analytics already enabled */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    disableAnalytics: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Scope response to id */
                id: string;
                /** @description The site ID */
                site_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Error during disabling */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    listSiteAssets: {
        parameters: {
            query?: {
                /** @description filter */
                filter?: string;
                /** @description search */
                search?: string;
            };
            header?: never;
            path: {
                /** @description The site ID */
                site_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Asset"][];
                };
            };
        };
    };
    createSiteAsset: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The site ID */
                site_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AssetCreateParams"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AssetCreateResult"];
                };
            };
        };
    };
    getSiteAssetInfo: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The asset ID */
                asset_id: string;
                /** @description The site ID */
                site_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Asset"];
                };
            };
        };
    };
    updateSiteAsset: {
        parameters: {
            query: {
                /** @description The state of the asset */
                state: "prepared" | "uploaded";
            };
            header?: never;
            path: {
                /** @description The asset ID */
                asset_id: string;
                /** @description The site ID */
                site_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Asset"];
                };
            };
        };
    };
    deleteSiteAsset: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The asset ID */
                asset_id: string;
                /** @description The site ID */
                site_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getSiteAssetPublicSignature: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The asset ID */
                asset_id: string;
                /** @description The site ID */
                site_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        url?: string;
                    };
                };
            };
        };
    };
    listPaymentMethodsForUser: {
        parameters: {
            query?: {
                /** @description The account ID */
                account_id?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaymentMethod"][];
                };
            };
        };
    };
    listSiteBuildHooks: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The site ID */
                site_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BuildHook"][];
                };
            };
        };
    };
    createSiteBuildHook: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The site ID */
                site_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateBuildHook"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BuildHook"];
                };
            };
        };
    };
    getSiteBuildHook: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The build hook ID */
                id: string;
                /** @description The site ID */
                site_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BuildHook"];
                };
            };
        };
    };
    updateSiteBuildHook: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The build hook ID */
                id: string;
                /** @description The site ID */
                site_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateBuildHook"];
            };
        };
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteSiteBuildHook: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The build hook ID */
                id: string;
                /** @description The site ID */
                site_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getSiteBuild: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description build_id */
                build_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Build"];
                };
            };
        };
    };
    listSiteBuilds: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the site */
                site_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Build"][];
                };
            };
        };
    };
    createSiteBuild: {
        parameters: {
            query?: {
                /** @description The branch to build; defaults to main branch */
                branch?: string;
                /** @description Whether to clear the build cache before building */
                clear_cache?: boolean;
                /** @description The build image tag to use for the build */
                image?: string;
                /** @description The build template to use for the build */
                template_id?: string;
            };
            header?: never;
            path: {
                /** @description The ID of the site */
                site_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Build"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateSiteBuildLog: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description build_id */
                build_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    message?: string;
                    error?: boolean;
                    section?: string;
                };
            };
        };
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        code?: number;
                        message?: string;
                    };
                };
            };
        };
    };
    notifyBuildStart: {
        parameters: {
            query?: {
                /** @description build_version */
                build_version?: string;
                /** @description buildbot_version */
                buildbot_version?: string;
            };
            header?: never;
            path: {
                /** @description build_id */
                build_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    listDeployKeys: {
        parameters: {
            query?: {
                /** @description Page of results to retrieve. Default is 1. */
                page?: number;
                /** @description Number of deploys to retrieve per page. The default and maximum value is 100. */
                per_page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeployKey"][];
                };
            };
        };
    };
    createDeployKey: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeployKey"];
                };
            };
        };
    };
    getDeployKey: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The deploy key ID */
                key_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeployKey"];
                };
            };
        };
    };
    deleteDeployKey: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The deploy key ID */
                key_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    listSiteDeploys: {
        parameters: {
            query?: {
                /** @description If provided, the branch on which to filter the list of deploys. */
                branch?: string;
                /** @description If provided, filters the list of deploys to just deploy previews. */
                "deploy-previews"?: boolean;
                /** @description A Unix timestamp to filter for deploys created since a certain time */
                from?: number;
                /** @description If provided, sorts the list of deploys by published_at date, with the most recent deploy first. */
                "latest-published"?: boolean;
                /** @description Page of results to retrieve. Default is 1. */
                page?: number;
                /** @description Number of deploys to retrieve per page. The default and maximum value is 100. */
                per_page?: number;
                /** @description If provided, filters the list of deploys to just production deploys. */
                production?: boolean;
                /** @description If provided, the state on which to filter the list of deploys. */
                state?: "new" | "pending_review" | "accepted" | "rejected" | "enqueued" | "building" | "uploading" | "uploaded" | "preparing" | "prepared" | "processing" | "ready" | "error" | "retrying";
                /** @description A Unix timestamp to filter for deploys created before a certain time */
                to?: number;
            };
            header?: never;
            path: {
                /** @description The ID of the site */
                site_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Deploy"][];
                };
            };
        };
    };
    createSiteDeploy: {
        parameters: {
            query?: {
                /** @description The title of the deploy */
                title?: string;
            };
            header?: never;
            path: {
                /** @description The ID of the site */
                site_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    files?: Record<string, never>;
                    draft?: boolean;
                    async?: boolean;
                    functions?: Record<string, never>;
                    function_schedules?: {
                        name?: string;
                        cron?: string;
                    }[];
                    functions_config?: {
                        name?: {
                            priority?: number;
                            build_data?: Record<string, never>;
                            display_name?: string;
                            generator?: string;
                            routes?: {
                                pattern?: string;
                                literal?: string;
                                expression?: string;
                                methods?: string[];
                            }[];
                            excluded_routes?: {
                                pattern?: string;
                                expression?: string;
                            }[];
                        };
                    };
                    branch?: string;
                    framework?: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Deploy"];
                };
            };
        };
    };
    getDeploy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the deploy */
                deploy_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Deploy"];
                };
            };
        };
    };
    deleteDeploy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the deploy to delete */
                deploy_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Deploy"];
                };
            };
        };
    };
    getSiteDeploy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the deploy */
                deploy_id: string;
                /** @description The ID of the site */
                site_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Deploy"];
                };
            };
        };
    };
    updateSiteDeploy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the deploy */
                deploy_id: string;
                /** @description The ID of the site */
                site_id: string;
            };
            cookie?: never;
        };
        /** @description , await_ready_signal: boolean] */
        requestBody: {
            content: {
                "application/json": {
                    files?: Record<string, never>;
                    draft?: boolean;
                    async?: boolean;
                    functions?: Record<string, never>;
                    function_schedules?: {
                        name?: string;
                        cron?: string;
                    }[];
                    functions_config?: {
                        name?: {
                            display_name?: string;
                        };
                    };
                    branch?: string;
                    framework?: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Deploy"];
                };
            };
        };
    };
    deleteSiteDeploy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the deploy */
                deploy_id: string;
                /** @description The ID of the site */
                site_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Deploy"];
                };
            };
        };
    };
    restoreSiteDeploy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the deploy to restore the site to */
                deploy_id: string;
                /** @description The ID of the site */
                site_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Deploy"];
                };
            };
        };
    };
    lockDeploy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the deploy to lock */
                deploy_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Deploy"];
                };
            };
        };
    };
    unlockDeploy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the deploy to unlock */
                deploy_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Deploy"];
                };
            };
        };
    };
    cancelSiteDeploy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the deploy */
                deploy_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Deploy"];
                };
            };
        };
    };
    getSimplePublicDeploy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the deploy */
                deploy_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Deploy_Simple"];
                };
            };
        };
    };
    listSiteDevServerHooks: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The site ID */
                site_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DevServerHook"][];
                };
            };
        };
    };
    createSiteDevServerHook: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The site ID */
                site_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateDevServerHook"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DevServerHook"];
                };
            };
        };
    };
    getSiteDevServerHook: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The dev server hook ID */
                id: string;
                /** @description The site ID */
                site_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DevServerHook"];
                };
            };
        };
    };
    updateSiteDevServerHook: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The dev server hook ID */
                id: string;
                /** @description The site ID */
                site_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateDevServerHook"];
            };
        };
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteSiteDevServerHook: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The dev server hook ID */
                id: string;
                /** @description The site ID */
                site_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getDnsRecords: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID or the name of the DNS zone */
                zone_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DnsRecord"][];
                };
            };
        };
    };
    createDnsRecord: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID or the name of the DNS zone */
                zone_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DnsRecordCreateParams"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DnsRecord"];
                };
            };
        };
    };
    getIndividualDnsRecord: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the DNS record */
                dns_record_id: string;
                /** @description The ID or the name of the DNS zone */
                zone_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DnsRecord"];
                };
            };
        };
    };
    deleteDnsRecord: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the DNS record */
                dns_record_id: string;
                /** @description The ID or the name of the DNS zone */
                zone_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getDnsZones: {
        parameters: {
            query?: {
                /** @description The account slug */
                account_slug?: string;
                /** @description Number of per_page to skip when returning records */
                page?: string;
                /** @description Number of records to return */
                per_page?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DnsZone"][];
                };
            };
        };
    };
    createDnsZone: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DnsZoneCreateParams"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DnsZone"];
                };
            };
        };
    };
    getDnsZone: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID or the name of the DNS zone */
                zone_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DnsZone"];
                };
            };
        };
    };
    deleteDnsZone: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID or the name of the DNS zone */
                zone_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    enableDnsZoneIpv6: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID or the name of the DNS zone */
                zone_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DnsZone"];
                };
            };
        };
    };
    transferDnsZone: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID or the name of the DNS zone */
                zone_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DnsZoneTransferParams"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        success?: boolean;
                        error?: string;
                    };
                };
            };
        };
    };
    getDNSForSite: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The site ID */
                site_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DnsZone"][];
                };
            };
        };
    };
    configureDNSForSite: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The site ID */
                site_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DnsZone"][];
                };
            };
        };
    };
    getEnvVars: {
        parameters: {
            query?: {
                /** @description Filter by deploy context */
                context?: "all" | "dev" | "dev-server" | "branch-deploy" | "deploy-preview" | "production";
                /** @description Filter by scope */
                scope?: "builds" | "functions" | "runtime" | "post_processing";
                /** @description If specified, only return environment variables set on this site */
                site_id?: string;
            };
            header?: never;
            path: {
                /** @description Scope response to account_id */
                account_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EnvVar"][];
                };
            };
            /** @description Unauthorized (not logged in; not on team; not allowed to create environment variables) */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found (site_id not found) */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    createEnvVars: {
        parameters: {
            query?: {
                /** @description Optional parameter that identifies where the request is coming from (added originally for telemetry purposes) */
                client?: string;
                /** @description If provided, create an environment variable on the site level, not the account level */
                site_id?: string;
            };
            header?: never;
            path: {
                /** @description Scope response to account_id */
                account_id: string;
            };
            cookie?: never;
        };
        /** @description The array of environment variables to create */
        requestBody: {
            content: {
                "application/json": components["schemas"]["EnvVar"][];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EnvVar"][];
                };
            };
            /** @description Bad Request (request structured incorrectly) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized (not logged in; not on team; not allowed to create environment variables) */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found (site_id not found) */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Conflict (key already exists on site/team) */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unprocessable Entity (catchall for other error types) */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getSiteEnvVars: {
        parameters: {
            query?: {
                /** @description Filter by deploy context */
                context?: "all" | "dev" | "dev-server" | "branch-deploy" | "deploy-preview" | "production";
                /** @description Filter by scope */
                scope?: "builds" | "functions" | "runtime" | "post_processing";
            };
            header?: never;
            path: {
                /** @description Scope response to site_id */
                site_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EnvVar"][];
                };
            };
            /** @description Unauthorized (not logged in; not on team; not allowed to create environment variables) */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found (site_id not found) */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEnvVar: {
        parameters: {
            query?: {
                /** @description If provided, return the environment variable for a specific site (no merging is performed) */
                site_id?: string;
            };
            header?: never;
            path: {
                /** @description Scope response to account_id */
                account_id: string;
                /** @description The environment variable key (case-sensitive) */
                env_key: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EnvVar"];
                };
            };
            /** @description Unauthorized (not logged in; not on team; not allowed to create environment variables) */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found (no environment variable found for the account or site) */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateEnvVar: {
        parameters: {
            query: {
                /** @description Should this env var be treated as a write-only secret */
                is_secret?: boolean;
                /** @description The existing or new name of the key, if you wish to rename it (case-sensitive) */
                key: string;
                /** @description The scopes that this environment variable is set to (Pro plans and above) */
                scopes: ("builds" | "functions" | "runtime" | "post_processing")[];
                /** @description If provided, update an environment variable set on this site */
                site_id?: string;
                /** @description An array of EnvVarValue objects containing values and contexts */
                values: components["schemas"]["EnvVarValue"][];
            };
            header?: never;
            path: {
                /** @description Scope response to account_id */
                account_id: string;
                /** @description The existing environment variable key name (case-sensitive) */
                env_key: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EnvVar"];
                };
            };
            /** @description Unauthorized (not logged in; not on team; not allowed to update environment variables) */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found (site_id or env var not found) */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteEnvVar: {
        parameters: {
            query?: {
                /** @description If provided, delete the environment variable from this site */
                site_id?: string;
            };
            header?: never;
            path: {
                /** @description Scope response to account_id */
                account_id: string;
                /** @description The environment variable key (case-sensitive) */
                env_key: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No Content (success) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized (not logged in; not on team; not allowed to delete environment variables) */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found (site_id or env var not found) */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    setEnvVarValue: {
        parameters: {
            query?: {
                /** @description If provided, update an environment variable set on this site */
                site_id?: string;
            };
            header?: never;
            path: {
                /** @description Scope response to account_id */
                account_id: string;
                /** @description The existing environment variable key name (case-sensitive) */
                env_key: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EnvVarSet"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EnvVar"];
                };
            };
            /** @description Unauthorized (not logged in; not on team; not allowed to update environment variables) */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found (site_id or env var not found) */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteEnvVarValue: {
        parameters: {
            query?: {
                /** @description If provided, delete the value from an environment variable on this site */
                site_id?: string;
            };
            header?: never;
            path: {
                /** @description Scope response to account_id */
                account_id: string;
                /** @description The environment variable key name (case-sensitive) */
                env_key: string;
                /** @description The environment variable value's ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No Content (success) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized (not logged in; not on team; not allowed to delete environment variables) */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found (site_id or id not found) */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    listSiteFiles: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The site ID */
                site_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SiteFile"][];
                };
            };
        };
    };
    getSiteFileByPathName: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The file path of the site */
                file_path: string;
                /** @description The site ID */
                site_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    listSiteForms: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID or subdomain of the site */
                site_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Form"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getSiteForm: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID or name of the form */
                form_id: string;
                /** @description The ID or subdomain of the site */
                site_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Form"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteSiteForm: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID or name of the form */
                form_id: string;
                /** @description The ID or subdomain of the site */
                site_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    uploadDeployFunction: {
        parameters: {
            query?: {
                /** @description The runtime of the function */
                runtime?: string;
            };
            header?: never;
            path: {
                /** @description The ID of the deploy */
                deploy_id: string;
                /** @description The name of the function */
                name: string;
            };
            cookie?: never;
        };
        /** @description file */
        requestBody: {
            content: {
                "application/json": string;
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        name?: string;
                    };
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    listHooksBySiteId: {
        parameters: {
            query: {
                /** @description The name of the hook event */
                event?: string;
                /** @description form_id */
                form_id?: string;
                /** @description site_id */
                site_id: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OutgoingHook"][];
                };
            };
        };
    };
    createHookBySiteId: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateOutgoingHook"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OutgoingHook"];
                };
            };
            /** @description Associated form with given form_id or form_name not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid parameters */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getHook: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The hook ID */
                hook_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OutgoingHook"];
                };
            };
        };
    };
    updateHook: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The hook ID */
                hook_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateOutgoingHook"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OutgoingHook"];
                };
            };
            /** @description Associated form with given form_id not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid parameters */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteHook: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The hook ID */
                hook_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    listHookTypes: {
        parameters: {
            query?: {
                /** @description site_id */
                site_id?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OutgoingHookType"][];
                };
            };
        };
    };
    enableHook: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The hook ID */
                hook_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OutgoingHook"];
                };
            };
        };
    };
    getSiteMetadata: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The site ID */
                site_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
        };
    };
    updateSiteMetadata: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The site ID */
                site_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": Record<string, never>;
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
        };
    };
    showTicket: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ticket ID */
                ticket_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OAuth_Ticket"];
                };
            };
            /** @description OAuth ticket not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    createTicket: {
        parameters: {
            query?: {
                /** @description The UID of the OAuth application */
                client_id?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OAuth_Ticket"];
                };
            };
            /** @description OAuth application not found */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    authorizeWithTicket: {
        parameters: {
            query?: {
                /** @description Whether token should allow API access to currently authenticated SAML protected account */
                grant_saml?: boolean;
            };
            header?: never;
            path: {
                /** @description The ticket ID */
                ticket_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Authorized */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description OAuth ticket not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    exchangeTicket: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ticket ID */
                ticket_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Doorkeeper_AccessToken"];
                };
            };
            /** @description OAuth ticket not authorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description OAuth ticket not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getOrganizationReceipts: {
        parameters: {
            query?: {
                /** @description The page number */
                page?: number;
                /** @description Number to show per page */
                per_page?: number;
            };
            header?: never;
            path: {
                /** @description The organization ID or slug */
                organization_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Receipt"][];
                };
            };
            /** @description Only owners are allowed to view receipts */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        code?: string;
                        message?: string;
                    };
                };
            };
        };
    };
    getOrganizationReceipt: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The receipt ID */
                id: string;
                /** @description The organization ID or slug */
                organization_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a specific receipt for an organization, either HTML or PDF format */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Only owners are allowed to view receipts */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        code?: string;
                        message?: string;
                    };
                };
            };
        };
    };
    listOrganizationsForUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Organization"][];
                };
            };
        };
    };
    getOrganization: {
        parameters: {
            query: {
                /** @description The organization ID */
                id: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Organization"];
                };
            };
        };
    };
    updateOrganization: {
        parameters: {
            query: {
                /** @description The organization ID */
                id: string;
                /** @description The name of the organization */
                name?: string;
                /** @description The slug of the organization */
                slug?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Organization"][];
                };
            };
        };
    };
    createOrganizationLogo: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The organization ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": string;
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        url?: string;
                    };
                };
            };
            /** @description Only owners are allowed to upload logo */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        code?: string;
                        message?: string;
                    };
                };
            };
        };
    };
    deleteOrganizationLogo: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The organization ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Only owners are allowed to remove the logo */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getOrganizationAccounts: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The organization ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrganizationAccount"][];
                };
            };
        };
    };
    getOrganizationInvoices: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The organization ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Billing_ZuoraInvoice"][];
                };
            };
        };
    };
    getOrganizationInvoice: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The organization ID */
                id: string;
                /** @description The invoice ID */
                invoice_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    getOrganizationClientToken: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The organization ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        token?: string;
                        signature?: string;
                        uri?: string;
                        payment_gateway_id?: string;
                    };
                };
            };
        };
    };
    createOrganizationPayment: {
        parameters: {
            query: {
                /** @description The payment method data */
                data?: {
                    name?: string;
                    last4?: string;
                    card_type?: string;
                };
                /** @description Boolean to allow enterprise accounts to change payment type from ACH */
                enterprise_exception?: boolean;
                /** @description The type of payment method */
                type: "card";
                /** @description The Zuora payment method ID */
                zuora_id?: string;
            };
            header?: never;
            path: {
                /** @description The organization ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaymentMethod"];
                };
            };
        };
    };
    createServiceInstance: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The slug of the service */
                addon: string;
                /** @description The ID of the site */
                site_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ServiceInstance"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    showServiceInstance: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The slug of the service */
                addon: string;
                /** @description The ID of the service instance */
                instance_id: string;
                /** @description The ID of the site */
                site_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ServiceInstance"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateServiceInstance: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The slug of the service */
                addon: string;
                /** @description The ID of the service instance */
                instance_id: string;
                /** @description The ID of the site */
                site_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteServiceInstance: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The slug of the service */
                addon: string;
                /** @description The ID of the service instance */
                instance_id: string;
                /** @description The ID of the site */
                site_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    listServiceInstancesForSite: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the site */
                site_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ServiceInstance"][];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getServices: {
        parameters: {
            query?: {
                /** @description search */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Service"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    showService: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The slug of the service */
                addonName: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Service"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    showServiceManifest: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The name of the service */
                addonName: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    listSites: {
        parameters: {
            query?: {
                /** @description filter */
                filter?: "all" | "owner" | "guest";
                /** @description include_favorites */
                include_favorites?: boolean;
                /** @description label_ids */
                label_ids?: string[];
                /** @description name */
                name?: string;
                /** @description page */
                page?: number;
                /** @description per_page */
                per_page?: number;
                /** @description sort_by */
                sort_by?: "created_at" | "updated_at" | "alphabetical" | "published_at";
                /** @description When provided, returns only SSO/password protected / unprotected sites */
                visibility?: "protected" | "public";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Site"][];
                };
            };
        };
    };
    createSite: {
        parameters: {
            query?: {
                /** @description configure_dns */
                configure_dns?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Site"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Site"];
                };
            };
        };
    };
    getSite: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the site */
                site_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Site"];
                };
            };
        };
    };
    deleteSite: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the site */
                site_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateSite: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the site */
                site_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Site"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Site"];
                };
            };
        };
    };
    listSiteDeployedBranches: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the site */
                site_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>[];
                };
            };
        };
    };
    rollbackSiteDeploy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the site */
                site_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Site not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    unlinkSiteRepo: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the site */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Site"];
                };
            };
            /** @description Site not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getSimplePublicSite: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the site */
                site_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Site_Simple"];
                };
            };
        };
    };
    listSiteSnippets: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The site ID */
                site_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Snippet"][];
                };
            };
        };
    };
    createSiteSnippet: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The site ID */
                site_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Snippet"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Snippet"];
                };
            };
        };
    };
    getSiteSnippet: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The site ID */
                site_id: string;
                /** @description The snippet ID */
                snippet_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Snippet"];
                };
            };
        };
    };
    updateSiteSnippet: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The site ID */
                site_id: string;
                /** @description The snippet ID */
                snippet_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Snippet"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Snippet"];
                };
            };
        };
    };
    deleteSiteSnippet: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The site ID */
                site_id: string;
                /** @description The snippet ID */
                snippet_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    showSiteTLSCertificate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the site */
                site_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SniCertificate"];
                };
            };
        };
    };
    provisionSiteTLSCertificate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the site */
                site_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CertificateInfo"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SniCertificate"];
                };
            };
        };
    };
    getAllCertificates: {
        parameters: {
            query: {
                /** @description Domain that certificates are being requested for. */
                domain: string;
            };
            header?: never;
            path: {
                /** @description The ID of the site */
                site_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SniCertificate"][];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    listFormSubmissions: {
        parameters: {
            query?: {
                /** @description Number of per_page to skip when returning records */
                page?: string;
                /** @description Number of records to return */
                per_page?: string;
            };
            header?: never;
            path: {
                /** @description The form ID */
                form_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FormSubmission"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    listSiteSubmissions: {
        parameters: {
            query?: {
                /** @description Number of per_page to skip when returning records */
                page?: string;
                /** @description Number of records to return */
                per_page?: string;
            };
            header?: never;
            path: {
                /** @description The site ID */
                site_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FormSubmission"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    listFormSubmission: {
        parameters: {
            query?: {
                /** @description Number of per_page to skip when returning records */
                page?: string;
                /** @description Number of records to return */
                per_page?: string;
            };
            header?: never;
            path: {
                /** @description The submission ID */
                submission_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FormSubmission"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteSubmission: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The submission ID */
                submission_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getSplitTests: {
        parameters: {
            query?: {
                /** @description Number of per_page to skip when returning records */
                page?: string;
                /** @description Number of records to return */
                per_page?: string;
            };
            header?: never;
            path: {
                /** @description The site ID */
                site_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SplitTest"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    createSplitTest: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the site */
                site_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    branch_tests?: Record<string, never>;
                };
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SplitTest"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getSplitTest: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID or subdomain of the site */
                site_id: string;
                /** @description The ID of the split test */
                split_test_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SplitTest"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateSplitTest: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID or subdomain of the site */
                site_id: string;
                /** @description The ID of the split test */
                split_test_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    branch_tests?: Record<string, never>;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SplitTest"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    disableSplitTest: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID or subdomain of the site */
                site_id: string;
                /** @description The ID of the split test */
                split_test_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Disabled */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    enableSplitTest: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID or subdomain of the site */
                site_id: string;
                /** @description The ID of the split test */
                split_test_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Enabled */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getCurrentUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
        };
    };
    getDirectory: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the organization */
                organization_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        name?: string;
                        directory_type?: string;
                        scim_configured?: boolean;
                        status?: string;
                    };
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteDirectory: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the organization */
                organization_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteDirectorySync: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the organization */
                organization_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
//# sourceMappingURL=bitballoon.d.ts.map