import { jsx, Fragment } from "react/jsx-runtime";
import "@netlify/ui";
import "react";
import "../Button/Button.js";
import "../Card/main.js";
import "../vendor/Card/Card.js";
import "../CodeBlock/highlight.js";
import "../Dropdown/Dropdown.js";
import "@netlify/sdk--ui-core";
import "../../NetlifySDKProvider.js";
import { Checkbox } from "../Form/Fields/Checkbox.js";
import { FormField } from "../Form/Fields/FormField.js";
import { FormFieldSecret } from "../Form/Fields/FormFieldSecret.js";
import "../vendor/FormField.js";
import "../vendor/Select/Select.js";
import { Form } from "../Form/Form.js";
import "../Link/Link.js";
import "../../index.esm-B8tPjtbx.js";
import "../SurfaceRouter/SurfaceRouterContext.js";
import { getZodField, getZodFieldTypeName } from "./zod-helpers.js";
const SmartForm = ({
  defaultValues,
  onSubmit,
  schema,
  fieldsMeta
}) => {
  return /* @__PURE__ */ jsx(Form, { defaultValues, onSubmit, schema, children: Object.entries(schema.shape).map(
    ([key, value], idx) => {
      const zodField = getZodField(value);
      const fieldType = getZodFieldTypeName(zodField);
      if (fieldType === "ZodObject") {
        let nestedFieldsMeta = void 0;
        if (key in fieldsMeta) {
          nestedFieldsMeta = fieldsMeta[key];
        }
        return /* @__PURE__ */ jsx(
          ZodFormFields,
          {
            name: key,
            zodFieldValue: value,
            fieldsMeta: nestedFieldsMeta
          },
          `${idx.toString()}:${key}`
        );
      } else {
        const fieldMeta = fieldsMeta[key];
        return /* @__PURE__ */ jsx(
          ZodFormField,
          {
            name: key,
            zodFieldType: fieldType,
            fieldMeta
          },
          `${idx.toString()}:${key}`
        );
      }
    }
  ) });
};
const ZodFormField = ({
  name,
  zodFieldType,
  fieldMeta
}) => {
  const match = name.match(`(.+)\\.(.+)`);
  const fallbackLabelName = (match == null ? void 0 : match[2]) ?? name;
  const fallbackLabel = fallbackLabelName.charAt(0).toUpperCase() + fallbackLabelName.slice(1);
  if (zodFieldType === "ZodString" && (fieldMeta == null ? void 0 : fieldMeta.secret)) {
    return /* @__PURE__ */ jsx(
      FormFieldSecret,
      {
        name,
        label: fieldMeta.label,
        helpText: fieldMeta.helpText
      }
    );
  }
  if (zodFieldType === "ZodString" || zodFieldType === "ZodNumber") {
    return /* @__PURE__ */ jsx(
      FormField,
      {
        name,
        label: (fieldMeta == null ? void 0 : fieldMeta.label) ?? fallbackLabel,
        placeholder: fieldMeta == null ? void 0 : fieldMeta.placeholder,
        helpText: fieldMeta == null ? void 0 : fieldMeta.helpText,
        type: zodFieldType === "ZodNumber" ? "number" : "text"
      }
    );
  }
  if (zodFieldType === "ZodBoolean") {
    return /* @__PURE__ */ jsx(
      Checkbox,
      {
        name,
        label: (fieldMeta == null ? void 0 : fieldMeta.label) ?? fallbackLabel,
        helpText: fieldMeta == null ? void 0 : fieldMeta.helpText
      }
    );
  }
  console.error(
    `FormFieldsFromSchema: Not implemented field type: ${zodFieldType}`
  );
  return null;
};
const ZodFormFields = ({
  name,
  zodFieldValue,
  fieldsMeta
}) => {
  const zodField = getZodField(zodFieldValue);
  const fieldType = getZodFieldTypeName(zodField);
  if (fieldType === "ZodObject") {
    return /* @__PURE__ */ jsx(Fragment, { children: Object.entries(
      zodFieldValue.shape
    ).map(([key, value], idx) => {
      const zodField2 = getZodField(value);
      const fieldType2 = getZodFieldTypeName(zodField2);
      if (fieldType2 === "ZodObject") {
        let nestedFieldsMeta = void 0;
        if (fieldsMeta !== void 0 && key in fieldsMeta && Object.prototype.hasOwnProperty.call(fieldsMeta, key)) {
          nestedFieldsMeta = fieldsMeta[key];
        }
        return /* @__PURE__ */ jsx(
          ZodFormFields,
          {
            name: `${name}.${key}`,
            zodFieldValue: value,
            fieldsMeta: nestedFieldsMeta
          },
          `${idx.toString()}:${key}`
        );
      } else {
        const fieldMeta = fieldsMeta == null ? void 0 : fieldsMeta[key];
        return /* @__PURE__ */ jsx(
          ZodFormField,
          {
            name: `${name}.${key}`,
            zodFieldType: fieldType2,
            fieldMeta
          },
          `${idx.toString()}:${key}`
        );
      }
    }) });
  }
  console.error(
    `FormFieldsFromSchema: Not implemented field type: ${fieldType}`
  );
  return null;
};
export {
  SmartForm
};
//# sourceMappingURL=SmartForm.js.map
