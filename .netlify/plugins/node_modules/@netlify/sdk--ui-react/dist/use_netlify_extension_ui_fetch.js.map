{"version":3,"file":"use_netlify_extension_ui_fetch.js","sources":["../src/use_netlify_extension_ui_fetch.ts"],"sourcesContent":["import { useNetlifySDK } from \"./use_netlify_sdk.js\";\n\nexport type Fetch = (\n  input: RequestInfo | URL,\n  init?: RequestInit | undefined,\n) => Promise<Response>;\n\ntype CreateNetlifyExtensionUIFetchOptions = {\n  fetch?: Fetch | undefined;\n\n  configurationId?: string | null | undefined;\n  dataLayerId?: string | null | undefined;\n  extension: {\n    id: string;\n    slug: string;\n  };\n  netlifyToken?: string | null | undefined;\n  providerToken?: string | null | undefined;\n  providerTokens?:\n    | {\n        externalId: string;\n        token: string;\n        connectionId: string;\n      }[]\n    | undefined;\n  siteId?: string | null | undefined;\n  teamId?: string | null | undefined;\n  user: {\n    id: string | null;\n  };\n};\n\nconst createNetlifyExtensionUIFetch = ({\n  fetch = globalThis.fetch,\n  ...options\n}: CreateNetlifyExtensionUIFetchOptions): Fetch => {\n  return (input, init) => {\n    const headers = new Headers(init?.headers);\n\n    headers.set(\"Nf-UIExt-Extension-Id\", options.extension.id);\n    headers.set(\"Nf-UIExt-Extension-Slug\", options.extension.slug);\n\n    if (options.netlifyToken != null && options.netlifyToken !== \"\") {\n      headers.set(\"Nf-UIExt-Netlify-Token\", options.netlifyToken);\n    }\n    if (options.providerToken != null && options.providerToken !== \"\") {\n      headers.set(\"Nf-UIExt-Provider-Token\", options.providerToken);\n    }\n    headers.set(\n      \"Nf-UIExt-Provider-Tokens\",\n      JSON.stringify(options.providerTokens ?? []),\n    );\n\n    if (options.configurationId != null && options.configurationId !== \"\") {\n      headers.set(\"Nf-UIExt-Configuration-Id\", options.configurationId);\n    }\n\n    if (options.dataLayerId != null && options.dataLayerId !== \"\") {\n      headers.set(\"Nf-UIExt-Datalayer-Id\", options.dataLayerId);\n    }\n\n    if (options.siteId != null && options.siteId !== \"\") {\n      headers.set(\"Nf-UIExt-Site-Id\", options.siteId);\n    }\n\n    if (options.teamId != null && options.teamId !== \"\") {\n      headers.set(\"Nf-UIExt-Team-Id\", options.teamId);\n    }\n\n    if (options.user.id != null && options.user.id !== \"\") {\n      headers.set(\"Nf-UIExt-User-Id\", options.user.id);\n    }\n\n    return fetch(input, {\n      ...init,\n      headers,\n    });\n  };\n};\n\n/**\n * `useNetlifyExtensionUIFetch` returns a `fetch`-compatible function that automatically attaches\n * authentication data to requests. Use it to perform requests to [endpoints](/sdk/endpoints/overview/).\n *\n * @returns A fetch function.\n * @example\n * ```tsx\n * import { useNetlifyExtensionUIFetch } from \"@netlify/sdk/react\";\n * import { useEffect, useState } from \"react\";\n *\n * const MyComponent = () => {\n *   const fetch = useNetlifyExtensionUIFetch();\n *   const [data, setData] = useState(null);\n *\n *   useEffect(() => {\n *     (async () => {\n *       const res = await fetch(\"/.netlify/functions/my-endpoint\");\n *       if (res.ok) {\n *         setData(await res.json());\n *       }\n *     })();\n *   }, [fetch, setData]);\n *\n *   if (data === null) {\n *     return <div>No data found.</div>;\n *   }\n * };\n * ```\n */\nexport const useNetlifyExtensionUIFetch = (): Fetch => {\n  const sdk = useNetlifySDK();\n\n  return (input, init) => {\n    // Create a fresh fetch function each time we invoke fetch to make sure we have the latest\n    // values from the SDK context\n    const fetch = createNetlifyExtensionUIFetch({\n      configurationId: sdk.context.configurationId,\n      dataLayerId: sdk.context.dataLayerId,\n      extension: sdk.extension,\n      netlifyToken: sdk.context.auth.netlifyToken,\n      providerToken: sdk.context.auth.providerToken,\n      providerTokens: sdk.context.auth.providerTokens,\n      siteId: sdk.context.siteId,\n      teamId: sdk.context.teamId,\n      user: sdk.context.user,\n    });\n    return fetch(input, init);\n  };\n};\n"],"names":[],"mappings":";AAgCA,MAAM,gCAAgC,CAAC;AAAA,EACrC,QAAQ,WAAW;AAAA,EACnB,GAAG;AACL,MAAmD;AACjD,SAAO,CAAC,OAAO,SAAS;AACtB,UAAM,UAAU,IAAI,QAAQ,6BAAM,OAAO;AAEzC,YAAQ,IAAI,yBAAyB,QAAQ,UAAU,EAAE;AACzD,YAAQ,IAAI,2BAA2B,QAAQ,UAAU,IAAI;AAE7D,QAAI,QAAQ,gBAAgB,QAAQ,QAAQ,iBAAiB,IAAI;AAC/D,cAAQ,IAAI,0BAA0B,QAAQ,YAAY;AAAA,IAC5D;AACA,QAAI,QAAQ,iBAAiB,QAAQ,QAAQ,kBAAkB,IAAI;AACjE,cAAQ,IAAI,2BAA2B,QAAQ,aAAa;AAAA,IAC9D;AACA,YAAQ;AAAA,MACN;AAAA,MACA,KAAK,UAAU,QAAQ,kBAAkB,CAAA,CAAE;AAAA,IAAA;AAG7C,QAAI,QAAQ,mBAAmB,QAAQ,QAAQ,oBAAoB,IAAI;AACrE,cAAQ,IAAI,6BAA6B,QAAQ,eAAe;AAAA,IAClE;AAEA,QAAI,QAAQ,eAAe,QAAQ,QAAQ,gBAAgB,IAAI;AAC7D,cAAQ,IAAI,yBAAyB,QAAQ,WAAW;AAAA,IAC1D;AAEA,QAAI,QAAQ,UAAU,QAAQ,QAAQ,WAAW,IAAI;AACnD,cAAQ,IAAI,oBAAoB,QAAQ,MAAM;AAAA,IAChD;AAEA,QAAI,QAAQ,UAAU,QAAQ,QAAQ,WAAW,IAAI;AACnD,cAAQ,IAAI,oBAAoB,QAAQ,MAAM;AAAA,IAChD;AAEA,QAAI,QAAQ,KAAK,MAAM,QAAQ,QAAQ,KAAK,OAAO,IAAI;AACrD,cAAQ,IAAI,oBAAoB,QAAQ,KAAK,EAAE;AAAA,IACjD;AAEA,WAAO,MAAM,OAAO;AAAA,MAClB,GAAG;AAAA,MACH;AAAA,IAAA,CACD;AAAA,EACH;AACF;AA+BO,MAAM,6BAA6B,MAAa;AACrD,QAAM,MAAM,cAAA;AAEZ,SAAO,CAAC,OAAO,SAAS;AAGtB,UAAM,QAAQ,8BAA8B;AAAA,MAC1C,iBAAiB,IAAI,QAAQ;AAAA,MAC7B,aAAa,IAAI,QAAQ;AAAA,MACzB,WAAW,IAAI;AAAA,MACf,cAAc,IAAI,QAAQ,KAAK;AAAA,MAC/B,eAAe,IAAI,QAAQ,KAAK;AAAA,MAChC,gBAAgB,IAAI,QAAQ,KAAK;AAAA,MACjC,QAAQ,IAAI,QAAQ;AAAA,MACpB,QAAQ,IAAI,QAAQ;AAAA,MACpB,MAAM,IAAI,QAAQ;AAAA,IAAA,CACnB;AACD,WAAO,MAAM,OAAO,IAAI;AAAA,EAC1B;AACF;"}