import open from "open";
import { ntliLog } from "../../utils.js";
export async function openExtensionDevUrl(url, slug) {
    const appOrigin = getAppOrigin();
    const extensionConfigURL = new URL(`${appOrigin}/extension-ui/dev`);
    extensionConfigURL.search = new URLSearchParams({
        slug,
        url,
    }).toString();
    ntliLog(`Opening Extension UI in the Netlify App at ${url.toString()}`);
    // open( .. { wait: true } causes the open subprocess to hang around forever, creating a memory leak of about 20MB per code save..
    // seems to be related to https://github.com/sindresorhus/open/issues/197
    open(url.toString());
}
function getAppOrigin() {
    const productionAppOrigin = "https://app.netlify.com";
    if (!process.env.UNSTABLE__DEV_NETLIFY_APP_URL?.startsWith?.("http")) {
        return productionAppOrigin;
    }
    try {
        return new URL(process.env.UNSTABLE__DEV_NETLIFY_APP_URL)?.origin;
    }
    catch (e) {
        console.error("error parsing UNSTABLE__DEV_NETLIFY_APP_URL", e);
    }
    return productionAppOrigin;
}
//# sourceMappingURL=open_extension_dev_url.js.map