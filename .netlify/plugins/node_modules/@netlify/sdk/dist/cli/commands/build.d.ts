import { type ExtensionConfiguration } from "../../extension_configuration/main.js";
export declare const getDefaultEsbuildConfig: (config: ExtensionConfiguration) => {
    inject: string[];
} | {
    inject?: undefined;
};
export type BuildContext = {
    /**
     * An AbortSignal, used to cancel the build.
     */
    signal: AbortSignal;
};
export type BuildOpts = {
    /** Build the buildtime component of the extension */
    buildtime: boolean;
    /** Build the serverless component of the extension */
    site: boolean;
    /**
     * The mode used to build the extension. Analogous to the `netlify` CLI's build modes.
     *
     * - `build` is a single-build mode; the extension is built once and the process exits.
     * - `dev` is continuous (watch) mode where assets are rebuilt as they change. In addition to
     *   rebuilding assets continuously, serves assets via a development server, etc.
     */
    mode: "build" | "dev";
    /** The directory to build to */
    outDir?: string | undefined;
    /** Preview URL used test the extension UI */
    previewUrl?: string | undefined;
    /**
     * The user's current working directory. All commands are executed and any paths are calculated
     * relative to this directory.
     */
    cwd: string;
    /** Open the extension UI local dev server preview in the Netlify UI */
    open?: boolean | undefined;
    /** Override the extension slug to be used in the dev preview */
    slug?: string | undefined;
};
export declare const build: ({ signal }: BuildContext, opts: BuildOpts) => Promise<false | undefined>;
export declare const esbuildPluginSeenNodeModules: ({ markAsExternal, }: {
    markAsExternal?: boolean;
}) => {
    nodeModulesImports: Set<string>;
    plugin: {
        name: string;
        setup(build: import("esbuild").PluginBuild): void;
    };
};
//# sourceMappingURL=build.d.ts.map