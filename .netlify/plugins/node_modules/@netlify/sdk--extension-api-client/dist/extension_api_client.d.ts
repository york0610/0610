import { type Wretch } from "wretch";
import { NetlifyClient } from "./netlify_api_client.js";
/**
 * @internal
 */
export declare class AlreadyEnabledError extends Error {
    constructor();
}
/**
 * @internal
 */
export type ExtensionResponse<Config> = {
    id?: string | undefined;
    config: Config;
    has_build_hook_enabled: boolean;
};
/**
 * @internal
 */
export type ConfigurationResponse<Config> = {
    id: string;
    config: Config;
    createdAt: string;
    updatedAt: string;
    teamInstallationId: string;
    siteId?: string | undefined;
    dataLayerId?: string | undefined;
    configurationType: string;
    sourceUrl?: string | undefined;
    name?: string | undefined;
    prefix?: string | undefined;
};
/**
 * @internal
 */
export type NetlifyTokenIssuer = "jigsaw" | "buildbot";
/**
 * @internal
 */
export type ExtensionClientOptions = {
    netlifyApiUrl?: string | undefined;
    jigsawUrl?: string | undefined;
    netlifyTokenIssuer?: NetlifyTokenIssuer | undefined;
};
/**
 * @internal
 */
export type NetlifyExtensionClientConstructorParams = ConstructorParameters<typeof NetlifyExtensionClient>;
/**
 *
 * The `NetlifyExtensionClient` provides different methods to interact with both the Netlify API and
 * the Extension API.
 *
 * When you install the Netlify SDK, you have access to the TypeScript definitions directly in the
 * `@netlify/sdk` package. You can browse through the definition files individually or review the
 * type definition inline, depending on your code editor.
 *
 * @example
 * ```ts
 * import { withNetlifySDKContext } from "@netlify/sdk/ui/functions";
 *
 * export default withNetlifySDKContext((req, context) => {
 *   const { accountId, auth, client } = context;
 *
 *   const accountInfo = await client.getAccount(accountId);
 *
 *   // Using the userâ€™s OAuth connection to make a request to a third-party API
 *   await fetch("https://api.example.com/project", {
 *     headers: {
 *       Authorization: `Bearer ${auth.providerToken}`,
 *     },
 *     method: "POST",
 *     body: JSON.stringify({
 *       name: `project_${accountInfo.name}`,
 *     }),
 *   });
 *
 *   return Response.json({});
 * });
 * ```
 */
export declare class NetlifyExtensionClient<SiteConfiguration, TeamConfiguration> extends NetlifyClient {
    netlifyToken?: string | undefined;
    extension: string;
    extensionApi: Wretch;
    teamConfigId?: string | undefined;
    siteConfigId?: string | undefined;
    constructor(netlifyToken: string, extension: string, { jigsawUrl, netlifyApiUrl, netlifyTokenIssuer, }?: ExtensionClientOptions);
    /**
     * Installs this extension for a team.
     */
    installExtensionOnTeam: (teamId: string) => Promise<{
        token: string;
    }>;
    /**
     * Uninstalls this extension for a team, which also deletes the configuration.
     */
    uninstallExtensionOnTeam: (teamId: string) => Promise<import("wretch").WretchResponse>;
    /**
     * Upserts a configuration object of type 'team' for the extension installation
     */
    upsertTeamConfiguration: (teamId: string, config: TeamConfiguration) => Promise<import("wretch").WretchResponse>;
    /**
     * Creates a team configuration for an extension installation.
     */
    createTeamConfiguration: (teamId: string, config: TeamConfiguration) => Promise<import("wretch").WretchResponse>;
    /**
     * Updates the extension configuration for a team.
     */
    updateTeamConfiguration: (teamId: string, config: TeamConfiguration) => Promise<import("wretch").WretchResponse>;
    /**
     * Returns the extension configuration for a team for the current extension.
     */
    getTeamConfiguration: (teamId: string) => Promise<ConfigurationResponse<TeamConfiguration> | null>;
    /**
     * Deletes a team configuration for uninstalling the extension.
     */
    deleteTeamConfiguration: (teamId: string) => Promise<import("wretch").WretchResponse>;
    /**
     * Upserts a configuration object of type 'site' for the extension installation
     */
    upsertSiteConfiguration: (teamId: string, siteId: string, config: SiteConfiguration) => Promise<import("wretch").WretchResponse>;
    /**
     * Creates a site configuration for an extension installation.
     */
    createSiteConfiguration: (teamId: string, siteId: string, config: SiteConfiguration) => Promise<import("wretch").WretchResponse>;
    /**
     * Updates the extension configuration for a site.
     */
    updateSiteConfiguration: (teamId: string, siteId: string, config: SiteConfiguration) => Promise<import("wretch").WretchResponse>;
    /**
     * Returns the extension configuration for a site for the current extension.
     */
    getSiteConfiguration: (teamId: string, siteId: string) => Promise<ConfigurationResponse<SiteConfiguration> | null>;
    /**
     * List all site configurations for the specified team.
     */
    listSiteConfigurations: (teamId: string) => Promise<ConfigurationResponse<SiteConfiguration>[]>;
    /**
     * Deletes a site configuration for uninstalling the extension.
     */
    deleteSiteConfiguration: (teamId: string, siteId: string) => Promise<import("wretch").WretchResponse>;
}
//# sourceMappingURL=extension_api_client.d.ts.map