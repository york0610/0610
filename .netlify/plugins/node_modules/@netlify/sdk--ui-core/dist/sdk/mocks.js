import fc from "fast-check";
import { SurfaceArbitrary, UIExtensionHostInitializeEventDataContextArbitrary, UIExtensionHostInitializeEventDataExtensionArbitrary, } from "../message_schema/mocks.js";
import { parseNonUndefined } from "../utils/parsers.js";
import {} from "./sdk.js";
export const NetlifySDKContextArbitrary = UIExtensionHostInitializeEventDataContextArbitrary;
export const NetlifySDKExtensionArbitrary = UIExtensionHostInitializeEventDataExtensionArbitrary;
export const NetlifySDKSurfaceArbitrary = fc.record({
    is: fc.func(fc.boolean()),
    name: SurfaceArbitrary,
});
export const NetlifySDKArbitrary = fc.record({
    listen: fc.constant(() => () => undefined),
    onChange: fc.constant(() => () => undefined),
    beginProviderAuthFlow: fc.constant(() => Promise.resolve(undefined)),
    disconnectProviderAuth: fc.constant(() => Promise.resolve(undefined)),
    context: NetlifySDKContextArbitrary,
    extension: NetlifySDKExtensionArbitrary,
    requestDimensions: fc.func(fc.constant(undefined)),
    requestTermination: fc.func(fc.constant(undefined)),
    surface: NetlifySDKSurfaceArbitrary,
});
export const createMockNetlifySDK = (overrides = {}) => {
    return Object.assign(Object.assign({}, parseNonUndefined(fc.sample(NetlifySDKArbitrary, 1)[0])), overrides);
};
//# sourceMappingURL=mocks.js.map