const tokens = {
  "spacing.0": "0",
  "spacing.1": "0.25rem",
  "spacing.2": "0.5rem",
  "spacing.3": "0.75rem",
  "spacing.4": "1rem",
  "spacing.5": "1.25rem",
  "spacing.6": "1.5rem",
  "spacing.7": "1.75rem",
  "spacing.8": "2rem",
  "spacing.9": "2.25rem",
  "spacing.10": "2.5rem",
  "spacing.11": "2.75rem",
  "spacing.12": "3rem",
  "spacing.14": "3.5rem",
  "spacing.16": "4rem",
  "spacing.20": "5rem",
  "spacing.24": "6rem",
  "spacing.26": "6.5rem",
  "spacing.28": "7rem",
  "spacing.32": "8rem",
  "spacing.36": "9rem",
  "spacing.40": "10rem",
  "spacing.42": "10.5rem",
  "spacing.44": "11rem",
  "spacing.48": "12rem",
  "spacing.52": "13rem",
  "spacing.56": "14rem",
  "spacing.60": "15rem",
  "spacing.64": "16rem",
  "spacing.66": "16.5rem",
  "spacing.72": "18rem",
  "spacing.80": "20rem",
  "spacing.96": "24rem",
  "spacing.106": "26.5rem",
  "spacing.170": "42.5rem",
  "spacing.px": "0.0625rem",
  "spacing.0.5": "0.125rem",
  "spacing.1.5": "0.375rem",
  "spacing.2.5": "0.625rem",
  "spacing.3.5": "0.875rem",
  "spacing.card": "1.5rem",
  "borderRadius.none": "0",
  "borderRadius.sm": "0.375rem",
  "borderRadius.lg": "0.5rem",
  "borderRadius.card": "0.5rem",
  "borderRadius.full": "624.9375rem",
  "borderWidth.0": "0",
  "borderWidth.2": "0.125rem",
  "borderWidth.4": "0.25rem",
  "borderWidth.8": "0.5rem",
  "borderWidth.DEFAULT": "0.0625rem",
  "fontSize.0": "0",
  "fontSize.xs": "0.75rem",
  "fontSize.sm": "0.875rem",
  "fontSize.base": "1rem",
  "fontSize.lg": "1.125rem",
  "fontSize.xl": "1.375rem",
  "fontSize.2xl": "2.25rem",
  "fontSize.3xl": "4rem",
  "fontSize.4xl": "6.5rem",
  "fontWeight.thin": 100,
  "fontWeight.light": 300,
  "fontWeight.regular": 400,
  "fontWeight.medium": 500,
  "fontWeight.semibold": 600,
  "fontWeight.bold": 700,
  "fontWeight.black": 900,
  "fontWeight.weight-inherit": "inherit",
  "lineHeight.3": "0.75rem",
  "lineHeight.4": "1rem",
  "lineHeight.5": "1.25rem",
  "lineHeight.6": "1.5rem",
  "lineHeight.7": "1.75rem",
  "lineHeight.8": "2rem",
  "lineHeight.9": "2.25rem",
  "lineHeight.10": "2.5rem",
  "lineHeight.none": "1",
  "lineHeight.tight": "1.25",
  "lineHeight.snug": "1.375",
  "lineHeight.normal": "1.5",
  "lineHeight.relaxed": "1.625",
  "lineHeight.chill": "1.75",
  "lineHeight.very-chill": "2",
  "lineHeight.asleep": "2.25",
  "screens.sm": "31.3125rem",
  "screens.until-md": "45rem",
  "screens.md": "45.0625rem",
  "screens.until-lg": "60rem",
  "screens.lg": "60.0625rem",
  "screens.until-xl": "70rem",
  "screens.xl": "70.0625rem"
};
const theme = (key) => tokens[key];
const selectStyles = (hasSearchStyles) => ({
  control: (provided, { menuIsOpen, isDisabled, isFocused }) => {
    const base = {
      backgroundColor: "rgb(var(--colorWhite))",
      border: `${theme("borderWidth.DEFAULT")} solid rgb(var(--colorGray))`,
      borderRadius: theme("borderRadius.sm"),
      color: "rgb(var(--colorBlack))",
      fontSize: theme("fontSize.base"),
      fontWeight: theme("fontWeight.medium"),
      lineHeight: theme("lineHeight.tight"),
      margin: "0",
      cursor: isDisabled ? "not-allowed" : "pointer",
      height: "auto",
      minHeight: "36px",
      pointerEvents: "auto",
      position: "relative",
      width: "100%",
      ".tw-dark &": {
        backgroundColor: "rgb(var(--colorBlack))",
        borderColor: "rgb(var(--colorGrayLight))",
        "&:hover": {
          borderColor: isDisabled ? "rgb(var(--colorGrayLight))" : "rgb(var(--colorGrayLighter))"
        }
      },
      "&:hover": {
        borderColor: isDisabled ? "rgb(var(--colorGray))" : "rgb(var(--colorGrayDarker))"
      }
    };
    const focused = isFocused ? {
      border: `${theme(
        "borderWidth.DEFAULT"
      )} solid rgb(var(--colorGrayDarkest))`,
      boxShadow: "0 0 0 2px rgb(var(--colorTeal)), 0 0 1px 0 rgb(var(--colorGrayDarkest))",
      outline: "2px solid transparent",
      transition: "0.2s ease",
      "&:hover": {
        borderColor: "rgb(var(--colorGrayDarkest))"
      },
      ".tw-dark &": {
        backgroundColor: "rgb(var(--colorBlack))",
        border: `${theme(
          "borderWidth.DEFAULT"
        )} solid rgb(var(--colorGrayLightest))`
      }
    } : null;
    const menuOpen = menuIsOpen ? {
      borderBottomLeftRadius: 0,
      borderBottomRightRadius: 0
    } : null;
    return { ...provided, ...base, ...focused, ...menuOpen };
  },
  valueContainer: (provided, { hasValue, isMulti }) => ({
    ...provided,
    textAlign: "left",
    minHeight: `calc(36px - ${theme("borderWidth.DEFAULT")} * 2)`,
    padding: hasSearchStyles ? `0 0 0 calc(${theme("spacing.4")} - (${theme(
      "borderWidth.DEFAULT"
    )} * 2))` : hasValue && isMulti ? ` 0 0 calc(${theme("spacing.1")} + ${theme(
      "borderWidth.DEFAULT"
    )}) +  0` : `0 0 0 calc(${theme("spacing.4")} - (${theme(
      "borderWidth.DEFAULT"
    )} * 2))`,
    ...hasSearchStyles && {
      marginLeft: `calc(${theme("spacing.6")} - (${theme(
        "borderWidth.DEFAULT"
      )} * 2))`
    }
  }),
  singleValue: (provided) => ({
    ...provided,
    marginRight: "0",
    paddingRight: theme("spacing.1"),
    ".tw-dark &": {
      color: "rgb(var(--colorWhite))"
    }
  }),
  input: (provided, { hasValue, isDisabled = false, isMulti }) => {
    const base = {
      input: {
        height: "auto",
        background: "none",
        pointerEvents: isDisabled ? "none" : "auto",
        "&:focus": {
          border: "0",
          boxShadow: "none"
        }
      },
      ".tw-dark &": {
        color: "rgb(var(--colorWhite))"
      }
    };
    const multi = isMulti ? {
      margin: hasValue ? `calc(${theme("spacing.2")} - ${theme(
        "borderWidth.DEFAULT"
      )}) 0 0 calc(${theme("spacing.2")} - ${theme(
        "borderWidth.DEFAULT"
      )})` : "0",
      padding: hasValue ? `0 ${theme("spacing.1")} 0` : `0 ${theme("spacing.1")} 0 calc(${theme("spacing.1")} - ${theme("borderWidth.DEFAULT")})`
    } : null;
    return { ...provided, ...base, ...multi };
  },
  placeholder: (provided) => ({
    ...provided,
    color: "rgb(var(--colorTextMuted))",
    textOverflow: "ellipsis",
    whiteSpace: "nowrap",
    overflow: "hidden",
    ...hasSearchStyles && { marginLeft: "2px" }
  }),
  menu: (provided) => ({
    ...provided,
    border: `calc(1px / 2) solid rgb(var(--colorGrayLight))`,
    borderBottomLeftRadius: theme("borderRadius.sm"),
    borderBottomRightRadius: theme("borderRadius.sm"),
    borderTopLeftRadius: "0",
    borderTopRightRadius: "0",
    boxShadow: "0 1px 0 rgba(0 0 0 / 6%)",
    left: "0",
    marginTop: "0",
    maxHeight: `calc(36px * 6.5 + 3px)`,
    right: "0",
    zIndex: 999,
    // = theme('zIndex.dropdown')
    ".tw-dark &": {
      backgroundColor: "rgb(var(--colorGrayDarkest))",
      borderColor: "rgb(var(--colorGrayDarkest))"
    }
  }),
  menuList: (provided) => ({
    ...provided,
    maxHeight: `calc(36px * 6.5 + 3px)`,
    padding: "0"
  }),
  option: (provided, { isFocused, isDisabled }) => ({
    ...provided,
    color: "rgb(var(--colorGrayDarkest))",
    backgroundColor: isFocused ? "rgb(var(--colorGrayLighter))" : "",
    cursor: isDisabled ? "not-allowed" : "pointer",
    opacity: isDisabled ? "0.38" : "1",
    display: "flex",
    fontWeight: theme("fontWeight.medium"),
    lineHeight: theme("lineHeight.tight"),
    justifyContent: "space-between",
    overflowWrap: "anywhere",
    padding: hasSearchStyles ? `${theme("spacing.2")} ${theme("spacing.4")} ${theme("spacing.2")} calc(${theme("spacing.6")} * 1.5 - 1px)` : `${theme("spacing.2")} ${theme("spacing.4")}`,
    ".tw-dark &": {
      backgroundColor: isFocused ? "rgb(var(--colorGrayDarker))" : "",
      color: "rgb(var(--colorGrayLightest))"
    }
  }),
  indicatorsContainer: (provided, { isDisabled }) => ({
    ...provided,
    alignSelf: "flex-start",
    height: `calc(36px - (${theme("borderWidth.DEFAULT")} * 2))`,
    opacity: isDisabled ? "0.38" : "1",
    paddingRight: "1px",
    svg: {
      transition: "transform 0.1s cubic-bezier(0.07, 0.49, 0, 1.05)",
      color: "rgb(var(--colorBlack))",
      ".tw-dark &": {
        color: "rgb(var(--colorWhite))"
      }
    }
  }),
  dropdownIndicator: (provided, state) => ({
    ...provided,
    paddingLeft: `calc(${theme("spacing.2")} - ${theme(
      "borderWidth.DEFAULT"
    )})`,
    ...hasSearchStyles && { display: "none" },
    ...state.selectProps.menuIsOpen && {
      svg: { transform: "rotate(-180deg)" }
    }
  }),
  clearIndicator: (provided) => ({
    ...provided,
    paddingLeft: `calc(${theme("spacing.2")} - ${theme(
      "borderWidth.DEFAULT"
    )})`
  }),
  loadingIndicator: () => ({
    display: "none"
  }),
  indicatorSeparator: () => ({
    display: "none"
  }),
  multiValue: (provided, { isFocused }) => ({
    ...provided,
    backgroundColor: isFocused ? "rgb(var(--colorGrayLight))" : "rgb(var(--colorGrayLighter))",
    borderRadius: `calc(${theme("borderRadius.sm")} / 2)`,
    fontSize: theme("fontSize.sm"),
    margin: `calc(${theme("spacing.1")} + ${theme(
      "borderWidth.DEFAULT"
    )}) 0 0 calc(${theme("spacing.1")} + ${theme("borderWidth.DEFAULT")})`,
    "&:hover": {
      backgroundColor: "rgb(var(--colorGrayLight))"
    },
    ".tw-dark &": {
      backgroundColor: isFocused ? "rgb(var(--colorGrayDark))" : "rgb(var(--colorGray))",
      color: "rgb(var(--colorWhite))",
      "&:hover": {
        backgroundColor: "rgb(var(--colorGrayDark))"
      }
    }
  }),
  multiValueLabel: (provided) => ({
    ...provided,
    fontSize: "inherit",
    fontWeight: theme("fontWeight.bold"),
    paddingRight: theme("spacing.1"),
    paddingLeft: theme("spacing.2"),
    paddingTop: 0,
    paddingBottom: 0,
    height: theme("spacing.6"),
    lineHeight: theme("lineHeight.6"),
    ".tw-dark &": {
      color: "inherit",
      backgroundColor: "transparent"
    }
  }),
  multiValueRemove: (provided) => ({
    ...provided,
    "&, &:hover, .tw-dark &": {
      color: "inherit",
      backgroundColor: "transparent"
    }
  }),
  noOptionsMessage: (provided) => ({
    ...provided,
    color: "rgb(var(--colorTextMuted))"
  })
});
export {
  selectStyles as default
};
//# sourceMappingURL=Select.styles.js.map
