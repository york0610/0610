export type SurfaceRouterProps = {
    /**
     * Content to render within the element.
     *
     * Although `SurfaceRouter` does not formally enforce it, a `SurfaceRouter`'s immediate children
     * should only be `SurfaceRoute` elements.
     */
    children?: React.ReactNode | undefined;
};
/**
 * Conditionally renders components based on which surface the extension UI is currently rendering
 * for the user.
 *
 * In general, every extension should include exactly one `SurfaceRouter` component, and you should
 * only include one {@link SurfaceRoute | `SurfaceRoute`} from the
 * {@link @netlify/sdk/react!Surfaces | `Surfaces`} enum.
 *
 * @param props
 * @see {@link SurfaceRoute}
 * @see {@link @netlify/sdk/react!Surfaces | Surfaces}
 * @example
 * ```tsx
 * import { Surfaces } from "@netlify/sdk/react";
 * import { SurfaceRoute, SurfaceRouter } from "@netlify/sdk/react/components";
 *
 * <SurfaceRouter>
 *   <SurfaceRoute surface={Surfaces.SiteConfiguration}>
 *     <SiteConfigurationSurface />
 *   </SurfaceRoute>
 *
 *   <SurfaceRoute surface={Surfaces.TeamConfiguration}>
 *     <TeamConfigurationSurface />
 *   </SurfaceRoute>
 * </SurfaceRouter>
 * ```
 */
export declare const SurfaceRouter: ({ children }: SurfaceRouterProps) => import("react").JSX.Element;
//# sourceMappingURL=SurfaceRouter.d.ts.map