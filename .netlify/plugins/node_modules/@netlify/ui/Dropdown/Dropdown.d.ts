import { DownshiftProps as IDownshiftProps, UseSelectStateChange, default as Downshift } from 'downshift';
import { ButtonLevel, ButtonSize } from '../Button/types';
import { IconName } from '../Icon/types';
type ButtonConfigMapItem = {
    level: ButtonLevel;
    className?: string;
};
declare const buttonConfigMap: {
    [key: string]: ButtonConfigMapItem;
};
export interface IDropdownItem<Item = string> {
    [key: string]: unknown;
    helpText?: string | unknown;
    label: string | React.ReactNode;
    value?: Item;
    className?: string | Record<string, boolean>;
    action?: (...args: any[]) => void;
    onClick?: () => void;
    selected?: boolean;
    active?: boolean;
    divider?: boolean;
    to?: string;
    href?: string;
    disabled?: boolean;
}
export type DropdownItemGroup<ItemValue = string> = {
    label?: string | React.ReactNode;
    items: IDropdownItem<ItemValue>[];
    relativeIndex?: number;
};
type InferedDropdownProps<ItemValue = string> = {
    items?: IDropdownItem<ItemValue>[];
    itemGroups?: DropdownItemGroup<ItemValue>[];
    onStateChange?: (changes: UseSelectStateChange<string>) => void;
};
type Toggle = {
    label: string | React.ReactNode;
    ariaLabel?: string;
    activeClassName?: string;
    inactiveClassName?: string;
    className?: string;
    saving?: boolean;
    size?: ButtonSize;
    tabIndex?: number;
};
interface IDropdownProps<ItemValue = string> extends Omit<IDownshiftProps<IDropdownItem<ItemValue>>, 'onSelect'> {
    alignRight?: boolean;
    menuPosition?: 'above' | 'below';
    className?: string;
    toggle?: Toggle;
    noCaret?: boolean;
    onClick?: () => void;
    onSelect?: (selectedItem: IDropdownItem<ItemValue> | null) => void;
    scrollable?: boolean;
    disabled?: boolean;
    variant?: keyof typeof buttonConfigMap;
    size?: ButtonSize;
    menu?: {
        className?: string;
    };
    caret?: {
        className?: string;
        cancelWidth?: boolean;
        iconName?: IconName;
        width?: number;
        height?: number;
    };
    pinnedItems?: IDropdownItem<ItemValue>[] | null;
    condensed?: boolean;
    noCheck?: boolean;
    iconButton?: IconName;
}
type ProviderProps = {
    provider?: undefined;
    ButtonAuthProvider?: undefined;
} | {
    provider: string;
    ButtonAuthProvider: (props: any) => JSX.Element;
};
export type DropdownProps<ItemValue = string> = InferedDropdownProps<ItemValue> & IDropdownProps<ItemValue> & ProviderProps;
export declare function Dropdown<ItemValue>({ className, toggle, items, menu, noCaret, onClick, onSelect, scrollable, disabled, alignRight, menuPosition, variant, provider, ButtonAuthProvider, caret, pinnedItems, condensed, itemGroups, noCheck, iconButton, itemToString, ...rest }: DropdownProps<ItemValue>): import("react/jsx-runtime").JSX.Element;
export default Dropdown;
export { Downshift };
