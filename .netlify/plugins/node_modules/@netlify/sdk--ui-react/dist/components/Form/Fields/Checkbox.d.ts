import { FieldValues as TFieldValues, Path } from 'react-hook-form';

export type CheckboxProps<FieldValues extends TFieldValues> = {
    /**
     * If `true`, the component is disabled.
     *
     * @default false
     */
    disabled?: boolean | undefined;
    /**
     * An error message to display below the element when in an invalid state.
     */
    error?: {
        message?: string | undefined;
    } | undefined;
    /**
     * Explanatory text to render below the element.
     */
    helpText?: React.ReactNode | undefined;
    /**
     * A user-friendly label displayed alongside the element.
     */
    label: string;
    /**
     * A unique name identifying the element within a form.
     */
    name: Path<FieldValues>;
    /**
     * When `true`, the element will be invalid when touched and unchecked.
     *
     * @default false
     */
    required?: boolean | undefined;
};
/**
 * Checkboxes give users a binary choice from a set of options.
 *
 * <!-- TODO(ndhoule): Add a screenshot here -->
 *
 * @param props
 * @see {@link Form}
 * @example
 * ```ts
 * import { Checkbox } from "@netlify/sdk/react/components";
 *
 * <Checkbox />
 * ```
 */
export declare const Checkbox: <FieldValues extends TFieldValues>({ name, label, helpText, error, required, ...otherProps }: CheckboxProps<FieldValues>) => import("react").JSX.Element;
//# sourceMappingURL=Checkbox.d.ts.map