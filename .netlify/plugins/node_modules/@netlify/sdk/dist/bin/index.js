import process from "node:process";
import semver from "semver";
import chalk from "chalk";
import { createSignalHandler } from "../lib/signal_handler/main.js";
// The range of officially supported Node versions.
// If you update this value, please update the supportedNodeVersionRange in packages/create-sdk/src/utils.ts to match.
const supportedNodeVersionRange = ">= 18.19.0";
const ignoreSupportedVersionError = process.env.NETLIFY_SDK_IGNORE_SUPPORTED_NODE_VERSION_RANGE === "true";
const normalizeBuildTargets = ({ all: _all, buildtime: _buildtime, site: _site, }) => {
    let buildtime;
    let site;
    // If no build target is explicitly specified, default to all
    if (_all === undefined && _buildtime === undefined && _site === undefined) {
        _all = true;
    }
    if (_all) {
        // If all = true, enable all build targets
        buildtime = true;
        site = true;
    }
    else {
        // Otherwise, only build the specified targets
        buildtime = _buildtime === undefined ? false : _buildtime;
        site = _site === undefined ? false : _site;
    }
    return {
        buildtime,
        site,
    };
};
export async function main() {
    if (!semver.satisfies(process.versions.node, supportedNodeVersionRange)) {
        console.error(chalk.red(`
ERROR: The Netlify SDK does not support the current Node version: ${process.versions.node}.
       The range of officially supported Node versions is ${supportedNodeVersionRange}.

       Please install a supported version of node and re-run the process.
      `.trim()));
        if (!ignoreSupportedVersionError) {
            process.exitCode = 1;
            return;
        }
    }
    const { Command } = await import("@commander-js/extra-typings");
    const { build, dev } = await import("../cli/commands/index.js");
    const cwd = process.cwd();
    const abortController = new AbortController();
    createSignalHandler(["SIGINT", "SIGTERM"])({
        onSignal: async ({ force }) => {
            if (force) {
                // If e.g. the user has Ctrl-C'd twice, force exit
                console.error("Force exiting. This may leave processes running in the background.");
                process.exit(1);
            }
            console.log("Shutting down. Press Ctrl-C again to force exit.");
            abortController.abort();
        },
    });
    const program = new Command();
    const withBuildCommonFlags = (program) => {
        return program
            .option("-a, --all", "Build all components of the extension")
            .option("-b, --buildtime", "Build the buildtime component of the extension")
            .option("-s, --site", "Build the serverless component of the extension");
    };
    withBuildCommonFlags(program.command("build")).action(async ({ all, buildtime, site, ...opts }) => {
        await build({ signal: abortController.signal }, {
            cwd,
            mode: "build",
            ...opts,
            ...normalizeBuildTargets({
                all,
                buildtime,
                site,
            }),
        });
    });
    withBuildCommonFlags(program
        .command("dev")
        .option("-o, --open", "Open the extension UI local dev server preview in the Netlify UI")
        .option("--slug <slug>", "Override the extension slug to be used in the dev preview")).action(async ({ all, buildtime, site, ...opts }) => {
        if (opts.slug && opts.open === undefined) {
            opts.open = true;
        }
        await dev({ signal: abortController.signal }, {
            cwd,
            mode: "dev",
            ...opts,
            ...normalizeBuildTargets({
                all,
                buildtime,
                site,
            }),
        });
    });
    console.debug("Starting SDK CLI...");
    await program.parseAsync();
}
await main();
//# sourceMappingURL=index.js.map