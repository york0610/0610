import type { Handler } from "@netlify/functions";
import type { NetlifySDKContext, BuildHookType, BuildHookWithContext, BuildHookFunction } from "../index.js";
import type { BuildHooks, EdgeFunctionsOptions, EdgeFunctionsSettings, Handlers, FunctionsSettings, FunctionHandler } from "./types.js";
export type NetlifyExtensionOptions<BuildConfig extends Record<string, unknown> = Record<string, unknown>> = {
    parseBuildConfig?: ((config: unknown) => BuildConfig) | undefined;
};
export declare class NetlifyExtension<SiteConfiguration extends Record<string, unknown> = Record<string, unknown>, TeamConfiguration extends Record<string, unknown> = Record<string, unknown>, BuildConfiguration extends Record<string, unknown> = Record<string, unknown>> {
    #private;
    _edgeFunctionsSettings?: EdgeFunctionsSettings;
    _functionsSettings?: FunctionsSettings;
    _slug: string;
    _hostSiteId?: string;
    private _buildHooks;
    private _handlers;
    constructor({ parseBuildConfig, }?: NetlifyExtensionOptions<BuildConfiguration>);
    get buildSlug(): string;
    /**
     * Used to add a build event handlers to the extension.
     */
    addBuildEventHandler(type: BuildHookType, func: BuildHookWithContext<SiteConfiguration, TeamConfiguration, BuildConfiguration>): void;
    /**
     * Used to add an endpoint to the extension.
     */
    addEndpoint(name: string, handler: FunctionHandler<NetlifySDKContext<SiteConfiguration, TeamConfiguration>>): void;
    /**
     * The handler to use for the onInstall endpoint.
     */
    onInstall(handler: FunctionHandler<NetlifySDKContext<SiteConfiguration, TeamConfiguration>>): void;
    /**
     * The handler to use for the onUninstall endpoint.
     */
    onUninstall(handler: FunctionHandler<NetlifySDKContext<SiteConfiguration, TeamConfiguration>>): void;
    /**
     * The handler to use for the onDisconnect endpoint.
     */
    onDisconnect(handler: FunctionHandler<NetlifySDKContext<SiteConfiguration, TeamConfiguration>>): void;
    addWebhookHandler(name: string, handler: FunctionHandler<NetlifySDKContext<SiteConfiguration, TeamConfiguration>>): void;
    /**
     * Used to inject edge functions into the user's site.
     */
    private injectEdgeFunctions;
    /**
     * Injects functions into the user's site by copying injectables into the site's
     * `.netlify/functions-internal` directory.
     *
     * This was replaced by the `functions.generate` API (added in netlify-cli@2.2.2). We prefer that
     * API when available.
     */
    private legacyInjectFunctions;
    private getGeneratedFunctions;
    /**
     * Used to add edge functions to the extension. Edge functions added using this method are
     * injected into a user's site whenever the user's site is built.
     *
     * @example
     * ```ts
     * extension.addEdgeFunctions(
     *   "src/edge-functions",
     *   {
     *     prefix: "my_extension",
     *     shouldInjectFunction: ({ name }) => name === "only-inject-this-one",
     *   },
     * );
     * ```
     */
    addEdgeFunctions(path: string, { prefix, shouldInjectFunction }: EdgeFunctionsOptions): void;
    /**
     * Used to add functions to the extension. Functions added using this method are injected into a
     * user's site whenever the user's site is built.
     *
     * @example
     * ```ts
     * extension.addEdgeFunctions(
     *   "src/functions",
     *   {
     *     prefix: "my_extension",
     *     shouldInjectFunction: ({ name }) => name === "only-inject-this-one",
     *   },
     * );
     * ```
     */
    addFunctions(
    /**
     * A path to the directory containing functions. It should be a path relative to your
     * extension's base path, e.g. `src/edge-functions`.
     */
    path: string, { prefix, shouldInjectFunction }: EdgeFunctionsOptions): void;
    addFallbackBuildEventHandlers(): void;
    get buildHooks(): BuildHooks;
    get handlers(): Handlers;
    get baseHandler(): Handler;
    getBuildConfig({ netlifyConfig, }: {
        netlifyConfig: unknown;
    }): BuildConfiguration;
    getBuildEventHandlersToRun(): Record<BuildHookType, BuildHookFunction>;
}
//# sourceMappingURL=index.d.ts.map