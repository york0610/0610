type BaseProps = {
    variant?: "default" | "pill" | "pill-large" | "inline-block";
    name?: string;
    value?: string;
    checked?: boolean;
    controlledChecked?: boolean;
    required?: boolean;
    title?: string;
    label: string | React.ReactNode;
    helpText?: string | React.ReactNode;
    onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void;
    disabled?: boolean;
    loading?: boolean;
    tabIndex?: number | string;
    error?: string;
    outset?: string | number;
    labelClassName?: string;
};
type CheckboxSpecificProps = {
    type?: "checkbox";
    /** **Warning**: You must manage state for this prop on your own. Only pass it `true` when you know `checked` isn't `true`.
     *
     * Generally, this will only be used when the checkbox controls a group and you set the indeterminate state when all/some/none of the group checkboxes are checked.
     *
     * **UX Note**: The indeterminate state is only supported for checkboxes and only for the default variant.
     */
    indeterminate?: boolean;
};
type RadioSpecificProps = {
    type: "radio";
};
export type CheckboxProps = BaseProps & (CheckboxSpecificProps | RadioSpecificProps);
declare const _default: import('react').ForwardRefExoticComponent<CheckboxProps & import('react').RefAttributes<HTMLInputElement>>;
export default _default;
//# sourceMappingURL=Checkbox.d.ts.map