{"version":3,"file":"SurfaceRouter.js","sources":["../../../src/components/SurfaceRouter/SurfaceRouter.tsx"],"sourcesContent":["import { useNetlifySDK } from \"../../use_netlify_sdk.js\";\nimport { SurfaceRouterContextProvider } from \"./SurfaceRouterContext.js\";\n\nexport type SurfaceRouterProps = {\n  /**\n   * Content to render within the element.\n   *\n   * Although `SurfaceRouter` does not formally enforce it, a `SurfaceRouter`'s immediate children\n   * should only be `SurfaceRoute` elements.\n   */\n  children?: React.ReactNode | undefined;\n};\n\n/**\n * Conditionally renders components based on which surface the extension UI is currently rendering\n * for the user.\n *\n * In general, every extension should include exactly one `SurfaceRouter` component, and you should\n * only include one {@link SurfaceRoute | `SurfaceRoute`} from the\n * {@link @netlify/sdk/react!Surfaces | `Surfaces`} enum.\n *\n * @param props\n * @see {@link SurfaceRoute}\n * @see {@link @netlify/sdk/react!Surfaces | Surfaces}\n * @example\n * ```tsx\n * import { Surfaces } from \"@netlify/sdk/react\";\n * import { SurfaceRoute, SurfaceRouter } from \"@netlify/sdk/react/components\";\n *\n * <SurfaceRouter>\n *   <SurfaceRoute surface={Surfaces.SiteConfiguration}>\n *     <SiteConfigurationSurface />\n *   </SurfaceRoute>\n *\n *   <SurfaceRoute surface={Surfaces.TeamConfiguration}>\n *     <TeamConfigurationSurface />\n *   </SurfaceRoute>\n * </SurfaceRouter>\n * ```\n */\nexport const SurfaceRouter = ({ children }: SurfaceRouterProps) => {\n  const sdk = useNetlifySDK();\n\n  return (\n    <SurfaceRouterContextProvider value={{ currentSurface: sdk.surface.name }}>\n      {children}\n    </SurfaceRouterContextProvider>\n  );\n};\n"],"names":[],"mappings":";;;AAwCO,MAAM,gBAAgB,CAAC,EAAE,eAAmC;AACjE,QAAM,MAAM,cAAA;AAEZ,SACE,oBAAC,gCAA6B,OAAO,EAAE,gBAAgB,IAAI,QAAQ,QAChE,UACH;AAEJ;"}