const isWretchError = (e) => {
    return "status" in e && typeof e.status === "number";
};
export const defaultOnInstallHandler = async (event, context) => {
    if (event.body === null) {
        return {
            statusCode: 400,
            body: JSON.stringify({ message: "Missing body" }),
        };
    }
    const { teamId } = JSON.parse(event.body);
    if (!teamId) {
        return {
            statusCode: 400,
            body: JSON.stringify({
                message: "Missing required data: `teamId` must be provided.",
            }),
        };
    }
    try {
        if (teamId) {
            const { token } = await context.client.installExtensionOnTeam(teamId);
            context.client.netlifyToken = token;
        }
    }
    catch (e) {
        if (isWretchError(e)) {
            const apiError = e.json?.error;
            switch (e.status) {
                // We should log, but ignore these errors
                case 409:
                    return {
                        statusCode: 200,
                        body: JSON.stringify({ message: "Extension already enabled" }),
                    };
                case 401:
                    if (apiError === "invalid_integration_slug") {
                        console.warn("Invalid extension slug, please check the extension slug in the configuration file.");
                    }
                    console.error(`Failed to install extension on team: ${apiError}`);
                    return {
                        statusCode: 401,
                        body: JSON.stringify({ message: "Unauthorized" }),
                    };
                default:
                    console.error("Failed to install extension on team:", e, apiError);
                    return {
                        statusCode: 500,
                        body: JSON.stringify({
                            message: "Failed to install extension on team",
                        }),
                    };
            }
        }
        console.error("Failed to install extension on team:", e);
        return {
            statusCode: 500,
            body: JSON.stringify({
                message: "Failed to install extension on team",
            }),
        };
    }
    return {
        statusCode: 200,
        body: JSON.stringify({ message: "Extension installed on team" }),
    };
};
export const defaultOnUninstallHandler = async (event, context) => {
    if (event.body === null) {
        return {
            statusCode: 400,
            body: JSON.stringify({ message: "Missing body" }),
        };
    }
    const { teamId } = JSON.parse(event.body);
    if (!teamId) {
        return {
            statusCode: 400,
            body: JSON.stringify({ message: "Missing teamId" }),
        };
    }
    try {
        if (teamId) {
            await context.client.uninstallExtensionOnTeam(teamId);
        }
    }
    catch (e) {
        console.error("Failed to uninstall extension for team:", e);
        return {
            statusCode: 500,
            body: JSON.stringify({
                message: "Failed to uninstall extension for team",
            }),
        };
    }
    return {
        statusCode: 200,
        body: "Extension uninstalled for team",
    };
};
export const defaultOnDisconnectHandler = async () => {
    return {
        statusCode: 200,
        body: "No onDisconnect handler defined - no-op",
    };
};
//# sourceMappingURL=handlers.js.map