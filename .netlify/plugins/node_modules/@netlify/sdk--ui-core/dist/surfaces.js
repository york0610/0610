/**
 * Surfaces is an enum containing the unique names of each surface (location in the Netlify UI) that a
 * UI extension can render to.
 *
 * The SDK exposes which surface your extension UI app is currently rendering to, so you can use this enum for
 * routing and display the correct UI for a given surface to a user.
 *
 * Documentation:
 * - [Add a new surface to extension UI](https://developers.netlify.com/sdk/extension-ui/add-a-new-surface/)
 * - [Reference docs](https://developers.netlify.com/sdk/api/netlify/sdk/ui/react/enumerations/surfaces/)
 */
export var Surfaces;
(function (Surfaces) {
    Surfaces["TeamConfiguration"] = "extension-team-configuration";
    Surfaces["SiteLogs"] = "extension-site-logs";
    Surfaces["SiteMetrics"] = "extension-site-metrics";
    Surfaces["SiteAccessConfiguration"] = "extension-site-access-configuration";
    Surfaces["SiteBuildDeployConfiguration"] = "extension-site-build-and-deploy-configuration";
    Surfaces["SiteDeploy"] = "extension-site-deploy";
    Surfaces["SiteGeneralConfiguration"] = "extension-site-general-configuration";
    Surfaces["SiteNotificationsConfiguration"] = "extension-site-notifications-configuration";
    Surfaces["SiteConfiguration"] = "extension-top-level-site-configuration";
    /**
     * @internal
     */
    Surfaces["SiteBuildGame"] = "extension-site-build-game";
    /**
     * This package is used by the Netlify UI to render these surfaces, so we're keeping this here for
     * backward compatibility.
     *
     * @deprecated
     * @internal
     */
    Surfaces["ConnectConfiguration"] = "extension-connect-configuration";
    /**
     * This package is used by the Netlify UI to render these surfaces, so we're keeping this here for
     * backward compatibility.
     *
     * @deprecated
     * @internal
     */
    Surfaces["VisualEditorConfiguration"] = "extension-visual-editor-configuration";
})(Surfaces || (Surfaces = {}));
//# sourceMappingURL=surfaces.js.map