(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('react')) :
  typeof define === 'function' && define.amd ? define(['react'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.useResizeObserver = factory(global.React));
})(this, (function (React) { 'use strict';

  function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
      Object.keys(e).forEach(function (k) {
        if (k !== 'default') {
          var d = Object.getOwnPropertyDescriptor(e, k);
          Object.defineProperty(n, k, d.get ? d : {
            enumerable: true,
            get: function () { return e[k]; }
          });
        }
      });
    }
    n["default"] = e;
    return Object.freeze(n);
  }

  var React__namespace = /*#__PURE__*/_interopNamespace(React);

  var usePassiveLayoutEffect = React__namespace[typeof document !== 'undefined' && document.createElement !== void 0 ? 'useLayoutEffect' : 'useEffect'];

  var useLatest = function useLatest(current) {
    var storedValue = React__namespace.useRef(current);
    storedValue.current = current;
    return storedValue;
  };

  /* eslint-disable no-return-assign */

  /**
   * A React hook that fires a callback whenever ResizeObserver detects a change to its size
   *
   * @param target A React ref created by `useRef()` or an HTML element
   * @param callback Invoked with a single `ResizeObserverEntry` any time
   *   the `target` resizes
   */

  function _ref() {}
  function useResizeObserver(target, callback, options) {
    if (options === void 0) {
      options = {};
    }
    var resizeObserver = getResizeObserver(options.polyfill);
    var storedCallback = useLatest(callback);
    usePassiveLayoutEffect(function () {
      var didUnsubscribe = false;
      var targetEl = target && 'current' in target ? target.current : target;
      if (!targetEl) return _ref;
      function cb(entry, observer) {
        if (didUnsubscribe) return;
        storedCallback.current(entry, observer);
      }
      resizeObserver.subscribe(targetEl, cb);
      return function () {
        didUnsubscribe = true;
        resizeObserver.unsubscribe(targetEl, cb);
      };
    }, [target, resizeObserver, storedCallback]);
    return resizeObserver.observer;
  }
  function createResizeObserver(polyfill) {
    var ticking = false;
    var allEntries = [];
    var callbacks = new Map();
    var observer = new (polyfill || window.ResizeObserver)(function (entries, obs) {
      allEntries = allEntries.concat(entries);
      function _ref2() {
        var triggered = new Set();
        var _loop = function _loop(i) {
          if (triggered.has(allEntries[i].target)) return "continue";
          triggered.add(allEntries[i].target);
          var cbs = callbacks.get(allEntries[i].target);
          cbs === null || cbs === void 0 ? void 0 : cbs.forEach(function (cb) {
            return cb(allEntries[i], obs);
          });
        };
        for (var i = 0; i < allEntries.length; i++) {
          var _ret = _loop(i);
          if (_ret === "continue") continue;
        }
        allEntries = [];
        ticking = false;
      }
      if (!ticking) {
        window.requestAnimationFrame(_ref2);
      }
      ticking = true;
    });
    return {
      observer: observer,
      subscribe: function subscribe(target, callback) {
        var _callbacks$get;
        observer.observe(target);
        var cbs = (_callbacks$get = callbacks.get(target)) !== null && _callbacks$get !== void 0 ? _callbacks$get : [];
        cbs.push(callback);
        callbacks.set(target, cbs);
      },
      unsubscribe: function unsubscribe(target, callback) {
        var _callbacks$get2;
        var cbs = (_callbacks$get2 = callbacks.get(target)) !== null && _callbacks$get2 !== void 0 ? _callbacks$get2 : [];
        if (cbs.length === 1) {
          observer.unobserve(target);
          callbacks.delete(target);
          return;
        }
        var cbIndex = cbs.indexOf(callback);
        if (cbIndex !== -1) cbs.splice(cbIndex, 1);
        callbacks.set(target, cbs);
      }
    };
  }
  var _resizeObserver;
  var getResizeObserver = function getResizeObserver(polyfill) {
    return !_resizeObserver ? _resizeObserver = createResizeObserver(polyfill) : _resizeObserver;
  };

  return useResizeObserver;

}));
//# sourceMappingURL=use-resize-observer.dev.js.map
