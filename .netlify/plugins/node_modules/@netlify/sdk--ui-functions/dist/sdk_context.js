import { EXTENSION_API_URL_PROD, EXTENSION_API_URL_STAGING, NetlifyExtensionClient, } from "@netlify/sdk--extension-api-client";
import { z } from "zod";
const SDKContextProviderTokensSchema = z.array(z.object({
    token: z.string().min(1).trim(),
    externalId: z.string().min(1).trim(),
    connectionId: z.string().min(1).trim(),
}));
const parseProviderTokens = (header) => {
    if (!header) {
        return [];
    }
    try {
        return SDKContextProviderTokensSchema.parse(JSON.parse(header));
    }
    catch (e) {
        console.error("Failed to parse provider tokens header", e);
        return [];
    }
};
/**
 * @internal
 */
// TODO(ndhoule): Divorce this from Request? This is sort of purpose-built for tRPC right now but we
// should be able to use it in non-tRPC/normal request handlers
export const createNetlifySDKContext = ({ req, }) => {
    const netlifyToken = req.headers.get("Nf-UIExt-Netlify-Token");
    const netlifyTokenIssuer = req.headers.get("Nf-UIExt-Netlify-Token-Issuer");
    const extensionId = req.headers.get("Nf-UIExt-Extension-Id");
    const extensionSlug = req.headers.get("Nf-UIExt-Extension-Slug");
    const jigsawUrl = Boolean(process.env["URL"]?.includes(".netlifystg.app")) ||
        process.env["NETLIFY_USE_STAGING"] === "true"
        ? EXTENSION_API_URL_STAGING
        : EXTENSION_API_URL_PROD;
    const netlifyApiBaseUrl = process.env["NETLIFY_API_BASE_URL"] ?? "";
    const jigsawApiBaseUrl = process.env["NETLIFY_JIGSAW_URL"] ?? "";
    const client = new NetlifyExtensionClient(netlifyToken ?? "", extensionSlug ?? "", // FIXME(ndhoule): This ain't great, we really should bail out slug is not available
    {
        netlifyApiUrl: netlifyApiBaseUrl || `${jigsawUrl}/api/v1`,
        jigsawUrl: jigsawApiBaseUrl || jigsawUrl,
        netlifyTokenIssuer: netlifyTokenIssuer ?? "jigsaw",
    });
    const providerTokens = parseProviderTokens(req.headers.get("Nf-UIExt-Provider-Tokens") ?? "");
    return {
        auth: {
            netlifyToken,
            providerToken: req.headers.get("Nf-UIExt-Provider-Token"),
            providerTokens,
        },
        extension: {
            id: extensionId ?? "",
            slug: extensionSlug ?? "",
        },
        client,
        configurationId: req.headers.get("Nf-UIExt-Configuration-Id"),
        dataLayerId: req.headers.get("Nf-UIExt-Datalayer-Id"),
        siteId: req.headers.get("Nf-UIExt-Site-Id"),
        teamId: req.headers.get("Nf-UIExt-Team-Id"),
        user: {
            id: req.headers.get("Nf-UIExt-User-Id"),
        },
    };
};
//# sourceMappingURL=sdk_context.js.map