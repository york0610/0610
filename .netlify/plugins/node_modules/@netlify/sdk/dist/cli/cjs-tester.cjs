"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.shouldShim = void 0;
/* shouldShim()
 *
 * returns false if we don't need to shim global require()
 * true if we do need to shim.
 *
 * this is used within the config.use_cjs_shims option in extension.yaml
 * If the bundle is running within a CJS main, the shims will cause runtime errors
 * So this fn is used to conditionally shim in the specific case where esbuild would throw an error doing a dynamic require from within a cjs file.
 */
const shouldShim = () => {
    try {
        // esbuild will throw at runtime if we try to require here
        require(`node:timers`); // since require is bundled to __require2, we unforunately can't check something like "typeof require === 'undefined'" as esbuild will bundle that to typeof __require2 === "undefined" which will always be false. We must just try to require a module we know causes the error we're shimming to fix.
        return false; // unless we're running in cjs where we can dynamically require `timers`. Meaning we will return should shim false on this line.
    }
    catch (e) {
        if (e.message.includes(`Dynamic require of`)) {
            return true; // true means add shims since esbuild errored above on the dynamic require
        }
        else {
            // handle other kinds of errors still
            // for ex in the future esbuild may fix this but perhaps we get another kind of error requireing node:timers in a future node version or something (*shrug*)
            throw e;
        }
    }
};
exports.shouldShim = shouldShim;
//# sourceMappingURL=cjs-tester.cjs.map