import * as blobs from "@netlify/blobs";
import type { CamelCasedPropertiesDeep } from "type-fest";
import { type Wretch } from "wretch";
import type * as bitballoon from "./generated/bitballoon.js";
export type RedeploySiteResponse = {
    id: string;
    deploy_id: string;
    sha: string;
    done: boolean;
    error: string;
    created_at: string;
};
export type DeployContextType = "all" | "dev" | "branch-deploy" | "deploy-preview" | "branch" | "production";
export declare const DeployContext: Record<string, DeployContextType>;
export type EnvironmentVariableScopeType = "functions" | "builds" | "all" | "runtime" | "post-processing";
export declare const EnvironmentVariableScope: Record<string, EnvironmentVariableScopeType>;
/**
 * @internal
 */
export interface Site {
    id: string;
    name: string;
    use_envelope: string;
    build_settings: {
        env: Record<string, string | undefined>;
    };
    plugins: {
        package: string;
        pinned_version?: string;
    }[];
}
/**
 * @internal
 */
export interface Account {
    id: string;
    name: string;
    slug: string;
}
export type EnvVarRequest = string | {
    dev: string;
    deployPreview: string;
    production: string;
    branchDeploys: string;
    branch?: Record<string, string>;
};
/**
 * @internal
 */
export interface EnvironmentVariableValue {
    value: string;
    context_parameter?: string;
    context: DeployContextType;
}
/**
 * @internal
 */
export interface EnvironmentVariable {
    key: string;
    scopes: EnvironmentVariableScopeType;
    values: EnvironmentVariableValue[];
}
interface BuildHookInput {
    title: string;
    branch: string;
    draft?: boolean;
}
/**
 * @internal
 */
export interface BuildHookResponse {
    id: string;
    title?: string;
    branch: string;
    url: string;
    site_id: string;
    created_at: string;
    draft?: boolean;
}
export type CreateSiteBuildHookInput = {
    branch?: string | undefined;
    draft?: boolean | undefined;
    title?: string | undefined;
};
export type UpdateSiteBuildHookInput = {
    branch?: string | undefined;
    draft?: boolean | undefined;
    title?: string | undefined;
};
export type BuildHook = CamelCasedPropertiesDeep<bitballoon.components["schemas"]["BuildHook"]>;
export type CreateHookBySiteIdInput = {
    data: {
        url: string;
        [key: string]: unknown;
    };
    type: string;
    event: "deploy_building" | "deploy_failed" | "deploy_created";
};
export type UpdateHookInput = {
    data: {
        url: string;
        [key: string]: unknown;
    };
};
export type Hook = CamelCasedPropertiesDeep<bitballoon.components["schemas"]["OutgoingHook"]>;
export type Deploy = CamelCasedPropertiesDeep<bitballoon.components["schemas"]["Deploy"]>;
export type Dns = CamelCasedPropertiesDeep<bitballoon.components["schemas"]["DnsZone"]>;
export type Form = CamelCasedPropertiesDeep<bitballoon.components["schemas"]["Form"]>;
export type LogDrain = CamelCasedPropertiesDeep<{
    id: string;
    site_id: string;
    log_types: string;
    format: "json" | "ndjson";
    destination: string;
    exclude_pii?: boolean | undefined;
    service_config: {
        url: string;
    };
}>;
export type CreateSiteLogDrainInput = {
    logTypes: string;
    format: "json" | "ndjson";
    destination: string;
    excludePii?: boolean | undefined;
    serviceConfig: {
        url: string;
    };
};
export type UpdateSiteLogDrainInput = {
    logTypes: string;
    format: "json" | "ndjson";
    destination: string;
    excludePii?: boolean | undefined;
    serviceConfig: {
        url: string;
    };
};
export type CreateSiteDeployInput = {
    async?: boolean | undefined;
    branch?: string | undefined;
    draft?: boolean | undefined;
    framework?: string | undefined;
};
/**
 * @internal
 */
export interface CreateHookRequest {
    type: string;
    event: "deploy_building" | "deploy_failed" | "deploy_created";
    site_id: string;
    data: {
        url: string;
    };
}
export interface CreateHookResponse {
    id: string;
}
interface NetlifyClientOptions {
    fetch?: typeof fetch;
    baseUrl?: string | undefined;
}
/**
 * @internal
 */
export type User = {
    id: string;
    createdAt: string;
    avatarUrl: string;
    email: string;
    fullName: string;
};
export type Build = CamelCasedPropertiesDeep<bitballoon.components["schemas"]["Build"]>;
/**
 * @internal
 */
export declare class NetlifyClient {
    apiKey: string;
    wretch: Wretch;
    private baseURL;
    private _client;
    private client;
    constructor(apiKey: string, { baseUrl }?: NetlifyClientOptions);
    /**
     * getCurrentUser retrieves information about the current authenticated user. If the request is
     * not authenticated, returns null.
     */
    getCurrentUser(): Promise<User | null>;
    /**
     * Redeploys a site by triggering a new build. A 'branch' can be specified to build a specific branch. If none are specified, the default branch will be built.
     */
    redeploySite({ siteId, branch, }: {
        siteId: string;
        branch?: string;
    }): Promise<RedeploySiteResponse>;
    /**
     * getSiteBuild retrieves a site build by ID.
     *
     * Returns `null` when no build is found for the given ID.
     */
    getSiteBuild(buildId: string): Promise<Build | null>;
    /**
     * Deletes all environment variables specified in the `variables` array for a site when passed a
     * `siteId`. When not passed a `siteId`, operates on the team level.
     */
    deleteEnvironmentVariables({ accountId, siteId, variables, }: {
        accountId: string;
        siteId?: string;
        variables: string[];
    }): Promise<void>;
    /**
     * Creates or updates all environment variables in the `variables` object for a site when passed a
     * `siteId`. When not passed a `siteId`, operates on the team level.
     */
    createOrUpdateVariables({ accountId, siteId, variables, isSecret, scopes, }: {
        accountId: string;
        siteId?: string;
        variables: Record<string, EnvVarRequest>;
        isSecret?: boolean;
        scopes?: EnvironmentVariableScopeType[];
    }): Promise<void>;
    /**
     * Creates or updates a single environment variable for a site when passed a `siteId`. When not
     * passed a `siteId`, operates on the team level.
     */
    createOrUpdateVariable({ accountId, siteId, key, value, isSecret, scopes, }: {
        accountId: string;
        siteId?: string | undefined;
        key: string;
        value: EnvVarRequest;
        isSecret?: boolean;
        scopes?: undefined | EnvironmentVariableScopeType[];
    }): Promise<void>;
    /**
     * Gets all environment variables for a site when passed a `siteId`. When not passed a `siteId`,
     * operates on the team level.
     */
    getEnvironmentVariables({ accountId, siteId, }: {
        accountId: string;
        siteId?: string;
    }): Promise<EnvironmentVariable[]>;
    /**
     * Creates a new environment variable for a site.
     */
    createEnvironmentVariable({ accountId, siteId, key, values, isSecret, scopes, }: {
        accountId: string;
        siteId: string;
        key: string;
        values: EnvironmentVariableValue[];
        isSecret?: boolean;
        scopes?: undefined | EnvironmentVariableScopeType[];
    }): Promise<EnvironmentVariable>;
    /**
     * Updates an existing environment variable for a site when passed a `siteId`. When not passed a
     * `siteId`, operates on the team level.
     */
    updateEnvironmentVariable({ accountId, siteId, key, values, isSecret, scopes, }: {
        accountId: string;
        siteId?: string;
        key: string;
        values: EnvironmentVariableValue[];
        isSecret?: boolean;
        scopes?: undefined | EnvironmentVariableScopeType[];
    }): Promise<EnvironmentVariable>;
    /**
     * Creates or updates an environment variable for a site when passed a `siteId`. When not passed a
     * `siteId`, operates on the team level.
     */
    patchEnvironmentVariable({ accountId, siteId, key, context, value, contextParameter, }: {
        accountId: string;
        siteId?: string;
        key: string;
        context: string;
        value: string;
        contextParameter?: string;
    }): Promise<EnvironmentVariable>;
    /**
     * Deletes an environment variable for a site when passed a `siteId`. When not passed a `siteId`,
     * operates on the team level.
     */
    deleteEnvironmentVariable({ accountId, siteId, key, }: {
        accountId: string;
        siteId?: string;
        key: string;
    }): Promise<import("wretch").WretchResponse>;
    /**
     * Gets a site by ID and returns site information.
     */
    getSite(siteId: string): Promise<Site>;
    /**
     * Gets all sites for an account.
     */
    getSites(): Promise<Site[]>;
    /**
     * Updates a site with the given changes.
     */
    updateSite(siteId: string, changes?: Partial<Site>): Promise<Site>;
    /**
     * purgeCache purges cached content from Netlify's CDN. Supports purging by Cache-Tag.
     */
    purgeCache(siteId: string, cacheTags: string[]): Promise<void>;
    /**
     * Creates a new build hook for a site.
     */
    createSiteBuildHook(siteId: string, input: CreateSiteBuildHookInput): Promise<BuildHook>;
    /**
     * Deletes a build hook by site ID and build hook ID.
     */
    deleteSiteBuildHook(siteId: string, buildHookId: string): Promise<void>;
    /**
     * Retrieves a build hook by site ID and build hook ID.
     */
    getSiteBuildHook(siteId: string, buildHookId: string): Promise<BuildHook | null>;
    /**
     * Lists all build hooks for a site.
     */
    listSiteBuildHooks(siteId: string): Promise<BuildHook[]>;
    /**
     * Updates a build hook by site ID and build hook ID.
     */
    updateSiteBuildHook(siteId: string, buildHookId: string, input: UpdateSiteBuildHookInput): Promise<BuildHook>;
    /**
     * Creates a new build hook for a site.
     *
     * @deprecated Replaced by createSiteBuildHook.
     */
    createBuildHook(siteId: string, buildHook: BuildHookInput): Promise<BuildHookResponse>;
    /**
     * Deletes a build hook for a site.
     *
     * @deprecated Replaced by deleteSiteBuildHook.
     */
    deleteBuildHook(siteId: string, buildHookId: string): Promise<BuildHookResponse>;
    /**
     * Creates a webhook for the given site.
     */
    createHookBySiteId(siteId: string, input: CreateHookBySiteIdInput): Promise<Hook>;
    /**
     * Deletes the given webhook.
     */
    deleteHook(hookId: string): Promise<void>;
    /**
     * Retrieves a webhook by ID. Returns null if the webhook does not exist.
     */
    getHook(hookId: string): Promise<Hook | null>;
    /**
     * Retrieves a list of webhooks for the given site.
     */
    listHooksBySiteId(siteId: string): Promise<Hook[]>;
    /**
     * Updates a webhook by ID. Returns the updated webhook.
     */
    updateHook(hookId: string, input: UpdateHookInput): Promise<Hook>;
    /**
     * @deprecated Replaced by createHookBySiteId.
     */
    createHook(CreateHookRequest: CreateHookRequest): Promise<CreateHookResponse>;
    /**
     * Gets an account by ID and returns account information.
     */
    getAccount(accountId: string): Promise<Account>;
    /**
     * Cancels an in-progress deployment.
     */
    cancelSiteDeploy(deployId: string): Promise<Deploy>;
    /**
     * Creates a new deployment for a site.
     */
    createSiteDeploy(siteId: string, input?: CreateSiteDeployInput): Promise<Deploy>;
    /**
     * Deletes a deployment.
     */
    deleteDeploy(deployId: string): Promise<void>;
    /**
     * Retrieves a deployment.
     */
    getDeploy(deployId: string): Promise<Deploy | null>;
    /**
     * Lists deployments for a site.
     */
    listSiteDeploys(siteId: string): Promise<Deploy[]>;
    /**
     * Locks an existing deployment.
     */
    lockDeploy(deployId: string): Promise<void>;
    /**
     * Restores a site to the specified deployment.
     */
    restoreSiteDeploy(siteId: string, deployId: string): Promise<Deploy>;
    /**
     * Initiates a deployment rollback for the site, restoring the site to its previous deployment.
     */
    rollbackSiteDeploy(siteId: string): Promise<void>;
    /**
     * Unlocks a locked deployment.
     */
    unlockDeploy(deployId: string): Promise<void>;
    /**
     * Deletes a form.
     */
    deleteSiteForm(siteId: string, formId: string): Promise<void>;
    /**
     * Gets a form.
     */
    getSiteForm(siteId: string, formId: string): Promise<Form | null>;
    /**
     * Lists forms for a site.
     */
    listSiteForms(siteId: string): Promise<Form[]>;
    /**
     * Creates a log drain for a site.
     */
    createSiteLogDrain(siteId: string, input: CreateSiteLogDrainInput): Promise<LogDrain>;
    /**
     * Deletes a log drain for a site.
     */
    deleteSiteLogDrain(siteId: string, logDrainId: string): Promise<void>;
    /**
     * Gets a log drain for a site.
     */
    getSiteLogDrain(siteId: string, logDrainId: string): Promise<LogDrain | null>;
    /**
     * Lists a site's log drains.
     */
    listSiteLogDrains(siteId: string): Promise<LogDrain[]>;
    /**
     * Updates a log drain for a site.
     */
    updateSiteLogDrain(siteId: string, logDrainId: string, input: CreateSiteLogDrainInput): Promise<LogDrain>;
    /**
     * Returns a configured @netlify/blobs#Blobs client for the given site and blob store name.
     *
     * @see The {@link <a href="https://www.npmjs.com/package/@netlify/blobs" target="_blank" rel="noopener noreferrer">@netlify/blobs</a>} package
     */
    getBlobStore(siteId: string, storeName: string): blobs.Store;
    /**
     * Lists a site's DNS records
     */
    getDnsForSite(siteId: string): Promise<Dns[]>;
}
export {};
//# sourceMappingURL=netlify_api_client.d.ts.map