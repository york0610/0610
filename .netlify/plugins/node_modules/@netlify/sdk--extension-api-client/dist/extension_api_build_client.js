import { NetlifyExtensionClient, } from "./extension_api_client.js";
/**
 * ## Usage example
 *
 * This example shows a build event handler that uses the available `ACCOUNT_ID` and `SITE_ID` constants to do a call using the `client` to fetch a site's config.
 * This config can hold useful information for the extension, such as an extension's state, specific configurations on how the extension should function, or keys that can be used to interact with third-party APIs.
 *
 * ```tsx
 * // src/index.ts
 * import { NetlifyExtension } from '@netlify/sdk';
 *
 * const extension = new NetlifyExtension();
 *
 * extension.addBuildEventHandler('onPreBuild', async ({ client, constants }) => {
 *   const { ACCOUNT_ID, SITE_ID } = constants;
 *   const siteConfig = client.getSiteConfiguration(ACCOUNT_ID, SITE_ID);
 *
 *   // do something with the site configuration
 * });
 *
 * export { extension };
 * ```
 *
 * @link NetlifyExtensionClient
 */
export class NetlifyExtensionBuildClient {
    client;
    constructor(...params) {
        this.client = new NetlifyExtensionClient(...params);
    }
    /**
     * @link NetlifyExtensionClient.getTeamConfiguration
     */
    getTeamConfiguration = async (...args) => {
        return this.client.getTeamConfiguration(...args);
    };
    /**
     * @link NetlifyExtensionClient.getSiteConfiguration
     */
    getSiteConfiguration = async (...args) => {
        return this.client.getSiteConfiguration(...args);
    };
    /**
     * @link NetlifyClient.getSite
     */
    getSite = async (...args) => {
        return this.client.getSite(...args);
    };
    /**
     * @link NetlifyClient.getAccount
     */
    getAccount = async (...args) => {
        return this.client.getAccount(...args);
    };
}
//# sourceMappingURL=extension_api_build_client.js.map