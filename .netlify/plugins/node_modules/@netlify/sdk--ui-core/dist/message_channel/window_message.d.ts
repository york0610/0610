import { type BaseMessage, type MessageReader, type MessageWriter } from "./types.js";
interface PostMessageTransport {
    postMessage(message: unknown, targetOrigin?: string | undefined): void;
}
export interface CreateWindowMessageWriterOptions {
    signal?: AbortSignal | undefined;
    targetOrigin?: string | undefined;
    targetWindow?: PostMessageTransport | undefined;
}
/**
 * `createWindowMessageWriter` creates a `MessageWriter` that uses the `postMessage` browser API to
 * write messages.
 *
 * By default, it sends messages on the global `window`  messages target the current origin. You
 * can override either by specifying `targetWindow` and/or `targetOrigin` (respectively).
 */
export declare const createWindowMessageWriter: <Message extends BaseMessage = {
    data: Record<string, unknown>;
    type: string;
}>({ signal, targetOrigin, targetWindow, }?: CreateWindowMessageWriterOptions) => MessageWriter<Message>;
export interface CreateWindowMessageReaderOptions {
    isOriginPermitted?: (origin: string) => boolean;
    signal?: AbortSignal | undefined;
    targetWindow?: Window | undefined;
}
/**
 * `createWindowMessageReader` creates a `MessageReader` that listens for window `message` events.
 *
 * By default, it listens for messages on the global `window`  and only permits messages that
 * originate from the current origin (`window.location.origin`). You can override either by
 * specifying `targetWindow` and `whitelistedOrigins` (respectively).
 */
export declare const createWindowMessageReader: ({ isOriginPermitted, signal: readerSignal, targetWindow, }?: CreateWindowMessageReaderOptions) => MessageReader;
export {};
//# sourceMappingURL=window_message.d.ts.map