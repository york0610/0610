"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
function sitesPath(account) {
  return accountPath(account, "sites");
}
function sitePath(site, ...rest) {
  return ["/sites", site.name, ...rest].join("/");
}
function siteSettingsPath(site, ...rest) {
  return sitePath(site, "configuration", ...rest);
}
function deploysPath(site) {
  return sitePath(site, "deploys");
}
function deployPath(site, deploy) {
  return sitePath(site, "deploys", deploy.id);
}
function devServerPathWithSite(site, devServer) {
  if (!(devServer == null ? void 0 : devServer.id)) {
    return sitePath(site, "preview-servers");
  }
  return sitePath(site, "preview-servers", devServer.id);
}
function devServerPath(devServer) {
  return ["/sites", devServer.site_id, "preview-servers", devServer.id].join(
    "/"
  );
}
function buildsPath(account, ...rest) {
  return accountPath(account, "builds", ...rest);
}
function buildPath(account, build) {
  return buildsPath(account, build.deploy_id);
}
function membersPath(account, ...rest) {
  return accountPath(account, "members", ...rest);
}
function membersBuildPath(account, deployId, ...rest) {
  return accountPath(account, "members", ...rest, "build", deployId);
}
function functionsScopeQuery(deploy) {
  if (!deploy) return "";
  switch (deploy.context) {
    case "branch-deploy":
      return `?scope=branch:${deploy.branch}`;
    case "deploy-preview":
      return `?scope=deploypreview:${deploy.review_id || deploy.id}`;
    default:
      return "";
  }
}
function functionsPath(site, deploy) {
  return `${sitePath(site, "logs", "functions")}${functionsScopeQuery(deploy)}`;
}
function functionPath(site, func, scope) {
  let funcPath = `${sitePath(site, "logs", "functions", encodeURIComponent(func.n))}`;
  if (scope) {
    funcPath += `?scope=${scope}`;
  }
  return funcPath;
}
function functionPathWithTimeRangeAndBranch({
  siteName,
  funcName,
  from,
  to,
  branch
}) {
  return `/sites/${siteName}/logs/functions/${funcName && encodeURIComponent(funcName)}${from && to ? `?from=${from}&to=${to}` : ""}${branch ? `&scope=branch:${branch}` : ""}`;
}
function edgeFunctionsPath(site, query) {
  const path = sitePath(site, "logs", "edge-functions");
  return query ? `${path}?scope=${query}` : path;
}
function edgeFunctionsPathWithTimeRangeAndBranch({
  siteName,
  from,
  to,
  branch,
  isMainBranch
}) {
  const scope = `&scope=${isMainBranch ? "production" : `branch:${branch}`}`;
  return `/sites/${siteName}/logs/edge-functions${from && to ? `?from=${from}&to=${to}` : ""}${scope}`;
}
function formsPath(site) {
  return sitePath(site, "forms");
}
function formPath(site, formId) {
  return formId ? sitePath(site, "forms", formId) : formsPath(site);
}
function dnsPath(account, ...rest) {
  return accountPath(account, "dns", ...rest);
}
function accountPath(account, ...rest) {
  return ["/teams", account.slug, ...rest].join("/");
}
function reviewerPath(account, ...rest) {
  return accountPath(account, "reviewer", ...rest);
}
function teamSettingsPath(account, ...rest) {
  return accountPath(account, "settings", ...rest);
}
function teamAuditLogPath(account, ...rest) {
  return accountPath(account, "log", ...rest);
}
function billingPath(account, ...rest) {
  return accountPath(account, "billing", ...rest);
}
function enterpriseUpgradePath(account) {
  const params = new URLSearchParams({ plan: "enterprise" });
  return `${billingPath(account, "payment")}?${params.toString()}`;
}
function getPathSegments(path) {
  return path.split("/").filter(Boolean);
}
function getPathSegmentsWithoutParams(path, params = {}) {
  const paramValues = Object.values(params);
  return getPathSegments(path).filter(
    (segment) => !paramValues.includes(segment)
  );
}
function getLastSegmentOfPath(path) {
  return getPathSegments(path).pop() || "";
}
function forumsPath(path = "") {
  return `https://answers.netlify.com/${path}`;
}
function blogPath(path = "") {
  return `https://blog.netlify.com/${path}`;
}
function organizationPath(organization, ...rest) {
  return ["/organizations", organization.slug, ...rest].join("/");
}
function integrationsPath(path = "") {
  return `https://www.netlify.com/integrations/${path}`;
}
function docsPathWithHash(...rest) {
  let hash = rest.pop() || "";
  if (!hash.startsWith("#")) {
    hash = `#${hash}`;
  }
  return ["https://docs.netlify.com", ...rest, hash].join("/");
}
function docsPath(...rest) {
  return ["https://docs.netlify.com", ...rest, ""].join("/");
}
function pathnameMatchesPattern(regexp) {
  return regexp.test(window.location.pathname);
}
exports.accountPath = accountPath;
exports.billingPath = billingPath;
exports.blogPath = blogPath;
exports.buildPath = buildPath;
exports.buildsPath = buildsPath;
exports.deployPath = deployPath;
exports.deploysPath = deploysPath;
exports.devServerPath = devServerPath;
exports.devServerPathWithSite = devServerPathWithSite;
exports.dnsPath = dnsPath;
exports.docsPath = docsPath;
exports.docsPathWithHash = docsPathWithHash;
exports.edgeFunctionsPath = edgeFunctionsPath;
exports.edgeFunctionsPathWithTimeRangeAndBranch = edgeFunctionsPathWithTimeRangeAndBranch;
exports.enterpriseUpgradePath = enterpriseUpgradePath;
exports.formPath = formPath;
exports.formsPath = formsPath;
exports.forumsPath = forumsPath;
exports.functionPath = functionPath;
exports.functionPathWithTimeRangeAndBranch = functionPathWithTimeRangeAndBranch;
exports.functionsPath = functionsPath;
exports.getLastSegmentOfPath = getLastSegmentOfPath;
exports.getPathSegments = getPathSegments;
exports.getPathSegmentsWithoutParams = getPathSegmentsWithoutParams;
exports.integrationsPath = integrationsPath;
exports.membersBuildPath = membersBuildPath;
exports.membersPath = membersPath;
exports.organizationPath = organizationPath;
exports.pathnameMatchesPattern = pathnameMatchesPattern;
exports.reviewerPath = reviewerPath;
exports.sitePath = sitePath;
exports.siteSettingsPath = siteSettingsPath;
exports.sitesPath = sitesPath;
exports.teamAuditLogPath = teamAuditLogPath;
exports.teamSettingsPath = teamSettingsPath;
//# sourceMappingURL=path.cjs.map
