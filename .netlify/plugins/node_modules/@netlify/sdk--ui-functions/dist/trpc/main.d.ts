/**
 * @module @netlify/sdk/ui/functions/trpc
 */
import type { Context as NetlifyContext } from "@netlify/types";
import type { AnyTRPCRouter } from "@trpc/server";
import { type NetlifySDKContext as BaseNetlifySDKContext } from "../sdk_context.js";
type Handler = (req: Request, context: NetlifyContext) => Promise<Response>;
type TRPCNetlifyContext = Omit<NetlifyContext, "json" | "next" | "rewrite">;
/**
 * `Context` is an extended version of tRPC's built-in Context object that includes Netlify
 * SDK-specific extensions.
 *
 * You can consume this type when you initialize tRPC.
 *
 * @example
 * ```ts
 * import { type Context as BaseContext } from "@netlify/sdk/ui/functions/trpc";
 *
 * type MyExtensionCustomContext = {
 *   // ...
 * };
 *
 * export type Context = Context<MyExtensionCustomContext>;
 *
 * const trpc = initTRPC.context<Context>().create();
 * ```
 */
export type Context<CustomContext = Record<string, unknown>, NetlifySDKContext extends BaseNetlifySDKContext = BaseNetlifySDKContext> = TRPCNetlifyContext & NetlifySDKContext & CustomContext;
export type CreateNetlifyTRPCHandlerOptions<CustomContext, NetlifySDKContext extends BaseNetlifySDKContext = BaseNetlifySDKContext> = {
    createContext?: ((options: {
        req: Request;
        resHeaders: Headers;
        context: NetlifyContext & NetlifySDKContext;
    }) => CustomContext) | undefined;
    endpoint: string;
    router: AnyTRPCRouter;
};
/**
 * `createNetlifyTRPCHandler` accepts a tRPC router and installs Netlify SDK-specific extensions
 * onto it.
 *
 * When using tRPC to build Extension UIs, you must wrap your tRPC router using this function.
 *
 * @param options
 * @example
 * ```ts
 * import { createNetlifyTRPCHandler } from "@netlify/sdk/ui/functions/trpc";
 * import { appRouter } from "./router.js";
 *
  const handler = createNetlifyTRPCHandler({
    endpoint: "/api/trpc",
    router: appRouter,
  });
 * ```
 */
export declare const createNetlifyTRPCHandler: <CustomContext>({ router, endpoint, createContext, }: CreateNetlifyTRPCHandlerOptions<CustomContext>) => Handler;
export {};
//# sourceMappingURL=main.d.ts.map