{"version":3,"file":"FormField.js","sources":["../../../src/components/vendor/FormField.tsx"],"sourcesContent":["/* eslint-disable -- vendored file, it originally had no types and a different eslint config */\n\nimport { cn, DecorativeIcon, type IconName } from \"@netlify/ui\";\nimport type {\n  ChangeEvent,\n  ForwardRefRenderFunction,\n  HTMLProps,\n  ReactElement,\n} from \"react\";\nimport { cloneElement, createElement, forwardRef, useState } from \"react\";\n\nimport AlertSmall from './AlertSmall/AlertSmall.js';\n\nconst inputTypes = {\n  textarea: \"textarea\",\n};\n\nconst noop = (_e: Event | FocusEvent | ChangeEvent<HTMLInputElement>) => {};\n\nconst floatingTipWrapperCN = (absolute = false) => {\n  return cn(\"tw-mr-0\", \"tw-relative\", absolute && `tw-w-9/10 md:tw-w-auto`);\n};\n\nconst floatingTipHelpTextCN = (absolute = false) =>\n  cn(\n    \"md:tw-absolute\",\n    \"md:tw-items-center\",\n    \"md:tw-pl-10\",\n    \"md:tw-right-2\",\n    \"md:tw-text-base\",\n    \"md:tw-w-66\",\n    \"tw-block\",\n    \"tw-duration-250\",\n    \"tw-ease-ease\",\n    \"tw-h-9\",\n    \"!tw-m-0\",\n    \"tw-pl-0\",\n    \"tw-static\",\n    \"tw-text-sm\",\n    \"tw-transition-opacity\",\n    \"tw-w-auto\",\n    \"md:tw-flex\",\n    absolute\n      ? \"tw-top-0 tw-h-auto tw--translate-y-2 tw-translate-x-full\"\n      : \"tw--mt-px tw--translate-y-full tw-translate-x-full\",\n  );\n\nconst formControlCN = cn(\n  \"tw-appearance-none\",\n  \"tw-bg-white\",\n  \"tw-border\",\n  \"tw-border-gray-dark\",\n  \"tw-box-border\",\n  \"tw-flex\",\n  \"tw-flex-1\",\n  \"tw-font-medium\",\n  \"tw-h-9\",\n  \"tw-items-center\",\n  \"tw-leading-very-chill\",\n  \"tw-m-0\",\n  \"tw-w-full\",\n  \"tw-px-3.5\",\n  \"tw-py-1.5\",\n  \"tw-rounded-sm\",\n  \"tw-shadow-none\",\n  \"tw-text-base\",\n  \"tw-text-black\",\n  \"focus-within:tw-ring-2\",\n  \"focus-within:tw-outline-none\",\n  \"group-hover:tw-border-gray-darker\",\n  \"group-hover:focus-within:tw-ring-2\",\n  \"group-hover:focus-within:tw-outline-none\",\n  \"dark:tw-border-gray-light\",\n  \"dark:tw-bg-black\",\n  \"dark:tw-text-white\",\n  \"dark:focus-within:tw-border-gray-lightest\",\n  \"dark:group-hover:tw-border-gray-lighter\",\n  \"dark:group-hover:focus-within:tw-ring-2\",\n  \"dark:group-hover:focus-within:tw-outline-none\",\n);\n\nconst helpTextCN = cn(\n  \"tw-text-gray-darker\",\n  \"tw-block\",\n  \"tw-text-sm\",\n  \"tw-font-regular\",\n  \"tw-max-w-170\",\n  \"tw-my-1\",\n  \"tw-mx-0.5\",\n  \"[&>p:first-child]:tw-mt-0\",\n  \"dark:tw-text-gray-lighter\",\n);\n\nconst prefixCN = cn(\n  \"tw-flex-none\",\n  \"tw-leading-asleep\",\n  \"tw-rounded-sm\",\n  \"tw-whitespace-nowrap\",\n);\n\nconst suffixCN = cn(\n  \"tw--mr-2.5\",\n  \"tw-flex-none\",\n  \"tw-leading-asleep\",\n  \"tw-px-2\",\n  \"tw-rounded-bl-none\",\n  \"tw-rounded-sm\",\n  \"tw-rounded-tl-none\",\n  \"tw-whitespace-nowrap\",\n);\n\n// Until we refactor how this shared component is used downstream to be directly\n// compatible with the standard HTMLInputELementInterface, we need to omit and reset\n// the currently used variants of the HTML Types.\ntype ModifiedHTMLInputElementInterface = Omit<\n  HTMLProps<HTMLInputElement>,\n  // labels are currently being sent as strings and, less common, as React Elements\n  \"label\"\n>;\n\nexport interface FormFieldProps extends ModifiedHTMLInputElementInterface {\n  preventTyping?: boolean;\n  onFocus?: typeof noop;\n  onBlur?: typeof noop;\n  onChange?: (e: ChangeEvent<HTMLInputElement>) => void;\n  absolute?: false;\n  checkbox?: false;\n  control?: ReactElement;\n  helpText?: any;\n  // tooltip is NOT supported when `leftLabel` is true\n  tooltip?: any;\n  controlled?: any;\n  error?: any;\n  type?: any;\n  defaultValue?: any;\n  placeholder?: any;\n  disabled?: any;\n  required?: any;\n  readOnly?: any;\n  prefix?: any;\n  suffix?: any;\n  onValidate?: any;\n  contentType?: string;\n  focused?: boolean;\n  visuallyHideLabel?: boolean;\n  secondary?: any;\n  fullMaxWidth?: any;\n  floatingLabel?: boolean;\n  floatingTip?: boolean;\n  iconLabel?: IconName;\n  compact?: boolean;\n  helpTextTiny?: boolean;\n  pattern?: any;\n  value?: any;\n  label?: string | ReactElement;\n  rows?: number;\n  minLength?: number;\n  leftLabel?: boolean;\n}\n\nconst FormField: ForwardRefRenderFunction<\n  HTMLInputElement | HTMLTextAreaElement,\n  FormFieldProps\n> = (\n  {\n    preventTyping = true,\n    onFocus = noop,\n    onBlur = noop,\n    onChange = noop,\n    absolute = false,\n    className,\n    checkbox = false,\n    control,\n    label,\n    helpText,\n    tooltip,\n    controlled,\n    error,\n    type,\n    defaultValue,\n    placeholder,\n    disabled,\n    required,\n    readOnly,\n    prefix,\n    suffix,\n    onValidate,\n    contentType = \"text\",\n    focused = false,\n    visuallyHideLabel = false,\n    secondary,\n    fullMaxWidth,\n    floatingLabel = false,\n    floatingTip = false,\n    iconLabel,\n    compact = false,\n    helpTextTiny = false,\n    pattern,\n    value,\n    leftLabel = false,\n    ...restProps\n  },\n  forwardedRef,\n) => {\n  const inputId =\n    restProps.id || `nf_field_${control?.props.name || crypto.randomUUID()}`;\n  const [id] = useState(inputId);\n  const [focus, setFocus] = useState(false);\n  const [valueState, setValue] = useState(controlled ? null : value);\n\n  let inputRef: HTMLInputElement | HTMLTextAreaElement | null = null;\n\n  function allowsChange(valueToTest: any) {\n    const preventChange =\n      preventTyping &&\n      pattern &&\n      valueToTest &&\n      !new RegExp(pattern).test(\n        valueToTest.trim ? valueToTest.trim() : valueToTest,\n      );\n    return !preventChange;\n  }\n\n  function validate(value: any) {\n    const validation = onValidate ? onValidate(value) : {};\n    if (onValidate && inputRef) {\n      inputRef.setCustomValidity(validation.error || \"\");\n    }\n    return validation;\n  }\n\n  function handleFocus(e?: any) {\n    setFocus(true);\n    onFocus(e);\n  }\n\n  function handleBlur(e: any) {\n    const currentValue = controlled ? value : valueState;\n\n    if (typeof currentValue === \"string\") {\n      const trimmed =\n        currentValue && currentValue.trim ? currentValue.trim() : currentValue;\n      if (currentValue !== trimmed) {\n        handleChange({ target: { name: e.target.name, value: trimmed } });\n      }\n    }\n\n    setFocus(false);\n    onBlur(e);\n  }\n\n  function handleChange(e: any) {\n    const { value: targetValue } = e.target;\n    if (!allowsChange(targetValue)) {\n      return;\n    }\n\n    if (validate(targetValue).stopPropagation) {\n      return;\n    }\n\n    if (!controlled) {\n      setValue(targetValue);\n    }\n\n    onChange(e);\n  }\n\n  function setRef(ref: any) {\n    inputRef = ref?.querySelector(\"input, textarea\");\n  }\n\n  const currentValue = controlled ? value : valueState;\n  let initialInputVal;\n\n  if (defaultValue) {\n    initialInputVal = undefined;\n  } else if (currentValue || currentValue === 0) {\n    initialInputVal = currentValue;\n  } else {\n    initialInputVal = \"\";\n  }\n\n  const descriptiveNodeId = `${id}__helper`;\n  const ariaDescribedBy = helpText || error ? descriptiveNodeId : null;\n\n  const input = control\n    ? // this spreads `id` into the child control input\n      // so that the label's `for` attribute matches the input's `id` attribute\n      // https://github.com/netlify/netlify-react-ui/pull/13789\n      cloneElement(control, { id, \"aria-describedby\": ariaDescribedBy })\n    : createElement(\n        // @ts-expect-error\n        inputTypes[type] || \"input\",\n        {\n          \"aria-describedby\": ariaDescribedBy,\n          id,\n          ref: forwardedRef,\n          autoComplete: \"off\",\n          autoCorrect: \"off\",\n          autoCapitalize: \"none\",\n          spellCheck: \"false\",\n          ...restProps,\n          type: type || \"text\",\n          defaultValue,\n          value: initialInputVal,\n          placeholder,\n          disabled,\n          required,\n          className: cn({\n            \"tw-cursor-not-allowed\": disabled,\n            \"tw-font-mono\": contentType === \"code\",\n            \"tw-flex-1 tw-bg-transparent tw-border-none tw-p-0 focus:tw-ring-0 dark:tw-bg-transparent dark:tw-border-none dark:focus:tw-ring-0\":\n              suffix || prefix,\n          }),\n          readOnly,\n          autoFocus: focused,\n          onFocus: handleFocus,\n          onBlur: handleBlur,\n          onChange: handleChange,\n        },\n        type === \"textarea\" ? currentValue : null,\n      );\n\n  const floatingTransform =\n    focus ||\n    prefix ||\n    defaultValue ||\n    currentValue ||\n    currentValue === 0 ||\n    placeholder ||\n    control;\n\n  label = iconLabel ? (\n    <>\n      <DecorativeIcon\n        name={iconLabel}\n        width={20}\n        className=\"placeholder tw-mt-2\"\n      />\n      {label && <span className=\"tw-sr-only\">{label}</span>}\n    </>\n  ) : (\n    label\n  );\n\n  return (\n    <div\n      className={cn(\"tw-c-form-field tw-group\", className, {\n        // XXX(ndhoule): I removed these because elements shouldn't arbitrarily decide how far they\n        // should be from other elements--it leads to inconsistency. You should use flex gapping or\n        // apply margin to children via a selector on the parent for this.\n        //\n        // \"!tw-mt-9\": floatingLabel && !iconLabel && !compact,\n        // \"tw-mt-4\": !!iconLabel || compact,\n        // \"tw-mt-6\": !iconLabel && !compact && !floatingLabel,\n        \"tw-opacity-54\": disabled,\n        \"tw-inline\": checkbox && error,\n        \"tw-max-w-100\": fullMaxWidth,\n        [floatingTipWrapperCN(absolute)]: floatingTip,\n        \"!tw-mt-0\": leftLabel,\n      })}\n      ref={setRef}\n    >\n      <div\n        className={cn(\n          \"form-field-container\",\n          leftLabel && \"!tw-flex tw-w-full tw-flex-wrap\",\n        )}\n      >\n        {label && (\n          <div\n            className={cn(\n              \"tw-c-form-field-label\",\n              leftLabel\n                ? \"tw-mr-6 tw-flex tw-w-full !tw-flex-[0_0_25%] tw-break-all tw-pt-2 tw-text-base !tw-font-regular !tw-text-gray-darkest after:tw-content-none dark:!tw-text-gray-lightest\"\n                : \"tw-font-regular tw-text-gray-darker dark:tw-text-gray-lighter\",\n              {\n                \"tw-pb-[5px]\": !leftLabel && !visuallyHideLabel,\n                \"tw-leading-tight\": floatingLabel,\n                \"tw-pointer-events-none tw-cursor-text\":\n                  floatingLabel && !floatingTransform,\n                \"tw-cursor-not-allowed\": disabled,\n                \"!tw-sr-only\": visuallyHideLabel,\n                \"tw-absolute tw-hidden\": secondary,\n                \"tw-translate-z-0 tw-transition-ease tw-absolute tw-text-base tw-duration-200\":\n                  floatingLabel,\n                // 16 * 0.875 = 14px\n                \"tw-scale-[0.875] tw-translate-x-[-6%] tw--translate-y-[97%]\":\n                  floatingTransform && floatingLabel,\n                \"tw-translate-x-[calc(theme(spacing.4)-theme(borderWidth.DEFAULT))] tw-translate-y-2\":\n                  !floatingTransform && floatingLabel,\n              },\n            )}\n          >\n            <label\n              className={cn({ \"after:tw-content-colon\": leftLabel })}\n              htmlFor={id}\n            >\n              {label}\n            </label>\n          </div>\n        )}\n        <div className={cn(leftLabel && \"tw-flex-1\")}>\n          {prefix || suffix ? (\n            <div className={cn(formControlCN)}>\n              {!!prefix && <span className={prefixCN}>{prefix}</span>}\n              {input}\n              {!!suffix && <span className={suffixCN}>{suffix}</span>}\n            </div>\n          ) : (\n            input\n          )}\n          {!error && !leftLabel && tooltip}\n          {!error && helpText && (\n            <div\n              id={descriptiveNodeId}\n              data-testid=\"help-text\"\n              className={cn(helpTextCN, {\n                \"tw-opacity-100\": floatingTip && focus,\n                \"tw-opacity-0\": floatingTip && !focus,\n                [floatingTipHelpTextCN(absolute)]: floatingTip,\n                \"!tw-text-xs\": helpTextTiny,\n                \"tw-cursor-not-allowed\": disabled,\n              })}\n            >\n              {helpText}\n            </div>\n          )}\n          {error && (\n            <AlertSmall\n              id={descriptiveNodeId}\n              variant=\"form-field\"\n              error={String(error)}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default forwardRef<\n  HTMLInputElement | HTMLTextAreaElement,\n  FormFieldProps\n>(FormField);\n"],"names":["value","currentValue"],"mappings":"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"}