/*
 * The CONNECT_PROVIDER message should be sent when the surface wants to initialize the OAuth flow
 * to its corresponding auth provider.
 *
 * This will redirect the user through the third party's OAuth flow, finally redirecting the user
 * back to the extension surface on success.
 */
import { z } from "zod";
export const UI_EXTENSION_SURFACE_CONNECT_PROVIDER_EVENT_TYPE = "NF::EUI_SURFACE::CONNECT_PROVIDER";
export const UIExtensionSurfaceConnectProviderEventSchema = z.object({
    type: z.literal(UI_EXTENSION_SURFACE_CONNECT_PROVIDER_EVENT_TYPE),
    data: z
        .object({
        additionalAuthURLQueryParams: z
            .record(z.string())
            .optional()
            .default(() => ({})),
    })
        .optional()
        .default(() => ({})),
});
export const createUIExtensionSurfaceConnectProviderEvent = (data = {
    additionalAuthURLQueryParams: {},
}) => ({
    type: UI_EXTENSION_SURFACE_CONNECT_PROVIDER_EVENT_TYPE,
    data,
});
//# sourceMappingURL=connect_provider.js.map