import { jsx, jsxs, Fragment } from "react/jsx-runtime";
import { cn, DecorativeIcon, capitalize } from "@netlify/ui";
import { forwardRef, useState } from "react";
import FormField from "./FormField.js";
const toggleStyles = cn(
  "!tw-bg-transparent",
  "tw-border-none",
  "tw-rounded-full",
  "tw-flex",
  "tw-justify-center",
  "tw-items-center",
  "tw-p-0",
  "tw-outline-0",
  "tw-h-6",
  "tw-w-6",
  "tw-text-inherit",
  "focus-visible:tw-ring focus-visible:tw-ring-offset-1"
);
const FormFieldSecret = ({
  defaultRevealed = false,
  accessibleCopyName = "value",
  id,
  onToggleSecretClick,
  ariaLabelText = "",
  className,
  disabled,
  readOnly,
  ...rest
}, ref) => {
  const [derivedId] = useState(`nf_field_secret_${id ?? crypto.randomUUID()}`);
  const [revealed, setRevealed] = useState(defaultRevealed);
  const handleToggleSecret = () => {
    setRevealed(!revealed);
    onToggleSecretClick == null ? void 0 : onToggleSecretClick(revealed);
  };
  return /* @__PURE__ */ jsx(
    FormField,
    {
      ref,
      ...rest,
      className: cn(className, "fs-exclude"),
      type: revealed ? "text" : "password",
      id: derivedId,
      "aria-label": revealed ? `${ariaLabelText}This value is revealed.` : `${ariaLabelText}This value is hidden.`,
      disabled,
      readOnly,
      "data-hj-suppress": true,
      suffix: !disabled && !readOnly && /* @__PURE__ */ jsxs(Fragment, { children: [
        /* @__PURE__ */ jsx(
          "button",
          {
            type: "button",
            "aria-controls": derivedId,
            className: toggleStyles,
            onClick: handleToggleSecret,
            "aria-label": revealed ? `Hide ${accessibleCopyName}` : `Show ${accessibleCopyName}`,
            children: /* @__PURE__ */ jsx(DecorativeIcon, { name: revealed ? "eye-closed" : "eye-open" })
          }
        ),
        !ariaLabelText && /* @__PURE__ */ jsx("span", { className: "tw-sr-only", "aria-live": "polite", children: revealed ? `${capitalize(accessibleCopyName)} is shown` : `${capitalize(accessibleCopyName)} is hidden` })
      ] })
    }
  );
};
const BaseFormFieldSecret = forwardRef(
  FormFieldSecret
);
export {
  BaseFormFieldSecret as default
};
//# sourceMappingURL=FormFieldSecret.js.map
