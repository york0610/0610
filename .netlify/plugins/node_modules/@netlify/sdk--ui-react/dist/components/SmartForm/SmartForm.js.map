{"version":3,"file":"SmartForm.js","sources":["../../../src/components/SmartForm/SmartForm.tsx"],"sourcesContent":["import { type DefaultValues } from \"react-hook-form\";\nimport { z, ZodObject, ZodType } from \"zod\";\nimport { Checkbox, Form, FormField, FormFieldSecret } from \"../main.js\";\nimport {\n  type SmartFormFieldMetadata,\n  type SmartFormFieldsMetadata,\n} from \"./common.js\";\nimport { getZodField, getZodFieldTypeName } from \"./zod-helpers.js\";\n\nexport type SmartFormProps<\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  Schema extends ZodObject<any>,\n> = {\n  /**\n   * A set of initial values used to pre-fill the form.\n   */\n  defaultValues?: DefaultValues<z.infer<Schema>> | undefined;\n  /**\n   * A callback function invoked when a user clicks the \"Save\" button.\n   *\n   * The submit button is not displayed by default; you must pass the `onSubmit` props for it to\n   * appear.\n   */\n  onSubmit?: ((data: z.infer<Schema>) => Promise<void> | void) | undefined;\n  /**\n   * A zod schema that defines the shape of the form.\n   *\n   * Only ZodObject, ZodString, ZodBoolean, and ZodNumber are supported at this time.\n   */\n  schema: Schema;\n  /**\n   * A zod schema that defines additional metadata for the form fields.\n   */\n  fieldsMeta: SmartFormFieldsMetadata;\n};\n\n/**\n * A `SmartForm` wraps a `Form` and automatically generates form fields based on a Zod schema.\n *\n * @example\n * ```tsx\n * import { SmartForm } from \"@netlify/sdk/ui/react/components\";\n * import { z } from \"zod\";\n *\n *   const schema = z.object({\n *     apiKey: z.string().trim().min(1),\n *     baseUrl: z.string().trim().url(),\n *     stuffEnabled: z.boolean().optional(),\n *   });\n *\n *  const fieldsMeta = {\n *    apiKey: {\n *      label: \"API Key\",\n *      helpText: \"Put your API key here\",\n *      secret: true,\n *    },\n *    baseUrl: {\n *      label: \"Base URL\",\n *      helpText: \"The base URL of your API instance\",\n *    },\n *    stuffEnabled: {\n *      label: \"Enable Stuff\",\n *      helpText: \"Should we enable everything?\",\n *    },\n *  };\n *\n *   <SmartForm\n *     schema={schema}\n *     fieldsMeta={fieldsMeta}\n *     defaultValues={{ baseUrl: \"https://www.example.com\" }}\n *     onSubmit={(fields) => console.log(\"Form submitted.\", { fields })}\n *   />\n * ```\n */\nexport const SmartForm = <\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  Schema extends ZodObject<any>,\n>({\n  defaultValues,\n  onSubmit,\n  schema,\n  fieldsMeta,\n}: SmartFormProps<Schema>): JSX.Element => {\n  return (\n    <Form defaultValues={defaultValues} onSubmit={onSubmit} schema={schema}>\n      {Object.entries(schema.shape as Record<string, ZodType>).map(\n        ([key, value], idx) => {\n          const zodField = getZodField(value);\n          const fieldType = getZodFieldTypeName(zodField);\n          if (fieldType === \"ZodObject\") {\n            let nestedFieldsMeta: SmartFormFieldsMetadata | undefined =\n              undefined;\n\n            // TODO: Validate fieldsMeta with the Zod schema\n            if (key in fieldsMeta) {\n              nestedFieldsMeta = fieldsMeta[key] as SmartFormFieldsMetadata;\n            }\n            return (\n              <ZodFormFields\n                key={`${idx.toString()}:${key}`}\n                name={key}\n                zodFieldValue={value}\n                fieldsMeta={nestedFieldsMeta}\n              />\n            );\n          } else {\n            const fieldMeta = fieldsMeta[key] as\n              | SmartFormFieldMetadata\n              | undefined;\n\n            return (\n              <ZodFormField\n                key={`${idx.toString()}:${key}`}\n                name={key}\n                zodFieldType={fieldType}\n                fieldMeta={fieldMeta}\n              />\n            );\n          }\n        },\n      )}\n    </Form>\n  );\n};\n\nconst ZodFormField = ({\n  name,\n  zodFieldType,\n  fieldMeta,\n}: {\n  name: string;\n  zodFieldType: string;\n  fieldMeta?: SmartFormFieldMetadata | undefined;\n}) => {\n  // The names of the fields use dot notion to work with zod schemas\n  // For a fallback name we just want to grab the last part of the name\n  // For example: `config.someField` becomes `SomeField`\n  const match = name.match(`(.+)\\\\.(.+)`);\n  const fallbackLabelName = match?.[2] ?? name;\n\n  const fallbackLabel =\n    fallbackLabelName.charAt(0).toUpperCase() + fallbackLabelName.slice(1);\n\n  if (zodFieldType === \"ZodString\" && fieldMeta?.secret) {\n    return (\n      <FormFieldSecret\n        name={name}\n        label={fieldMeta.label}\n        helpText={fieldMeta.helpText}\n      />\n    );\n  }\n\n  if (zodFieldType === \"ZodString\" || zodFieldType === \"ZodNumber\") {\n    return (\n      <FormField\n        name={name}\n        label={fieldMeta?.label ?? fallbackLabel}\n        placeholder={fieldMeta?.placeholder}\n        helpText={fieldMeta?.helpText}\n        type={zodFieldType === \"ZodNumber\" ? \"number\" : \"text\"}\n      />\n    );\n  }\n\n  if (zodFieldType === \"ZodBoolean\") {\n    return (\n      <Checkbox\n        name={name}\n        label={fieldMeta?.label ?? fallbackLabel}\n        helpText={fieldMeta?.helpText}\n      />\n    );\n  }\n\n  console.error(\n    `FormFieldsFromSchema: Not implemented field type: ${zodFieldType}`,\n  );\n\n  return null;\n};\n\nconst ZodFormFields = ({\n  name,\n  zodFieldValue,\n  fieldsMeta,\n}: {\n  name: string;\n  zodFieldValue: ZodType;\n  fieldsMeta?: SmartFormFieldsMetadata | undefined;\n}) => {\n  const zodField = getZodField(zodFieldValue);\n  const fieldType = getZodFieldTypeName(zodField);\n  // TODO: Do we want to wrap this in a UI container so you can nest form components visually?\n  if (fieldType === \"ZodObject\") {\n    return (\n      <>\n        {Object.entries(\n          (zodFieldValue as z.ZodObject<z.ZodRawShape>).shape,\n        ).map(([key, value], idx) => {\n          const zodField = getZodField(value as ZodType);\n          const fieldType = getZodFieldTypeName(zodField);\n          if (fieldType === \"ZodObject\") {\n            let nestedFieldsMeta: SmartFormFieldsMetadata | undefined =\n              undefined;\n\n            if (\n              fieldsMeta !== undefined &&\n              key in fieldsMeta &&\n              Object.prototype.hasOwnProperty.call(fieldsMeta, key)\n            ) {\n              nestedFieldsMeta = fieldsMeta[key] as SmartFormFieldsMetadata;\n            }\n            return (\n              <ZodFormFields\n                key={`${idx.toString()}:${key}`}\n                name={`${name}.${key}`}\n                zodFieldValue={value}\n                fieldsMeta={nestedFieldsMeta}\n              />\n            );\n          } else {\n            const fieldMeta = fieldsMeta?.[key] as\n              | SmartFormFieldMetadata\n              | undefined;\n\n            return (\n              <ZodFormField\n                key={`${idx.toString()}:${key}`}\n                name={`${name}.${key}`}\n                zodFieldType={fieldType}\n                fieldMeta={fieldMeta}\n              />\n            );\n          }\n        })}\n      </>\n    );\n  }\n\n  console.error(\n    `FormFieldsFromSchema: Not implemented field type: ${fieldType}`,\n  );\n\n  return null;\n};\n"],"names":["zodField","fieldType"],"mappings":"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"}