/*
 * The UPDATE_CONTEXT message is sent when the host has updated metadata (e.g. when routing state
 * has changed, when an authentication token has been revoked, etc.).
 *
 * The host must send the full context in this message, not a diff.
 */
import { z } from "zod";
export const UI_EXTENSION_HOST_UPDATE_CONTEXT_EVENT_TYPE = "NF::EUI_HOST::UPDATE_CONTEXT";
export const UIExtensionHostUpdateContextEventSchema = z.object({
    type: z.literal(UI_EXTENSION_HOST_UPDATE_CONTEXT_EVENT_TYPE),
    data: z.object({
        context: z.object({
            auth: z.object({
                netlifyToken: z
                    .string()
                    .trim()
                    .nullable()
                    .default(null)
                    .transform((value) => (value === "" ? null : value)),
                providerToken: z
                    .string()
                    .trim()
                    .nullable()
                    .default(null)
                    .transform((value) => (value === "" ? null : value)),
                providerTokens: z
                    .array(z.object({
                    externalId: z.string().trim().min(1),
                    token: z.string().trim().min(1),
                    connectionId: z.string().trim().min(1),
                }))
                    .default(() => []),
            }),
            user: z
                .object({
                id: z
                    .string()
                    .trim()
                    .nullable()
                    .default(null)
                    .transform((value) => (value === "" ? null : value)),
            })
                .default({ id: null }),
            configurationId: z
                .string()
                .trim()
                .nullable()
                .default(null)
                .transform((value) => (value === "" ? null : value)),
            dataLayerId: z
                .string()
                .trim()
                .nullable()
                .default(null)
                .transform((value) => (value === "" ? null : value)),
            projectId: z
                .string()
                .trim()
                .nullable()
                .default(null)
                .transform((value) => (value === "" ? null : value)),
            siteId: z
                .string()
                .trim()
                .nullable()
                .default(null)
                .transform((value) => (value === "" ? null : value)),
            teamId: z
                .string()
                .trim()
                .nullable()
                .default(null)
                .transform((value) => (value === "" ? null : value)),
            accountId: z
                .string()
                .trim()
                .nullable()
                .default(null)
                .transform((value) => (value === "" ? null : value)),
            theme: z.enum(["light", "dark"]),
            visualEditor: z.object({
                webhookBaseURL: z
                    .string()
                    .trim()
                    .nullable()
                    .default(null)
                    .transform((value) => (value === "" ? null : value)),
                projectId: z
                    .string()
                    .trim()
                    .nullable()
                    .default(null)
                    .transform((value) => (value === "" ? null : value)),
                notifyVisualEditor: z.boolean().nullable().default(true),
            }),
            /**
             * The ID of the current deploy. This is only available when the extension surface is rendered in the context of a deploy. (e.g. Surfaces.SiteBuildDeploy)
             */
            deployId: z
                .string()
                .trim()
                .nullable()
                .default(null)
                .transform((value) => (value === "" ? null : value)),
        }),
    }),
});
export const createUIExtensionHostUpdateContextEvent = (data) => ({
    type: UI_EXTENSION_HOST_UPDATE_CONTEXT_EVENT_TYPE,
    data,
});
//# sourceMappingURL=update_context.js.map