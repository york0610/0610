/*
 * The INITIALIZE message is sent when the host has received an initialization event from the
 * surface. It should contain most, if not all, data the surface would need to start begin rendering
 * (e.g. metadata about the extension, authentication credentials, etc.)
 */
import { z } from "zod";
import { Surfaces } from "../../surfaces.js";
export const UI_EXTENSION_HOST_INITIALIZE_EVENT_TYPE = "NF::EUI_HOST::INITIALIZE";
export const UIExtensionHostInitializeEventSchema = z.object({
    type: z.literal(UI_EXTENSION_HOST_INITIALIZE_EVENT_TYPE),
    data: z.object({
        context: z.object({
            auth: z.object({
                netlifyToken: z.string().nullable().default(null),
                providerToken: z.string().nullable().default(null),
                providerTokens: z
                    .array(z.object({
                    externalId: z.string().min(1).trim(),
                    token: z.string().min(1).trim(),
                    connectionId: z.string().min(1).trim(),
                }))
                    .default(() => []),
            }),
            user: z
                .object({
                id: z.string().nullable().default(null),
            })
                .default({ id: null }),
            visualEditor: z.object({
                webhookBaseURL: z.string().nullable().default(null),
                projectId: z.string().nullable().default(null),
                notifyVisualEditor: z.boolean().nullable().default(true),
            }),
            configurationId: z.string().nullable().default(null),
            dataLayerId: z.string().nullable().default(null),
            projectId: z.string().nullable().default(null),
            siteId: z.string().nullable().default(null),
            /**
             * `teamId` is an alias for `accountId`
             */
            teamId: z.string().nullable().default(null),
            /**
             * `accountId` is an alias for `teamId`
             */
            accountId: z.string().nullable().default(null),
            theme: z.enum(["light", "dark"]),
            /**
             * The ID of the current deploy. This is only available when the extension surface is rendered in the context of a deploy. (e.g. Surfaces.SiteBuildDeploy)
             */
            deployId: z
                .string()
                .trim()
                .nullable()
                .default(null)
                .transform((value) => (value === "" ? null : value)),
        }),
        extension: z.object({
            id: z.string(),
            name: z.string(),
            slug: z.string(),
        }),
        surface: z.object({
            name: z.nativeEnum(Surfaces),
        }),
    }),
});
export const createUIExtensionHostInitializeEvent = (data) => ({
    type: UI_EXTENSION_HOST_INITIALIZE_EVENT_TYPE,
    data,
});
//# sourceMappingURL=initialize.js.map