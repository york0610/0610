"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const jsxRuntime = require("react/jsx-runtime");
const React = require("react");
const helpers_cn = require("./helpers/cn.cjs");
const helpers_placeholderColors = require("./helpers/placeholderColors.cjs");
const OriginalTippy = require("@tippyjs/react");
const helpers_remToPxNumber = require("./helpers/remToPxNumber.cjs");
require("@netlify/netlify-design-tokens");
const Downshift = require("downshift");
const helpers_account = require("./helpers/account.cjs");
const helpers_format = require("./helpers/format.cjs");
const helpers_organizations = require("./helpers/organizations.cjs");
const helpers_plans = require("./helpers/plans.cjs");
const helpers_subscriptions = require("./helpers/subscriptions.cjs");
const helpers_path = require("./helpers/path.cjs");
function _interopNamespaceDefault(e) {
  const n = Object.create(null, { [Symbol.toStringTag]: { value: "Module" } });
  if (e) {
    for (const k in e) {
      if (k !== "default") {
        const d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: () => e[k]
        });
      }
    }
  }
  n.default = e;
  return Object.freeze(n);
}
const React__namespace = /* @__PURE__ */ _interopNamespaceDefault(React);
var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
function getDefaultExportFromCjs(x) {
  return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, "default") ? x["default"] : x;
}
var lodash_split = { exports: {} };
lodash_split.exports;
var hasRequiredLodash_split;
function requireLodash_split() {
  if (hasRequiredLodash_split) return lodash_split.exports;
  hasRequiredLodash_split = 1;
  (function(module2, exports2) {
    var MAX_SAFE_INTEGER = 9007199254740991;
    var MAX_ARRAY_LENGTH = 4294967295;
    var funcTag = "[object Function]", genTag = "[object GeneratorFunction]", regexpTag = "[object RegExp]", symbolTag = "[object Symbol]";
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    var rsAstralRange = "\\ud800-\\udfff", rsComboMarksRange = "\\u0300-\\u036f\\ufe20-\\ufe23", rsComboSymbolsRange = "\\u20d0-\\u20f0", rsVarRange = "\\ufe0e\\ufe0f";
    var rsAstral = "[" + rsAstralRange + "]", rsCombo = "[" + rsComboMarksRange + rsComboSymbolsRange + "]", rsFitz = "\\ud83c[\\udffb-\\udfff]", rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")", rsNonAstral = "[^" + rsAstralRange + "]", rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}", rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]", rsZWJ = "\\u200d";
    var reOptMod = rsModifier + "?", rsOptVar = "[" + rsVarRange + "]?", rsOptJoin = "(?:" + rsZWJ + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*", rsSeq = rsOptVar + reOptMod + rsOptJoin, rsSymbol = "(?:" + [rsNonAstral + rsCombo + "?", rsCombo, rsRegional, rsSurrPair, rsAstral].join("|") + ")";
    var reUnicode = RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g");
    var reHasUnicode = RegExp("[" + rsZWJ + rsAstralRange + rsComboMarksRange + rsComboSymbolsRange + rsVarRange + "]");
    var freeGlobal = typeof commonjsGlobal == "object" && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    var freeExports = exports2 && !exports2.nodeType && exports2;
    var freeModule = freeExports && true && module2 && !module2.nodeType && module2;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var freeProcess = moduleExports && freeGlobal.process;
    var nodeUtil = function() {
      try {
        return freeProcess && freeProcess.binding("util");
      } catch (e) {
      }
    }();
    var nodeIsRegExp = nodeUtil && nodeUtil.isRegExp;
    function asciiToArray(string) {
      return string.split("");
    }
    function baseUnary(func) {
      return function(value) {
        return func(value);
      };
    }
    function hasUnicode(string) {
      return reHasUnicode.test(string);
    }
    function stringToArray(string) {
      return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
    }
    function unicodeToArray(string) {
      return string.match(reUnicode) || [];
    }
    var objectProto = Object.prototype;
    var objectToString = objectProto.toString;
    var Symbol2 = root.Symbol;
    var symbolProto = Symbol2 ? Symbol2.prototype : void 0, symbolToString = symbolProto ? symbolProto.toString : void 0;
    function baseIsRegExp(value) {
      return isObject(value) && objectToString.call(value) == regexpTag;
    }
    function baseSlice(array, start, end) {
      var index = -1, length = array.length;
      if (start < 0) {
        start = -start > length ? 0 : length + start;
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : end - start >>> 0;
      start >>>= 0;
      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }
    function baseToString(value) {
      if (typeof value == "string") {
        return value;
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : "";
      }
      var result = value + "";
      return result == "0" && 1 / value == -Infinity ? "-0" : result;
    }
    function castSlice(array, start, end) {
      var length = array.length;
      end = end === void 0 ? length : end;
      return end >= length ? array : baseSlice(array, start, end);
    }
    function isIndex(value, length) {
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length && (typeof value == "number" || reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
    }
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == "number" ? isArrayLike(object) && isIndex(index, object.length) : type == "string" && index in object) {
        return eq(object[index], value);
      }
      return false;
    }
    function eq(value, other) {
      return value === other || value !== value && other !== other;
    }
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }
    function isFunction(value) {
      var tag = isObject(value) ? objectToString.call(value) : "";
      return tag == funcTag || tag == genTag;
    }
    function isLength(value) {
      return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }
    function isObject(value) {
      var type = typeof value;
      return !!value && (type == "object" || type == "function");
    }
    function isObjectLike(value) {
      return !!value && typeof value == "object";
    }
    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;
    function isSymbol(value) {
      return typeof value == "symbol" || isObjectLike(value) && objectToString.call(value) == symbolTag;
    }
    function toString(value) {
      return value == null ? "" : baseToString(value);
    }
    function split(string, separator, limit) {
      if (limit && typeof limit != "number" && isIterateeCall(string, separator, limit)) {
        separator = limit = void 0;
      }
      limit = limit === void 0 ? MAX_ARRAY_LENGTH : limit >>> 0;
      if (!limit) {
        return [];
      }
      string = toString(string);
      if (string && (typeof separator == "string" || separator != null && !isRegExp(separator))) {
        separator = baseToString(separator);
        if (!separator && hasUnicode(string)) {
          return castSlice(stringToArray(string), 0, limit);
        }
      }
      return string.split(separator, limit);
    }
    module2.exports = split;
  })(lodash_split, lodash_split.exports);
  return lodash_split.exports;
}
var lodash_splitExports = requireLodash_split();
const lodashSplit = /* @__PURE__ */ getDefaultExportFromCjs(lodash_splitExports);
const CLOUDFRONT_BUCKET_BASE_URL = "https://d33wubrfki0l68.cloudfront.net/";
const SCREENSHOT_PROXY_BASE_URL = "https://screenshot-proxy.netlify.app/";
const NETLIFY_IMAGE_CDN_BASE_URL = "/.netlify/images";
const screenshotProxyOptions = ({
  animated,
  cover,
  fit,
  format,
  height,
  scale = 2,
  width
}) => {
  const formattedOptions = [`f_${format}`];
  if ((cover || fit === "cover") && height) {
    formattedOptions.push("fit_cover");
    formattedOptions.push(
      `s_${Math.round(width * scale)}x${Math.round(height * scale)}`
    );
  } else {
    formattedOptions.push(`w_${Math.round(width * scale)}`);
  }
  if (animated) {
    formattedOptions.push("animated");
  }
  return formattedOptions.join(",");
};
const imageCDNOptions = ({
  fit,
  height,
  position,
  quality = 40,
  scale = 2,
  width,
  url
}) => {
  return [
    `url=${encodeURI(url)}`,
    fit && `fit=${fit}`,
    height && `h=${height * scale}`,
    position && `position=${position}`,
    quality && `q=${quality}`,
    width && `w=${width * scale}`
  ].filter(Boolean).join("&");
};
const shouldUseNetlifyImageCDN = (url = "") => {
  return typeof url !== "string" || url.startsWith("/") || url.startsWith(CLOUDFRONT_BUCKET_BASE_URL);
};
const generateImageUrl = (url = "", options) => {
  if (typeof url !== "string" || url.startsWith("blob:") || url.startsWith(SCREENSHOT_PROXY_BASE_URL) || url.startsWith(NETLIFY_IMAGE_CDN_BASE_URL)) {
    return url;
  }
  if (shouldUseNetlifyImageCDN(url)) {
    const fit = options.cover ? "cover" : void 0;
    return `${NETLIFY_IMAGE_CDN_BASE_URL}?${imageCDNOptions({ url, fit, ...options })}`;
  }
  return `${SCREENSHOT_PROXY_BASE_URL}${screenshotProxyOptions(options)}/${encodeURI(url)}`;
};
const getSources = ({
  formats,
  url,
  options
}) => {
  if (shouldUseNetlifyImageCDN(url)) {
    return [];
  }
  return formats.map((format) => {
    return {
      srcSet: generateImageUrl(url, { ...options, format }),
      type: `image/${format}`
    };
  });
};
const Picture = ({
  alt,
  url,
  width,
  height,
  formats = ["avif", "webp"],
  fallbackFormat,
  className,
  onError,
  animated = false,
  cover = false,
  title
}) => {
  const options = { width, height, cover, animated };
  const sources = getSources({
    // IPX proxy add experimental support for animated webp
    formats: animated ? ["webp"] : formats,
    url,
    options
  });
  const fallbackSrc = generateImageUrl(url, {
    ...options,
    format: fallbackFormat || animated ? "gif" : "png"
  });
  return /* @__PURE__ */ jsxRuntime.jsxs("picture", { onError, className, children: [
    sources.map((source, i) => /* @__PURE__ */ jsxRuntime.jsx("source", { ...source }, `source:${i}`)),
    /* @__PURE__ */ jsxRuntime.jsx(
      "img",
      {
        src: fallbackSrc,
        alt,
        width,
        height,
        loading: "lazy",
        className: helpers_cn.cn("tw-align-top", cover && "tw-size-full"),
        title
      }
    )
  ] });
};
const tokens = {
  "spacing.0": "0",
  "spacing.1": "0.25rem",
  "spacing.2": "0.5rem",
  "spacing.3": "0.75rem",
  "spacing.4": "1rem",
  "spacing.5": "1.25rem",
  "spacing.6": "1.5rem",
  "spacing.7": "1.75rem",
  "spacing.8": "2rem",
  "spacing.9": "2.25rem",
  "spacing.10": "2.5rem",
  "spacing.11": "2.75rem",
  "spacing.12": "3rem",
  "spacing.14": "3.5rem",
  "spacing.16": "4rem",
  "spacing.20": "5rem",
  "spacing.24": "6rem",
  "spacing.26": "6.5rem",
  "spacing.28": "7rem",
  "spacing.32": "8rem",
  "spacing.36": "9rem",
  "spacing.40": "10rem",
  "spacing.42": "10.5rem",
  "spacing.44": "11rem",
  "spacing.48": "12rem",
  "spacing.52": "13rem",
  "spacing.56": "14rem",
  "spacing.60": "15rem",
  "spacing.64": "16rem",
  "spacing.66": "16.5rem",
  "spacing.72": "18rem",
  "spacing.80": "20rem",
  "spacing.96": "24rem",
  "spacing.106": "26.5rem",
  "spacing.170": "42.5rem",
  "spacing.px": "0.0625rem",
  "spacing.0.5": "0.125rem",
  "spacing.1.5": "0.375rem",
  "spacing.2.5": "0.625rem",
  "spacing.3.5": "0.875rem",
  "spacing.card": "1.5rem",
  "borderRadius.none": "0",
  "borderRadius.sm": "0.375rem",
  "borderRadius.lg": "0.5rem",
  "borderRadius.card": "0.5rem",
  "borderRadius.full": "624.9375rem",
  "borderWidth.0": "0",
  "borderWidth.2": "0.125rem",
  "borderWidth.4": "0.25rem",
  "borderWidth.8": "0.5rem",
  "borderWidth.DEFAULT": "0.0625rem",
  "fontSize.0": "0",
  "fontSize.xs": "0.75rem",
  "fontSize.sm": "0.875rem",
  "fontSize.base": "1rem",
  "fontSize.lg": "1.125rem",
  "fontSize.xl": "1.375rem",
  "fontSize.2xl": "2.25rem",
  "fontSize.3xl": "4rem",
  "fontSize.4xl": "6.5rem",
  "fontWeight.thin": 100,
  "fontWeight.light": 300,
  "fontWeight.regular": 400,
  "fontWeight.medium": 500,
  "fontWeight.semibold": 600,
  "fontWeight.bold": 700,
  "fontWeight.black": 900,
  "fontWeight.weight-inherit": "inherit",
  "lineHeight.3": "0.75rem",
  "lineHeight.4": "1rem",
  "lineHeight.5": "1.25rem",
  "lineHeight.6": "1.5rem",
  "lineHeight.7": "1.75rem",
  "lineHeight.8": "2rem",
  "lineHeight.9": "2.25rem",
  "lineHeight.10": "2.5rem",
  "lineHeight.none": "1",
  "lineHeight.tight": "1.25",
  "lineHeight.snug": "1.375",
  "lineHeight.normal": "1.5",
  "lineHeight.relaxed": "1.625",
  "lineHeight.chill": "1.75",
  "lineHeight.very-chill": "2",
  "lineHeight.asleep": "2.25",
  "screens.sm": "31.3125rem",
  "screens.until-md": "45rem",
  "screens.md": "45.0625rem",
  "screens.until-lg": "60rem",
  "screens.lg": "60.0625rem",
  "screens.until-xl": "70rem",
  "screens.xl": "70.0625rem"
};
const theme = (key) => tokens[key];
const getActualSizeForNumberValue = (pixels) => {
  if (typeof pixels === "string") {
    return pixels;
  }
  if (!pixels) {
    return "1rem";
  }
  return `${pixels / 16}rem`;
};
const SvgContext = React.createContext(
  void 0
);
const SvgProvider = ({ children, importSvg }) => {
  return /* @__PURE__ */ jsxRuntime.jsx(SvgContext.Provider, { value: importSvg, children });
};
const useImportSvg = () => {
  const svgContext = React.useContext(SvgContext);
  if (!svgContext) {
    throw new Error("useSvg must be used within a SvgProvider");
  }
  return svgContext;
};
var IconNameToPath = /* @__PURE__ */ ((IconNameToPath2) => {
  IconNameToPath2["adobe-experience-manager"] = "icons/icon-adobe-experience-manager";
  IconNameToPath2["agility-content"] = "icons/icon-agility-colored";
  IconNameToPath2["ai"] = "icons/icon-ai";
  IconNameToPath2["alphabet"] = "icons/icon-alphabet";
  IconNameToPath2["analytics"] = "icons/icon-analytics";
  IconNameToPath2["announcement"] = "icons/icon-announcement";
  IconNameToPath2["angular"] = "icons/icon-angular";
  IconNameToPath2["angular-colored"] = "icons/icon-angular-colored";
  IconNameToPath2["aprimo-colored"] = "icons/icon-aprimo-colored";
  IconNameToPath2["ask-netlify"] = "icons/icon-ask-netlify";
  IconNameToPath2["ask-netlify-colored"] = "icons/icon-ask-netlify-colored";
  IconNameToPath2["astro"] = "icons/icon-astro";
  IconNameToPath2["alchemy"] = "icons/icon-alchemy";
  IconNameToPath2["alchemy-colored"] = "icons/icon-alchemy-colored";
  IconNameToPath2["azure-devops"] = "icons/icon-azure-devops";
  IconNameToPath2["azure-devops-colored"] = "icons/icon-azure-devops-colored";
  IconNameToPath2["background-functions"] = "icons/icon-background-functions";
  IconNameToPath2["big-notification"] = "icons/icon-big-notification";
  IconNameToPath2["bitbucket"] = "icons/icon-bitbucket";
  IconNameToPath2["bitbucket-colored"] = "icons/icon-bitbucket-colored";
  IconNameToPath2["block"] = "icons/icon-block";
  IconNameToPath2["box"] = "icons/icon-box";
  IconNameToPath2["building"] = "icons/icon-building";
  IconNameToPath2["bulb"] = "icons/icon-bulb";
  IconNameToPath2["briefcase"] = "icons/icon-briefcase";
  IconNameToPath2["bynder-colored"] = "icons/icon-bynder-colored";
  IconNameToPath2["calendar"] = "icons/icon-calendar";
  IconNameToPath2["caret-down"] = "icons/icon-caret-down";
  IconNameToPath2["chat"] = "icons/icon-chat";
  IconNameToPath2["clock"] = "icons/icon-clock";
  IconNameToPath2["cloudinary-colored"] = "icons/icon-cloudinary-colored";
  IconNameToPath2["comment"] = "icons/icon-comment";
  IconNameToPath2["commit"] = "icons/icon-commit";
  IconNameToPath2["config"] = "icons/icon-config";
  IconNameToPath2["connect"] = "icons/icon-connect";
  IconNameToPath2["contentful"] = "icons/icon-contentful";
  IconNameToPath2["contentful-colored"] = "icons/icon-contentful-colored";
  IconNameToPath2["contentstack"] = "icons/icon-contentstack";
  IconNameToPath2["contentstack-colored"] = "icons/icon-contentstack-colored";
  IconNameToPath2["datocms-content"] = "icons/icon-datocms-colored";
  IconNameToPath2["deploy-diagnostics-colored"] = "icons/icon-deploy-diagnostics-colored";
  IconNameToPath2["docs"] = "icons/icon-docs";
  IconNameToPath2["docs-circle"] = "icons/icon-docs-circle";
  IconNameToPath2["download"] = "icons/icon-download";
  IconNameToPath2["drupal-content"] = "icons/icon-drupal-colored";
  IconNameToPath2["eleventy"] = "icons/eleventy";
  IconNameToPath2["edit"] = "icons/icon-edit";
  IconNameToPath2["email"] = "icons/icon-email";
  IconNameToPath2["entry"] = "icons/icon-entry";
  IconNameToPath2["extensions-gem"] = "icons/icon-extensions-gem";
  IconNameToPath2["eye-closed"] = "icons/icon-eye-closed";
  IconNameToPath2["eye-open"] = "icons/icon-eye-open";
  IconNameToPath2["gatsby"] = "icons/icon-gatsby";
  IconNameToPath2["gear"] = "icons/icon-gear";
  IconNameToPath2["gift"] = "icons/icon-gift";
  IconNameToPath2["git-branch"] = "icons/icon-git-branch";
  IconNameToPath2["git-branch-new"] = "icons/icon-git-branch-new";
  IconNameToPath2["git-merge"] = "icons/icon-git-merge";
  IconNameToPath2["github"] = "icons/icon-github";
  IconNameToPath2["github-colored"] = "icons/icon-github-colored";
  IconNameToPath2["gitlab"] = "icons/icon-gitlab";
  IconNameToPath2["gitlab-colored"] = "icons/icon-gitlab-colored";
  IconNameToPath2["google-colored"] = "icons/icon-google-colored";
  IconNameToPath2["graduation-cap"] = "icons/icon-graduation-cap";
  IconNameToPath2["graph-play"] = "icons/icon-graph-play";
  IconNameToPath2["handshake"] = "icons/icon-handshake";
  IconNameToPath2["high-perf-ADN"] = "icons/icon-high-perf-ADN";
  IconNameToPath2["high-perf-ADN-not-configured"] = "icons/icon-high-perf-ADN-not-configured";
  IconNameToPath2["high-perf-builds"] = "icons/icon-high-perf-builds";
  IconNameToPath2["hugo"] = "icons/icon-hugo";
  IconNameToPath2["info-round"] = "icons/icon-info-round";
  IconNameToPath2["labs"] = "icons/icon-labs";
  IconNameToPath2["laptop"] = "icons/icon-laptop";
  IconNameToPath2["link"] = "icons/icon-link";
  IconNameToPath2["menu"] = "icons/icon-menu";
  IconNameToPath2["more-options"] = "icons/icon-more-options";
  IconNameToPath2["more-options-vertical"] = "icons/icon-more-options-vertical";
  IconNameToPath2["grid"] = "icons/icon-grid";
  IconNameToPath2["netlify-encapsulated"] = "icons/icon-netlify-encapsulated";
  IconNameToPath2["netlify-encapsulated-colored"] = "icons/icon-netlify-encapsulated-colored";
  IconNameToPath2["network"] = "icons/icon-network";
  IconNameToPath2["new"] = "icons/icon-new";
  IconNameToPath2["nextjs"] = "icons/icon-nextjs";
  IconNameToPath2["nextjs-colored"] = "icons/icon-nextjs-colored";
  IconNameToPath2["nuxtjs"] = "icons/icon-nuxtjs";
  IconNameToPath2["nuxtjs-colored"] = "icons/icon-nuxtjs-colored";
  IconNameToPath2["partner-extension"] = "icons/icon-partner-extension";
  IconNameToPath2["pencil"] = "icons/icon-pencil";
  IconNameToPath2["pencil-info-round"] = "icons/icon-pencil-info-round";
  IconNameToPath2["pencil-restart"] = "icons/icon-pencil-restart";
  IconNameToPath2["pencil-restarting"] = "icons/icon-pencil-restarting";
  IconNameToPath2["pencil-round"] = "icons/icon-pencil-round";
  IconNameToPath2["pencil-warning-round"] = "icons/icon-pencil-warning-round";
  IconNameToPath2["pencil-warning-triangle"] = "icons/icon-pencil-warning-triangle";
  IconNameToPath2["pin"] = "icons/icon-pin";
  IconNameToPath2["prismic"] = "icons/icon-prismic";
  IconNameToPath2["pushpin"] = "icons/icon-pushpin";
  IconNameToPath2["question-mark"] = "icons/icon-question-mark";
  IconNameToPath2["remix"] = "icons/icon-remix";
  IconNameToPath2["tanstack"] = "icons/icon-tanstack";
  IconNameToPath2["restart"] = "icons/icon-restart";
  IconNameToPath2["retry"] = "icons/icon-retry";
  IconNameToPath2["rocket"] = "icons/icon-rocket";
  IconNameToPath2["sanity"] = "icons/icon-sanity";
  IconNameToPath2["sanity-colored"] = "icons/icon-sanity-colored";
  IconNameToPath2["sort-ascending"] = "icons/icon-sort-ascending";
  IconNameToPath2["sort-descending"] = "icons/icon-sort-descending";
  IconNameToPath2["storyblok"] = "icons/icon-storyblok";
  IconNameToPath2["storyblok-colored"] = "icons/icon-storyblok-colored";
  IconNameToPath2["strapi"] = "icons/icon-strapi";
  IconNameToPath2["strapi-colored"] = "icons/icon-strapi-colored";
  IconNameToPath2["screwdriver-wrench"] = "icons/icon-screwdriver-wrench";
  IconNameToPath2["site"] = "icons/icon-site";
  IconNameToPath2["site-disabled"] = "icons/icon-site-disabled";
  IconNameToPath2["split-test"] = "icons/icon-split-test";
  IconNameToPath2["slack"] = "icons/icon-slack";
  IconNameToPath2["slack-colored"] = "icons/icon-slack-colored";
  IconNameToPath2["stackblitz-logo"] = "icons/icon-stackblitz-bolt";
  IconNameToPath2["support"] = "icons/icon-support";
  IconNameToPath2["template"] = "icons/icon-template";
  IconNameToPath2["thumbs-down"] = "icons/icon-thumbs-down";
  IconNameToPath2["thumbs-up"] = "icons/icon-thumbs-up";
  IconNameToPath2["pause"] = "icons/icon-pause";
  IconNameToPath2["play"] = "icons/icon-play";
  IconNameToPath2["plugin-round"] = "icons/icon-plugin-round";
  IconNameToPath2["pull-request"] = "icons/icon-pull-request";
  IconNameToPath2["shopify"] = "icons/icon-shopify";
  IconNameToPath2["shopify-colored"] = "icons/icon-shopify-colored";
  IconNameToPath2["speech-bubble"] = "icons/icon-speech-bubble";
  IconNameToPath2["star"] = "icons/icon-star";
  IconNameToPath2["star-outline"] = "icons/icon-star-outline";
  IconNameToPath2["status-checkmark"] = "inline/icon-status-checkmark";
  IconNameToPath2["stop"] = "icons/icon-stop";
  IconNameToPath2["tag-edit"] = "icons/icon-tag-edit";
  IconNameToPath2["token"] = "icons/icon-token";
  IconNameToPath2["upload"] = "icons/icon-upload";
  IconNameToPath2["user"] = "icons/icon-user";
  IconNameToPath2["view"] = "icons/icon-view";
  IconNameToPath2["warning-round"] = "icons/icon-warning-round";
  IconNameToPath2["warning-triangle"] = "icons/icon-warning-triangle";
  IconNameToPath2["webhook"] = "icons/icon-webhook";
  IconNameToPath2["wordpress"] = "icons/icon-wordpress";
  IconNameToPath2["back"] = "inline/icon-back";
  IconNameToPath2["bottom"] = "inline/icon-bottom";
  IconNameToPath2["arrow-right"] = "inline/icon-arrow-right";
  IconNameToPath2["checkmark"] = "inline/icon-checkmark";
  IconNameToPath2["close"] = "inline/icon-close";
  IconNameToPath2["copy-clipboard"] = "inline/icon-copy-clipboard";
  IconNameToPath2["delete"] = "inline/icon-delete";
  IconNameToPath2["file"] = "inline/icon-file";
  IconNameToPath2["file-large"] = "inline/icon-file-large";
  IconNameToPath2["folder"] = "inline/icon-folder";
  IconNameToPath2["locked-tight"] = "inline/icon-locked-tight";
  IconNameToPath2["locked-tight-circle"] = "inline/icon-locked-tight-circle";
  IconNameToPath2["locked"] = "inline/icon-locked";
  IconNameToPath2["magic-wand"] = "inline/icon-magic-wand";
  IconNameToPath2["phone"] = "inline/icon-phone";
  IconNameToPath2["plugin"] = "inline/icon-plugin";
  IconNameToPath2["prohibition"] = "inline/icon-prohibition";
  IconNameToPath2["right-circle"] = "inline/icon-right-circle";
  IconNameToPath2["search"] = "inline/icon-search";
  IconNameToPath2["slack-logo"] = "icon-slack-logo";
  IconNameToPath2["solid"] = "icons/solid";
  IconNameToPath2["sparkles"] = "icons/icon-sparkles";
  IconNameToPath2["sparkly-slack-logo"] = "icon-slack-logo-sparkles";
  IconNameToPath2["success"] = "inline/icon-success";
  IconNameToPath2["top"] = "inline/icon-top";
  IconNameToPath2["unlock"] = "icons/icon-unlock";
  IconNameToPath2["up-circle"] = "inline/icon-up-circle";
  IconNameToPath2["full-screen"] = "icons/icon-full-screen";
  IconNameToPath2["exit-full-screen"] = "icons/icon-exit-full-screen";
  IconNameToPath2["nav-blobs"] = "navigation/icon-nav-blobs";
  IconNameToPath2["nav-blobs-active"] = "navigation/icon-nav-blobs-active";
  IconNameToPath2["nav-caret"] = "navigation/icon-nav-caret";
  IconNameToPath2["nav-caret-double"] = "navigation/icon-nav-caret-double";
  IconNameToPath2["nav-create"] = "navigation/icon-nav-create";
  IconNameToPath2["nav-site-overview"] = "navigation/icon-nav-site-overview";
  IconNameToPath2["nav-site-overview-active"] = "navigation/icon-nav-site-overview-active";
  IconNameToPath2["nav-site-configuration"] = "navigation/icon-nav-site-configuration";
  IconNameToPath2["nav-site-configuration-active"] = "navigation/icon-nav-site-configuration-active";
  IconNameToPath2["nav-deploys"] = "navigation/icon-nav-deploys";
  IconNameToPath2["nav-deploys-active"] = "navigation/icon-nav-deploys-active";
  IconNameToPath2["nav-functions"] = "navigation/icon-nav-functions";
  IconNameToPath2["nav-functions-active"] = "navigation/icon-nav-functions-active";
  IconNameToPath2["nav-edge-functions"] = "navigation/icon-nav-edge-functions";
  IconNameToPath2["nav-edge-functions-active"] = "navigation/icon-nav-edge-functions-active";
  IconNameToPath2["nav-integrations"] = "navigation/icon-nav-integrations";
  IconNameToPath2["nav-integrations-active"] = "navigation/icon-nav-integrations-active";
  IconNameToPath2["nav-extensions"] = "navigation/icon-nav-extensions";
  IconNameToPath2["nav-extensions-active"] = "navigation/icon-nav-extensions-active";
  IconNameToPath2["nav-analytics"] = "navigation/icon-nav-analytics";
  IconNameToPath2["nav-analytics-active"] = "navigation/icon-nav-analytics-active";
  IconNameToPath2["nav-forms"] = "navigation/icon-nav-forms";
  IconNameToPath2["nav-forms-active"] = "navigation/icon-nav-forms-active";
  IconNameToPath2["nav-split-testing"] = "navigation/icon-nav-split-testing";
  IconNameToPath2["nav-split-testing-active"] = "navigation/icon-nav-split-testing-active";
  IconNameToPath2["nav-large-media"] = "navigation/icon-nav-large-media";
  IconNameToPath2["nav-large-media-active"] = "navigation/icon-nav-large-media-active";
  IconNameToPath2["nav-logs"] = "navigation/icon-nav-logs";
  IconNameToPath2["nav-logs-active"] = "navigation/icon-nav-logs-active";
  IconNameToPath2["nav-team-overview"] = "navigation/icon-nav-team-overview";
  IconNameToPath2["nav-team-overview-active"] = "navigation/icon-nav-team-overview-active";
  IconNameToPath2["nav-sites"] = "navigation/icon-nav-sites";
  IconNameToPath2["nav-sites-active"] = "navigation/icon-nav-sites-active";
  IconNameToPath2["nav-builds"] = "navigation/icon-nav-builds";
  IconNameToPath2["nav-builds-active"] = "navigation/icon-nav-builds-active";
  IconNameToPath2["nav-connect"] = "navigation/icon-nav-connect";
  IconNameToPath2["nav-connect-active"] = "navigation/icon-nav-connect-active";
  IconNameToPath2["nav-domains"] = "navigation/icon-nav-domains";
  IconNameToPath2["nav-domains-active"] = "navigation/icon-nav-domains-active";
  IconNameToPath2["nav-domain-management"] = "navigation/icon-nav-domain-management";
  IconNameToPath2["nav-domain-management-active"] = "navigation/icon-nav-domain-management-active";
  IconNameToPath2["nav-members"] = "navigation/icon-nav-members";
  IconNameToPath2["nav-members-active"] = "navigation/icon-nav-members-active";
  IconNameToPath2["nav-audit-log"] = "navigation/icon-nav-audit-log";
  IconNameToPath2["nav-audit-log-active"] = "navigation/icon-nav-audit-log-active";
  IconNameToPath2["nav-billing"] = "navigation/icon-nav-billing";
  IconNameToPath2["nav-billing-active"] = "navigation/icon-nav-billing-active";
  IconNameToPath2["nav-team-settings"] = "navigation/icon-nav-team-settings";
  IconNameToPath2["nav-team-settings-active"] = "navigation/icon-nav-team-settings-active";
  IconNameToPath2["nav-labs"] = "navigation/icon-nav-labs";
  IconNameToPath2["nav-labs-active"] = "navigation/icon-nav-labs-active";
  IconNameToPath2["nav-news"] = "navigation/icon-nav-news";
  IconNameToPath2["nav-news-active"] = "navigation/icon-nav-news-active";
  IconNameToPath2["nav-news-unread"] = "navigation/icon-nav-news-unread";
  IconNameToPath2["nav-separator"] = "navigation/icon-nav-separator";
  IconNameToPath2["nav-shield"] = "navigation/icon-nav-shield";
  IconNameToPath2["nav-shield-active"] = "navigation/icon-nav-shield-active";
  IconNameToPath2["nav-support"] = "navigation/icon-nav-support";
  IconNameToPath2["nav-support-active"] = "navigation/icon-nav-support-active";
  IconNameToPath2["nav-command-palette"] = "navigation/icon-nav-command-palette";
  IconNameToPath2["nav-toggle"] = "navigation/toggle/nav-toggle";
  IconNameToPath2["nav-toggle-active"] = "navigation/toggle/nav-toggle-active";
  IconNameToPath2["extension"] = "icons/icon-extension";
  return IconNameToPath2;
})(IconNameToPath || {});
function useSvg(name) {
  const [Icon, setIcon] = React__namespace.useState(null);
  const [loading, setLoading] = React__namespace.useState(false);
  const importFunction = useImportSvg();
  React__namespace.useEffect(() => {
    let isMounted = true;
    setLoading(true);
    const importIcon = async () => {
      try {
        const component = (await importFunction(IconNameToPath[name])).ReactComponent;
        if (isMounted) {
          setIcon({ component });
        }
      } catch (err) {
        console.error(err);
      } finally {
        if (isMounted) {
          setLoading(false);
        }
      }
    };
    importIcon();
    return () => {
      isMounted = false;
    };
  }, [name, importFunction]);
  return [loading, (Icon == null ? void 0 : Icon.component) ?? null];
}
function DecorativeIcon({
  className,
  style,
  name,
  width,
  height = width,
  ...rest
}) {
  const [loading, Icon] = useSvg(name);
  const iconWidth = getActualSizeForNumberValue(width);
  const iconHeight = getActualSizeForNumberValue(height);
  if (loading || !Icon) {
    return /* @__PURE__ */ jsxRuntime.jsx(
      "span",
      {
        className: helpers_cn.cn(className, "tw-inline-block"),
        style: {
          height: iconHeight,
          width: iconWidth
        }
      }
    );
  }
  return /* @__PURE__ */ jsxRuntime.jsx(
    Icon,
    {
      style: {
        ...style,
        "--icon-width": iconWidth,
        "--icon-height": iconHeight
      },
      "aria-hidden": true,
      className: helpers_cn.cn(
        "scalable-icon tw-inline !tw-fill-current tw-align-baseline",
        className
      ),
      height: void 0,
      width: void 0,
      ...rest
    }
  );
}
function AccessibleIcon(props) {
  return /* @__PURE__ */ jsxRuntime.jsx(DecorativeIcon, { "aria-hidden": void 0, role: "img", ...props });
}
const getTriggerButton = (reference) => {
  if (reference instanceof HTMLButtonElement) {
    return reference;
  } else if (reference instanceof HTMLElement) {
    return reference.querySelector("button");
  }
  return null;
};
const closePopperWithoutTriggeringFocusIn = ({
  reference,
  hide,
  props
}) => {
  var _a;
  const button = getTriggerButton(reference);
  hide();
  if (!button || !((_a = props.trigger) == null ? void 0 : _a.includes("focusin"))) {
    return;
  }
  const preventFocusIn = (event) => {
    event.stopImmediatePropagation();
  };
  button.addEventListener("focusin", preventFocusIn);
  button.focus();
  button.removeEventListener("focusin", preventFocusIn);
};
const hideOnPopperBlur = {
  name: "hideOnPopperBlur",
  defaultValue: true,
  fn(instance) {
    const { popper, hide, props } = instance;
    return {
      onCreate() {
        popper.addEventListener("focusout", ({ relatedTarget }) => {
          if (props.hideOnPopperBlur && relatedTarget && !popper.contains(relatedTarget)) {
            hide();
          }
        });
      }
    };
  }
};
const hideOnEsc = {
  name: "hideOnEsc",
  defaultValue: true,
  fn(instance) {
    const { props } = instance;
    function onKeyDown(event) {
      if (props.hideOnEsc && event.key === "Escape") {
        closePopperWithoutTriggeringFocusIn(instance);
      }
    }
    return {
      onShow() {
        document.addEventListener("keydown", onKeyDown);
      },
      onHide() {
        document.removeEventListener("keydown", onKeyDown);
      }
    };
  }
};
const manageFocusInPopover = {
  name: "manageFocusInPopover",
  defaultValue: false,
  fn(instance) {
    const { popper, hide, props } = instance;
    let activeIndex = 0;
    let didAddListeners = false;
    const getFirstFocusableElement = () => popper.querySelector("a, button");
    const moveFocusToFirstElementOnTab = (event) => {
      if (event.key !== "Tab" || event.shiftKey) {
        return;
      }
      event.preventDefault();
      const firstFocusableElement = getFirstFocusableElement();
      const triggerButton = getTriggerButton(instance.reference);
      if (firstFocusableElement && triggerButton) {
        firstFocusableElement.focus();
        triggerButton.removeEventListener(
          "keydown",
          moveFocusToFirstElementOnTab
        );
      }
    };
    const onKeydown = (event) => {
      const focusableElements = popper.querySelectorAll("a, button");
      const numItems = focusableElements.length;
      if (!["Tab", " ", "Enter"].includes(event.key) || !document.activeElement) {
        return;
      }
      event.preventDefault();
      let newActiveIndex = activeIndex;
      switch (event.key) {
        case "Tab":
          if (event.shiftKey) {
            newActiveIndex = activeIndex - 1;
          } else {
            newActiveIndex = activeIndex + 1;
          }
          break;
        case " ":
        case "Enter":
          focusableElements.item(activeIndex).click();
          hide();
          return;
      }
      if (newActiveIndex < 0 || newActiveIndex >= numItems) {
        closePopperWithoutTriggeringFocusIn(instance);
        return;
      }
      activeIndex = newActiveIndex;
      focusableElements.item(newActiveIndex).focus();
    };
    return {
      onMount() {
        if (!props.manageFocusInPopover) return;
        activeIndex = 0;
        const firstFocusableElement = getFirstFocusableElement();
        const triggerButton = getTriggerButton(instance.reference);
        if (firstFocusableElement && triggerButton) {
          triggerButton.addEventListener(
            "keydown",
            moveFocusToFirstElementOnTab
          );
          popper.addEventListener("keydown", onKeydown);
          didAddListeners = true;
        }
      },
      onHidden() {
        if (!props.manageFocusInPopover) return;
        const triggerButton = getTriggerButton(instance.reference);
        activeIndex = 0;
        if (didAddListeners) {
          popper.removeEventListener("keydown", onKeydown);
          didAddListeners = false;
          triggerButton == null ? void 0 : triggerButton.removeEventListener(
            "keydown",
            moveFocusToFirstElementOnTab
          );
        }
      }
    };
  }
};
const Tippy = OriginalTippy;
const intents = {
  info: {
    iconName: "info-round",
    buttonClassName: helpers_cn.cn(
      "tw-text-gray-darkest",
      "hover:tw-text-black",
      "dark:tw-text-gray-lightest",
      "dark:hover:tw-text-white"
    ),
    title: "More information"
  },
  warning: {
    iconName: "warning-triangle",
    buttonClassName: helpers_cn.cn(
      "tw-text-gold-darkest",
      "hover:tw-text-gold-darker",
      "dark:tw-text-gold",
      "dark:hover:tw-text-gold-darker"
    ),
    title: "Alert"
  },
  error: {
    iconName: "warning-round",
    buttonClassName: helpers_cn.cn(
      "tw-text-red-darkest",
      "hover:tw-text-red-darker",
      "dark:tw-text-red",
      "dark:hover:tw-text-red-darker"
    ),
    title: "Error"
  }
};
const tooltipBtnCN = (className) => helpers_cn.cn(
  "!tw-bg-transparent",
  "tw-border-none",
  "tw-rounded-full",
  "tw-inline-flex",
  "tw-p-0",
  "tw-outline-0",
  "tw-relative",
  "tw-h-4",
  "tw-w-4",
  "tw-top-0.5",
  "focus-visible:tw-ring-2",
  "tw-cursor-help",
  className
);
const tippyCN = ({
  floating,
  nowrap,
  className
}) => helpers_cn.cn(
  "tw-text-white",
  "tw-leading-normal",
  "tw-bg-black",
  "tw-rounded-lg",
  "tw-py-3",
  "tw-px-4",
  "tw-text-sm",
  floating && `tw-translate-z-0 tw--translate-y-1/2 tw-translate-x-[calc(0-(theme(spacing.6)+theme(spacing.1)))]`,
  nowrap && "tw-whitespace-nowrap",
  "code:tw-text-white",
  "code:tw-p-0",
  "code:tw-bg-transparent",
  "dark:tw-bg-gray-darker",
  "dark:tw-border",
  "dark:tw-border-gray-dark",
  className
);
const Tooltip = ({
  floating = false,
  nowrap = false,
  outset,
  children,
  intent = "info",
  iconName = intents[intent].iconName,
  buttonClassName = intents[intent].buttonClassName,
  title = intents[intent].title,
  appendTo = "parent",
  description,
  maxWidth = 416,
  offset = [0, helpers_remToPxNumber.remToPxNumber(theme("spacing.2"))],
  visible,
  className,
  onClickOutside,
  onClick,
  id,
  manageFocusInPopover: manageFocusInPopover$1 = appendTo !== "parent",
  ...rest
}) => {
  const otherProps = typeof visible !== "undefined" ? { onClickOutside, visible } : {
    trigger: "click mouseenter focusin"
  };
  return /* @__PURE__ */ jsxRuntime.jsx(
    Tippy,
    {
      arrow: false,
      className: typeof rest.render === "undefined" ? tippyCN({ floating, nowrap, className }) : void 0,
      content: description,
      offset,
      duration: 0,
      plugins: [hideOnEsc, hideOnPopperBlur, manageFocusInPopover],
      interactive: true,
      maxWidth,
      appendTo,
      popperOptions: {
        strategy: "fixed",
        modifiers: [
          {
            name: "flip",
            options: {
              fallbackPlacements: ["top", "bottom"]
            }
          },
          {
            name: "preventOverflow",
            options: {
              altAxis: true
            }
          }
        ]
      },
      ...otherProps,
      ...rest,
      manageFocusInPopover: manageFocusInPopover$1,
      children: children ? children : (
        /**
         * This wrapper:
         * 1. Uses `outset` to create some spacing around the tooltipped button
         * 2. Allows the buttons for floating tooltips to appear inline next to
         * other elements. Without this, the button's placement will break.
         */
        /* @__PURE__ */ jsxRuntime.jsx(
          "span",
          {
            className: helpers_cn.cn(outset, floating && "tw-absolute tw--right-7 tw--mt-8"),
            children: /* @__PURE__ */ jsxRuntime.jsx(
              "button",
              {
                id,
                className: tooltipBtnCN(buttonClassName),
                type: "button",
                onClick: (e) => {
                  e.preventDefault();
                  onClick == null ? void 0 : onClick();
                },
                children: /* @__PURE__ */ jsxRuntime.jsx(AccessibleIcon, { title, name: iconName })
              }
            )
          }
        )
      )
    }
  );
};
const isAvatarUrlCustomUpload = (url) => {
  try {
    const imageCdnDomain = process.env.NETLIFY_IMAGES_CDN_DOMAIN;
    return new URL(url).host === imageCdnDomain;
  } catch {
    return false;
  }
};
const getAvatarSrcFromUser = (user) => {
  const avatar = user == null ? void 0 : user.avatar;
  const avatarHref = avatar == null ? void 0 : avatar.href;
  const avatarUrl = user == null ? void 0 : user.avatar_url;
  const userMetadata = user == null ? void 0 : user.user_metadata;
  return avatarHref || avatar || avatarUrl || (userMetadata == null ? void 0 : userMetadata.avatar);
};
const GRAVATAR_URL = "https://secure.gravatar.com/avatar";
const sizes = {
  xs: 16,
  sm: 24,
  md: 40,
  lg: 100,
  xl: 128
};
function transformAvatarUrl(url, size, scale = 2) {
  const scaledSize = Math.round(size * scale);
  if (url.startsWith(GRAVATAR_URL)) {
    return `${url.split("?")[0]}?s=${scaledSize}&d=404`;
  }
  if (url.match(/github/i)) {
    return `${url.split("?")[0]}?s=${scaledSize}`;
  }
  if (url.match(/gitlab/i)) {
    return `${url.split("?")[0]}?size=${scaledSize}`;
  }
  return url;
}
const AvatarWrapper = ({ children, hoverTooltip }) => {
  if (hoverTooltip) {
    return /* @__PURE__ */ jsxRuntime.jsx(
      Tooltip,
      {
        description: hoverTooltip,
        trigger: "mouseenter",
        placement: "bottom",
        className: "!tw-p-2 !tw-py-1",
        appendTo: document.body,
        children
      }
    );
  }
  return children;
};
function Avatar({
  user,
  size,
  alt,
  altText,
  src,
  showInnerRing = true,
  dropdown = false,
  className = "",
  title,
  placeholderText,
  placeholderBackgroundColors,
  hoverTooltip
}) {
  var _a;
  const [isErrored, setIsErrored] = React.useState(false);
  const [isLoaded, setIsLoaded] = React.useState(false);
  const imgRef = React.useRef(null);
  src = src || getAvatarSrcFromUser(user);
  const px = size && sizes[size] || 32;
  const transformedSrc = src ? transformAvatarUrl(src, px) : null;
  React.useEffect(() => {
    setIsErrored(false);
    const img = imgRef.current;
    const isLoaded2 = img !== null && img.src === transformedSrc && img.complete;
    setIsLoaded(isLoaded2);
  }, [transformedSrc]);
  const username = user && (user.full_name || ((_a = user.user_metadata) == null ? void 0 : _a.full_name) || user.email) || "Anonymous";
  const classNames = helpers_cn.cn(
    "tw-rounded-full",
    "tw-block",
    "tw-self-center",
    "tw-overflow-hidden",
    "tw-aspect-square",
    // Semitransparent circle around the avatar
    showInnerRing && `after:tw-absolute after:tw-inset-0 after:tw-select-none after:tw-rounded-full after:tw-border after:tw-border-black/10 after:tw-content-[''] dark:after:tw-border-white/25`,
    !size && !dropdown && `tw-w-avatar-sm tw-text-lg tw-leading-[theme('height.avatar-sm')]`,
    size === "xs" && `tw-w-4 tw-text-[10px] tw-leading-4`,
    size === "sm" && `tw-w-6 tw-text-[14px] tw-leading-6`,
    size === "md" && `tw-w-10 tw-text-[24px] tw-leading-10`,
    size === "lg" && `tw-w-avatar-lg tw-text-[40px] tw-leading-[theme('height.avatar-lg')] md:tw-w-avatar-xl md:tw-text-[60px] md:tw-leading-[96px]`,
    size === "xl" && `tw-w-avatar-xl tw-text-[60px] tw-leading-[96px] md:tw-w-avatar-xxl md:tw-text-[72px] md:tw-leading-[124px]`,
    dropdown ? `tw-absolute tw-inset-0 tw-w-[34px] tw-border tw-border-white tw-text-lg tw-leading-[theme('height.avatar-sm')] dark:tw-border-bgApp` : "tw-relative",
    className
  );
  const textClassNames = helpers_cn.cn(
    "tw-font-semibold",
    "tw-text-center",
    "tw-text-white"
  );
  const altInfo = altText || username;
  const formattedTitle = hoverTooltip ? void 0 : title || altText || username !== "Anonymous" && username || void 0;
  if (src && !isErrored) {
    const customAvatar = isAvatarUrlCustomUpload(src);
    const formattedAlt = alt ? altInfo : "";
    return /* @__PURE__ */ jsxRuntime.jsx(AvatarWrapper, { hoverTooltip, children: /* @__PURE__ */ jsxRuntime.jsx(
      "span",
      {
        className: classNames,
        title: formattedTitle,
        "data-chromatic": "ignore",
        children: customAvatar ? /* @__PURE__ */ jsxRuntime.jsx(
          Picture,
          {
            className: "tw-aspect-square tw-w-full",
            url: src,
            width: px,
            height: px,
            alt: formattedAlt,
            onError: () => setIsErrored(true),
            cover: true,
            animated: `${src}`.endsWith(".gif")
          }
        ) : /* @__PURE__ */ jsxRuntime.jsx(
          "img",
          {
            ref: imgRef,
            className: helpers_cn.cn(
              "tw-aspect-square tw-w-full",
              !isLoaded && "tw-opacity-0"
            ),
            src: transformAvatarUrl(src, px),
            width: px,
            height: px,
            alt: formattedAlt,
            onError: () => setIsErrored(true),
            onLoad: () => setIsLoaded(true),
            loading: "lazy"
          }
        )
      }
    ) });
  }
  const placeholder = placeholderText || lodashSplit(username, "", 1)[0].toUpperCase();
  const backgroundColors = placeholderBackgroundColors || helpers_placeholderColors.getPlaceholderGradientColorsFromId(user == null ? void 0 : user.id);
  return /* @__PURE__ */ jsxRuntime.jsx(AvatarWrapper, { hoverTooltip, children: /* @__PURE__ */ jsxRuntime.jsxs(
    "span",
    {
      className: helpers_cn.cn(classNames, textClassNames),
      title: formattedTitle,
      "aria-hidden": !alt,
      style: {
        background: `linear-gradient(to bottom right, ${backgroundColors.to}, ${backgroundColors.from})`
      },
      children: [
        placeholder,
        alt && /* @__PURE__ */ jsxRuntime.jsx("span", { className: "tw-sr-only", children: altInfo })
      ]
    }
  ) });
}
const AdditionalUsersTooltipContent = ({
  additionalUsers = [],
  additionalTextType = "useName",
  additionalUsersLabelSingular,
  additionalUsersLabelPlural
}) => {
  const additionalUsersText = additionalUsers.length === 1 ? additionalUsersLabelSingular : additionalUsersLabelPlural;
  return /* @__PURE__ */ jsxRuntime.jsx("span", { className: "tw-flex tw-flex-col tw-items-center", children: additionalTextType === "useName" ? /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [
    additionalUsers.map((user, index = 0) => {
      return /* @__PURE__ */ jsxRuntime.jsx("span", { children: user == null ? void 0 : user.full_name }, `additional-user-${index}`);
    }),
    additionalUsersText
  ] }) : /* @__PURE__ */ jsxRuntime.jsxs("span", { children: [
    additionalUsers.length,
    " ",
    additionalUsersText
  ] }) });
};
const listItemClassName = (size) => helpers_cn.cn(
  "tw-shrink-0",
  "tw-rounded-full",
  "tw-border-white",
  "dark:tw-border-black",
  "tw-border-solid",
  "tw-relative",
  size === "xs" && "tw-border",
  size === "sm" && "tw-border",
  (size === "md" || !size) && "tw-border-2",
  size === "lg" && "tw-border-[3px]",
  size === "xl" && "tw-border-4"
);
function AvatarList({
  users,
  size,
  maxNumber,
  includeHoverTooltips = false,
  additionalTextType = "useName",
  userLabel,
  additionalUsersLabelSingular,
  additionalUsersLabelPlural
}) {
  const items = maxNumber ? users.slice(0, maxNumber) : users;
  const additionalUsersLength = maxNumber ? users.length - maxNumber : 0;
  const renderAdditionalUsers = additionalUsersLength > 0;
  const additionalUsersLabel = `+${additionalUsersLength}`;
  if (!users || users.length === 0) {
    return null;
  }
  return /* @__PURE__ */ jsxRuntime.jsxs(
    "ul",
    {
      className: helpers_cn.cn(
        "tw-flex",
        "tw-flex-row",
        "tw-items-center",
        size === "xs" && "[&_>_*_+_*]:tw--ml-0.5",
        size === "sm" && "[&_>_*_+_*]:tw--ml-1",
        (size === "md" || !size) && "[&_>_*_+_*]:tw--ml-2",
        size === "lg" && "[&_>_*_+_*]:tw--ml-4",
        size === "xl" && "[&_>_*_+_*]:tw--ml-6",
        // Override .details ul styles
        "!tw-list-none",
        "!tw-pl-0"
      ),
      children: [
        items.map((user) => {
          const nameOrEmail = (user == null ? void 0 : user.full_name) || (user == null ? void 0 : user.email);
          const userTooltipText = `${nameOrEmail}${userLabel ? ` ${userLabel}` : ""}`;
          return /* @__PURE__ */ jsxRuntime.jsx("li", { className: listItemClassName(size), children: /* @__PURE__ */ jsxRuntime.jsx(
            Avatar,
            {
              alt: true,
              user,
              size,
              hoverTooltip: includeHoverTooltips ? userTooltipText : void 0
            }
          ) }, user == null ? void 0 : user.id);
        }),
        renderAdditionalUsers && /* @__PURE__ */ jsxRuntime.jsx("li", { className: listItemClassName(size), children: /* @__PURE__ */ jsxRuntime.jsx(
          Avatar,
          {
            placeholderText: additionalUsersLabel,
            size,
            showInnerRing: false,
            className: helpers_cn.cn(
              "!tw-bg-gray-lighter  !tw-text-gray-darker dark:!tw-bg-gray-dark dark:!tw-text-gray-lightest",
              size === "xs" && "!tw-text-[7px]",
              size === "sm" && "!tw-text-[10px]",
              !size && "!tw-text-[12px]",
              size === "md" && "!tw-text-base",
              size === "lg" && "!tw-text-[24px] md:!tw-text-[32px]",
              size === "xl" && "!tw-text-[32px] md:!tw-text-[40px]"
            ),
            title: includeHoverTooltips ? void 0 : additionalUsersLabel,
            placeholderBackgroundColors: {
              // Rely on the background instead of the gradient
              from: "transparent",
              to: "transparent"
            },
            hoverTooltip: includeHoverTooltips ? /* @__PURE__ */ jsxRuntime.jsx(
              AdditionalUsersTooltipContent,
              {
                additionalUsers: users.slice(-additionalUsersLength),
                additionalTextType,
                additionalUsersLabelPlural,
                additionalUsersLabelSingular
              }
            ) : void 0
          }
        ) }, "additional-users")
      ]
    }
  );
}
const LinkContext = React.createContext(
  void 0
);
const LinkProvider = ({ children, renderLink }) => {
  return /* @__PURE__ */ jsxRuntime.jsx(LinkContext.Provider, { value: renderLink, children });
};
const useLink = () => {
  const linkContext = React.useContext(LinkContext);
  if (!linkContext) {
    throw new Error("useLink must be used within a LinkProvider");
  }
  return linkContext;
};
const INTENT_STYLES = {
  default: `
    tw-text-teal-action
    tw-cursor-pointer
    tw-font-semibold
    tw-relative
    hover:tw-underline
    dark:tw-text-teal-lighter
  `,
  invertUnderline: `hover:!tw-no-underline !tw-underline`,
  action: `
    tw-bg-none
    tw-border-0
    tw-text-teal-action
    tw-inline-block
    tw-font-semibold
    tw-pr-6
    tw-mt-2
    tw-rounded-sm
    focus-visible:tw-outline
    focus-visible:tw-outline-1
    hover:tw-underline
    after:tw-content-arrow
    after:tw-ml-1
    after:tw-absolute
    dark:tw-text-teal-lighter
  `,
  actionExternal: `
    after:tw-transform
    after:tw-rotate-[-40deg]
  `,
  showExternalIcon: `
    tw-inline-block
    tw-pr-6
    after:tw-content-arrow
    after:tw-ml-1
    after:tw-absolute
    after:tw-transform
    after:tw-rotate-[-40deg]
  `,
  anchor: `
    tw-text-inherit
    tw-font-weight-inherit
    tw-relative
    tw-outline-0
    tw-py-2
    tw-px-0
    tw--my-2
    tw-mx-0
    tw-no-underline
    focus:tw-no-underline
    hover:tw-no-underline
    after:tw-bg-gray
    after:tw-bottom-0
    after:tw-content-empty
    after:tw-mt-0.5
    after:tw-mask-image-icon-link
    after:tw-mask-center
    after:tw-mask-no-repeat
    after:tw-mask-4
    after:tw-w-6
    after:tw-top-0
    after:tw-absolute
    after:tw-opacity-0
    hover:after:tw-opacity-100
    focus:after:tw-opacity-100
    dark:tw-text-inherit
  `,
  block: `
    tw-text-inherit
    tw-font-weight-inherit
    tw-static
    tw-no-underline
    before:tw-absolute
    before:tw-top-0
    before:tw-right-0
    before:tw-bottom-0
    before:tw-left-0
    before:tw-content-empty
    before:tw-block
    before:z-0
    hover:tw-text-inherit
    hover:tw-underline
    dark:tw-text-inherit
  `,
  btnReset: `
    tw-border-0
    tw-bg-transparent
    tw-inline
    tw-p-0
  `,
  loud: `
    tw-text-black
    tw-font-semibold
    tw-underline
    tw-decoration-color-gray-light
    hover:tw-underline
    dark:tw-text-white
    dark:tw-decoration-color-gray-light
  `,
  subdued: ({
    lightModeInvert,
    underline = true
  }) => `
    tw-text-inherit
    ${underline && "tw-underline"}
    tw-decoration-gray
    tw-font-weight-inherit
    ${lightModeInvert ? `hover:tw-text-white` : `hover:tw-text-black`}
    hover:tw-decoration-inherit
    dark:hover:tw-text-white
    dark:tw-text-inherit
    dark:tw-decoration-inherit
  `,
  upgrade: `
    tw-inline-flex
    tw-items-center
    tw-font-medium
    tw-text-blue
    tw-text-sm
    tw-underline
    tw-whitespace-nowrap
    dark:tw-text-blue-lightest
  `
};
const linkCN = ({
  action,
  block,
  className,
  loud,
  subdued,
  subduedUnderline = true,
  upgrade,
  anchor,
  external,
  // To style Link with HTMLButton as external
  showExternalIcon,
  to,
  outset,
  href,
  lightModeInvert = false,
  invertUnderline = false
}) => {
  const defaultLink = !className && !loud && !action && !block && !loud && !subdued && !anchor;
  return helpers_cn.cn(
    defaultLink && INTENT_STYLES.default,
    action && INTENT_STYLES.action,
    showExternalIcon && INTENT_STYLES.showExternalIcon,
    (href || external) && action && INTENT_STYLES.actionExternal,
    block && INTENT_STYLES.block,
    loud && INTENT_STYLES.loud,
    subdued && INTENT_STYLES.subdued({
      lightModeInvert,
      underline: subduedUnderline
    }),
    upgrade && INTENT_STYLES.upgrade,
    anchor && INTENT_STYLES.anchor,
    !href && !to && INTENT_STYLES.btnReset,
    outset,
    invertUnderline && INTENT_STYLES.invertUnderline,
    className
  );
};
const LinkBase = ({
  action,
  block,
  className,
  loud,
  subdued,
  subduedUnderline,
  upgrade,
  anchor,
  external,
  showExternalIcon,
  type = "button",
  outset = "",
  // do not use this prop directly; outset should only be passed if the <Link> instance is wrapped with <Outset> component
  children,
  lightModeInvert = false,
  invertUnderline,
  ...rest
}, ref) => {
  const renderLink = useLink();
  const { to, href, onClick } = rest;
  const CN = linkCN({
    action,
    block,
    className,
    loud,
    subdued,
    subduedUnderline,
    showExternalIcon,
    upgrade,
    anchor,
    external,
    outset,
    lightModeInvert,
    to,
    href,
    invertUnderline
  });
  return to || href || !onClick ? renderLink({
    ref,
    className: CN,
    ...rest,
    children: /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [
      upgrade && /* @__PURE__ */ jsxRuntime.jsx(DecorativeIcon, { name: "locked" }),
      children
    ] })
  }) : /* @__PURE__ */ jsxRuntime.jsx(
    "button",
    {
      className: helpers_cn.cn("tw-text-left", CN),
      type,
      ...rest,
      children
    }
  );
};
const Link = React.forwardRef(LinkBase);
var BadgeState = /* @__PURE__ */ ((BadgeState2) => {
  BadgeState2["Error"] = "error";
  BadgeState2["Info"] = "info";
  BadgeState2["Success"] = "success";
  BadgeState2["Warning"] = "warning";
  return BadgeState2;
})(BadgeState || {});
var BadgeVariant = /* @__PURE__ */ ((BadgeVariant2) => {
  BadgeVariant2["Default"] = "default";
  BadgeVariant2["Highlight"] = "highlight";
  BadgeVariant2["Pop"] = "pop";
  BadgeVariant2["Upgrade"] = "upgrade";
  BadgeVariant2["Unlisted"] = "unlisted";
  BadgeVariant2["Enhance"] = "enhance";
  return BadgeVariant2;
})(BadgeVariant || {});
const stateCN = (state) => {
  const classNames = {
    [
      "error"
      /* Error */
    ]: `
      tw-bg-red-lighter
      tw-text-red-darkest
      dark:tw-bg-red-darkest
      dark:tw-text-red-lighter
    `,
    [
      "info"
      /* Info */
    ]: `
      tw-bg-gray-lighter
      tw-text-black
      dark:tw-bg-gray
      dark:tw-text-white
    `,
    [
      "success"
      /* Success */
    ]: `
      tw-bg-green-lighter
      tw-text-green-darkest
      dark:tw-bg-green-darkest
      dark:tw-text-green-lighter
    `,
    [
      "warning"
      /* Warning */
    ]: `
      tw-bg-gold-lighter
      tw-text-gold-darkest
      dark:tw-bg-gold-darkest
      dark:tw-text-gold-lighter
    `
  };
  if (!state || !classNames[state]) {
    return null;
  }
  return helpers_cn.cn("tw-font-medium", classNames[state]);
};
const variantCN = (variant) => {
  const classNames = {
    [
      "default"
      /* Default */
    ]: `
      tw-bg-gray-lighter
      tw-font-medium
      tw-text-black
      dark:tw-bg-gray
      dark:tw-text-white
    `,
    [
      "highlight"
      /* Highlight */
    ]: `
      tw-bg-teal-lighter
      tw-font-semibold
      tw-text-teal-darkest
      dark:tw-bg-teal-lighter
      dark:tw-text-teal-darkest
    `,
    [
      "pop"
      /* Pop */
    ]: `
      tw-bg-gold
      tw-font-semibold
      tw-text-black
      dark:tw-text-gold-darkest
    `,
    [
      "upgrade"
      /* Upgrade */
    ]: `
      tw-bg-blue-lightest
      tw-font-semibold
      tw-text-black
      dark:tw-text-blue-darkest
    `,
    [
      "enhance"
      /* Enhance */
    ]: `
      tw-bg-teal-lightest
      tw-font-semibold
      tw-text-black
    `,
    [
      "unlisted"
      /* Unlisted */
    ]: `
      tw-bg-gold-lightest
      tw-font-medium
      tw-text-gold-darkest
      dark:tw-bg-gold-darkest
      dark:tw-text-gold-lighter
    `
  };
  if (!variant || !classNames[variant]) {
    return classNames[
      "default"
      /* Default */
    ];
  }
  return classNames[variant];
};
const Badge = React__namespace.forwardRef(
  (props, ref) => {
    const {
      as = "span",
      state,
      variant,
      iconName,
      iconProps,
      disabled,
      lowercase,
      outset,
      className,
      href,
      externalHref,
      title,
      children,
      showCursor,
      ...rest
    } = props;
    if (!children && !iconName) {
      return null;
    }
    const Component = href ? Link : as;
    const badgeCN2 = helpers_cn.cn(
      "tw-align-baseline",
      !lowercase && "tw-capitalize",
      "tw-duration-200",
      "tw-ease-out",
      "tw-shrink-0 tw-grow-0 tw-basis-auto",
      "tw-inline-block",
      "tw-leading-4",
      "tw-px-1",
      "tw-py-0.5",
      "tw-relative",
      "tw-rounded-[4px]",
      "tw-self-center",
      "tw-text-sm",
      "tw-transition",
      "tw--top-px",
      "tw-whitespace-nowrap",
      stateCN(state) || variantCN(variant),
      disabled && "tw-pointer-events-none tw-opacity-[0.7]",
      (showCursor || title && !href) && "tw-cursor-help",
      href && "hover:tw-underline",
      outset,
      className
    );
    return /* @__PURE__ */ jsxRuntime.jsxs(
      Component,
      {
        ...rest,
        className: badgeCN2,
        to: externalHref ? void 0 : href,
        href: externalHref ? href : void 0,
        title,
        ref,
        external: externalHref,
        children: [
          iconName && /* @__PURE__ */ jsxRuntime.jsx(
            DecorativeIcon,
            {
              ...iconProps,
              name: iconName,
              className: helpers_cn.cn("tw-mr-0.5 tw-align-bottom", iconProps == null ? void 0 : iconProps.className),
              focusable: "false"
            }
          ),
          children
        ]
      }
    );
  }
);
Badge.displayName = "Badge";
const BetaBadge = ({ heading, className }) => {
  const betaBadgeCN = helpers_cn.cn(
    heading && "tw-top-1 !tw-self-start tw-align-top",
    className
  );
  return /* @__PURE__ */ jsxRuntime.jsx(Badge, { as: "sup", variant: BadgeVariant.Pop, className: betaBadgeCN, children: "Beta" });
};
const MainBranchBadge = () => /* @__PURE__ */ jsxRuntime.jsx(Badge, { variant: BadgeVariant.Highlight, children: "Production" });
const NewBadge = ({ className }) => /* @__PURE__ */ jsxRuntime.jsx(Badge, { className, variant: BadgeVariant.Highlight, children: "New" });
const PublishedPinnedBadge = ({
  published,
  pinned
}) => {
  if (published) {
    return /* @__PURE__ */ jsxRuntime.jsx(
      Badge,
      {
        variant: BadgeVariant.Pop,
        className: "!tw-top-0 tw-ml-1 tw-align-middle tw-normal-case",
        ...pinned ? { iconName: "pin" } : {},
        children: pinned ? "Pinned" : "Default"
      }
    );
  }
  return null;
};
const TrialBadge = ({
  heading,
  planName = "Pro",
  featureName = "This feature",
  className
}) => {
  const trialBadgeCN = helpers_cn.cn(
    heading && "tw-top-1 !tw-self-start tw-align-top",
    className
  );
  return /* @__PURE__ */ jsxRuntime.jsxs(
    Badge,
    {
      as: "sup",
      variant: BadgeVariant.Upgrade,
      className: trialBadgeCN,
      title: `${featureName} is a ${planName} feature`,
      children: [
        planName,
        " feature"
      ]
    }
  );
};
const buttonCN = ({
  type = "default",
  level = "primary",
  variant = "standard",
  size = "default",
  saving,
  disabled,
  callForAttention,
  outset,
  className
}) => helpers_cn.cn(
  "btn",
  `btn-${type}`,
  type === "default" && `btn--size-${size}`,
  `btn-${level}`,
  `btn-${level}--${variant}`,
  saving && `btn--saving btn-${level}--saving`,
  disabled && `btn--disabled btn-${level}--disabled`,
  callForAttention && "btn--call-for-attention",
  outset,
  className
);
const withIconWrapperCN = helpers_cn.cn(
  "tw-flex",
  "tw-justify-center",
  "tw-flex-nowrap",
  "tw-items-center"
);
const render = ({
  children,
  iconName,
  iconXPosition,
  iconClassName,
  iconProps
}) => {
  const hasIconLeft = iconXPosition === "left";
  if (iconName) {
    const renderIcon = /* @__PURE__ */ jsxRuntime.jsx(
      DecorativeIcon,
      {
        ...iconProps,
        className: helpers_cn.cn(
          "tw-shrink-0",
          hasIconLeft ? "tw-mr-2" : "tw-ml-2",
          iconProps == null ? void 0 : iconProps.className,
          iconClassName
        ),
        focusable: "false",
        name: iconName
      }
    );
    return hasIconLeft ? /* @__PURE__ */ jsxRuntime.jsxs("span", { className: withIconWrapperCN, children: [
      renderIcon,
      children
    ] }) : /* @__PURE__ */ jsxRuntime.jsxs("span", { className: withIconWrapperCN, children: [
      children,
      renderIcon
    ] });
  }
  return children;
};
const Button = React.forwardRef(
  ({
    children,
    variant,
    level,
    size = "default",
    saving = false,
    disabled = false,
    iconName,
    iconXPosition = "left",
    iconClassName,
    iconProps,
    outset,
    type = "button",
    className,
    activeClassName,
    onClick,
    ...rest
  }, ref) => {
    const renderLink = useLink();
    children = children && /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [
      children,
      saving && "..."
    ] });
    const CN = buttonCN({
      level,
      variant,
      size,
      saving,
      disabled,
      outset,
      className
    });
    const handleClick = (e) => {
      if (saving) {
        e.preventDefault();
        return;
      }
      return onClick == null ? void 0 : onClick(e);
    };
    const commonProps = {
      className: CN,
      onClick: handleClick,
      disabled,
      ...saving && { "aria-disabled": true },
      children: render({
        children,
        iconName,
        iconXPosition,
        iconClassName,
        iconProps
      })
    };
    if (("to" in rest || "href" in rest) && (rest.to || rest.href)) {
      return renderLink({
        ref,
        ...rest,
        ...commonProps,
        activeClassName
      });
    }
    return /* @__PURE__ */ jsxRuntime.jsx(
      "button",
      {
        ref,
        ...rest,
        ...commonProps,
        type
      }
    );
  }
);
Button.displayName = "Button";
const ButtonGroup = ({
  children,
  outset,
  className,
  ...rest
}) => {
  return /* @__PURE__ */ jsxRuntime.jsx(
    "div",
    {
      ...rest,
      className: helpers_cn.cn(
        "tw-flex",
        "tw-w-full",
        "tw-flex-wrap",
        "tw-items-center",
        "tw-justify-end",
        "tw-actions-flex-gap-4",
        "md:tw-w-auto",
        "md:tw-justify-start",
        outset,
        className
      ),
      children
    }
  );
};
const ButtonIcon = React.forwardRef(
  ({
    children,
    variant,
    level,
    size = "default",
    saving = false,
    disabled = false,
    iconName,
    title,
    callForAttention,
    outset,
    type = "button",
    className,
    activeClassName,
    width = size === "sm" ? 14 : 16,
    height = width,
    iconWrapperClassName = "",
    onClick,
    "aria-label": label = title,
    ...rest
  }, ref) => {
    const renderLink = useLink();
    if (!iconName && !children) {
      return null;
    }
    const CN = buttonCN({
      type: "icon",
      level,
      variant,
      size,
      saving,
      disabled,
      callForAttention,
      outset,
      className
    });
    const handleClick = (e) => {
      if (saving) {
        e.preventDefault();
        return;
      }
      return onClick == null ? void 0 : onClick(e);
    };
    const iconWrapper = /* @__PURE__ */ jsxRuntime.jsx(
      "span",
      {
        className: helpers_cn.cn(
          "tw-absolute tw-left-1/2 tw-top-1/2 tw--translate-x-1/2 tw--translate-y-1/2",
          iconWrapperClassName
        ),
        children: iconName && title ? /* @__PURE__ */ jsxRuntime.jsx(
          AccessibleIcon,
          {
            title,
            name: iconName,
            width,
            height,
            className: "!tw-block tw-align-baseline"
          }
        ) : children
      }
    );
    const commonProps = {
      "aria-label": label,
      className: helpers_cn.cn(CN, `btn-icon--size-${size}`),
      onClick: handleClick,
      disabled,
      ...saving && { "aria-disabled": true },
      children: iconWrapper
    };
    const { to, href } = rest;
    if (to || href) {
      return renderLink({
        ref,
        ...rest,
        ...commonProps,
        activeClassName
      });
    }
    return /* @__PURE__ */ jsxRuntime.jsx(
      "button",
      {
        ref,
        ...rest,
        ...commonProps,
        type
      }
    );
  }
);
ButtonIcon.displayName = "ButtonIcon";
const os = () => {
  if (typeof window === "undefined") {
    return "MAC";
  }
  const userAgent = window.navigator.userAgent;
  const platform = window.navigator.platform;
  const macosPlatforms = ["Macintosh", "MacIntel", "MacPPC", "Mac68K"];
  const windowsPlatforms = ["Win32", "Win64", "Windows", "WinCE"];
  const iosPlatforms = ["iPhone", "iPad", "iPod"];
  let os2 = "MAC";
  if (macosPlatforms.indexOf(platform) !== -1) {
    os2 = "MAC";
  } else if (iosPlatforms.indexOf(platform) !== -1) {
    os2 = "IOS";
  } else if (windowsPlatforms.indexOf(platform) !== -1) {
    os2 = "WINDOWS";
  } else if (/Android/.test(userAgent)) {
    os2 = "ANDROID";
  } else if (/Linux/.test(platform)) {
    os2 = "LINUX";
  }
  return os2;
};
const osControlKey = () => {
  if (["WINDOWS", "ANDROID", "LINUX"].includes(os())) {
    return "Ctrl";
  }
  return "⌘";
};
const isProbablyMobileDevice = () => {
  if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(
    navigator.userAgent
  )) {
    return true;
  }
  return false;
};
const KeyboardShortcut = () => /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [
  /* @__PURE__ */ jsxRuntime.jsx("kbd", { className: "tw-font-sans tw-text-xs tw-leading-none tw-text-gray-darker dark:tw-text-gray-light", children: osControlKey() }),
  /* @__PURE__ */ jsxRuntime.jsx("kbd", { className: "tw-text-xs tw-leading-none tw-text-gray-darker dark:tw-text-gray-light", children: "K" })
] });
const CommandPaletteSearchButton = ({
  onClick,
  isNavCollapsed
}) => {
  return /* @__PURE__ */ jsxRuntime.jsx(
    "button",
    {
      type: "button",
      onClick,
      className: helpers_cn.cn(
        "tw-ease-in-out tw-group tw-w-full tw-rounded-sm tw-bg-teal-darkest/[.03] tw-text-left tw-text-sm tw-font-medium tw-leading-none tw-transition-all tw-duration-150 tw-@container/SearchButton hover:tw-bg-teal-darkest/[.05]",
        "dark:tw-bg-black/80 dark:hover:tw-bg-black/60 lg:dark:tw-bg-black/30 lg:dark:hover:tw-bg-black/50",
        "tw-border-t-black/[.08] lg:tw-border-t",
        "tw-border-b-white/95 lg:tw-border-b",
        "dark:tw-border-t-black/80 hover:dark:tw-border-t-black/90",
        "dark:tw-border-b-white/[0.08]",
        isNavCollapsed ? "tw-w-12 tw-overflow-hidden" : "tw-w-full"
      ),
      children: /* @__PURE__ */ jsxRuntime.jsxs(
        "span",
        {
          className: helpers_cn.cn(
            "tw-flex tw-items-center tw-justify-between tw-py-2",
            isNavCollapsed ? "tw-px-2" : "tw-px-3"
          ),
          children: [
            /* @__PURE__ */ jsxRuntime.jsxs("span", { className: "tw-flex tw-min-w-0 tw-flex-1 tw-items-center", children: [
              /* @__PURE__ */ jsxRuntime.jsx(
                DecorativeIcon,
                {
                  className: helpers_cn.cn(
                    "tw-size-4 tw-flex-shrink-0 tw-text-gray-darker group-hover:tw-text-teal-action dark:tw-text-gray-lighter dark:group-hover:tw-text-teal-action",
                    isNavCollapsed ? "tw-mr-0 tw-transition-[margin] tw-delay-75 tw-duration-50" : "tw-mr-3"
                  ),
                  focusable: "false",
                  name: "nav-command-palette"
                }
              ),
              /* @__PURE__ */ jsxRuntime.jsxs(
                "span",
                {
                  className: helpers_cn.cn(
                    "command-palette-search-text tw-min-w-0 tw-flex-1 tw-truncate tw-text-gray-darker tw-@container/SearchButtonLabel group-hover:tw-text-teal-action dark:tw-text-gray-lighter dark:group-hover:tw-text-teal-action",
                    "tw-ease-in-out tw-transition-opacity",
                    isNavCollapsed ? "tw-opacity-0 tw-duration-50" : "tw-opacity-100 tw-delay-200 tw-duration-150"
                  ),
                  children: [
                    /* @__PURE__ */ jsxRuntime.jsx("span", { className: "tw-hidden @[55px]/SearchButtonLabel:tw-inline", children: "Search" }),
                    /* @__PURE__ */ jsxRuntime.jsx("span", { className: "tw-hidden @[55px]/SearchButtonLabel:tw-inline @[132px]/SearchButtonLabel:tw-hidden", children: "…" }),
                    " ",
                    /* @__PURE__ */ jsxRuntime.jsx("span", { className: "tw-hidden @[132px]/SearchButtonLabel:tw-inline", children: "Netlify…" })
                  ]
                }
              )
            ] }),
            !isProbablyMobileDevice() && /* @__PURE__ */ jsxRuntime.jsx(
              "span",
              {
                className: helpers_cn.cn(
                  "command-palette-keyboard-shortcut tw-ml-2 tw-hidden tw-items-baseline @[132px]/SearchButton:tw-flex",
                  "tw-ease-in-out tw-transition-opacity tw-duration-150",
                  isNavCollapsed ? "tw-opacity-0 tw-duration-50" : "tw-opacity-100 tw-delay-200 tw-duration-150"
                ),
                children: /* @__PURE__ */ jsxRuntime.jsx(KeyboardShortcut, {})
              }
            )
          ]
        }
      )
    }
  );
};
function $090815f5086f7f29$var$reactToText(node, resolvers) {
  if (typeof node === "string" || typeof node === "number" || typeof node === "boolean") return node.toString();
  if (!node) return "";
  if (Array.isArray(node)) return node.map((entry) => $090815f5086f7f29$var$reactToText(entry, resolvers)).join("");
  const [nodeType, nodeProps] = /* @__PURE__ */ React.isValidElement(node) ? [
    node.type,
    node.props
  ] : [
    null,
    null
  ];
  if (nodeType && (resolvers == null ? void 0 : resolvers.has(nodeType))) {
    const resolver = resolvers.get(nodeType);
    return resolver(nodeProps);
  }
  const props = node.props ? node.props : {};
  if (!props || !props.children) return "";
  return $090815f5086f7f29$var$reactToText(props.children, resolvers);
}
var $090815f5086f7f29$export$2e2bcd8739ae039 = $090815f5086f7f29$var$reactToText;
const HistoryContext = React.createContext(void 0);
const HistoryProvider = ({
  children,
  history
}) => {
  return /* @__PURE__ */ jsxRuntime.jsx(HistoryContext.Provider, { value: history, children });
};
const useHistory = () => {
  const historyContext = React.useContext(HistoryContext);
  if (!historyContext) {
    throw new Error("useHistory must be used within a HistoryContext");
  }
  return historyContext;
};
const isNetlifyUrl = (url) => {
  var _a;
  const isAnchor = ((_a = url.charAt) == null ? void 0 : _a.call(url, 0)) === "#";
  const isExternal = url && !isAnchor;
  let isNetlifyProperty = !isExternal;
  if (isExternal) {
    try {
      const { origin } = new URL(url);
      isNetlifyProperty = /\.netlify\.com$/.test(origin) || /\.stackbit\.com$/.test(origin);
    } catch {
    }
  }
  return isNetlifyProperty;
};
const isWithinOnePixel = (a, b) => Math.abs(a - b) <= 1;
const useDropdownAlignment = (dropdownContentRef, preferredAlign = "left") => {
  const [dropdownAlign, setDropdownAlign] = React.useState(preferredAlign);
  React.useEffect(() => {
    setDropdownAlign(preferredAlign);
  }, [preferredAlign]);
  React.useEffect(() => {
    const { current: dropdownContent } = dropdownContentRef;
    if (!dropdownContent) {
      return;
    }
    const handleIntersection = ([
      intersectionEntry
    ]) => {
      const { boundingClientRect, intersectionRect, intersectionRatio } = intersectionEntry;
      const { left: visibleLeft, right: visibleRight } = intersectionRect;
      const { left: elementLeft, right: elementRight } = boundingClientRect;
      if (intersectionRatio === 0) {
        setDropdownAlign(preferredAlign);
        return;
      }
      if (intersectionRatio === 1) {
        return;
      }
      const isLeftInView = isWithinOnePixel(visibleLeft, elementLeft);
      const isRightInView = isWithinOnePixel(visibleRight, elementRight);
      if (!isLeftInView) {
        setDropdownAlign("left");
        return;
      }
      if (!isRightInView) {
        setDropdownAlign("right");
        return;
      }
      setDropdownAlign(preferredAlign);
    };
    const observer = new IntersectionObserver(handleIntersection, {
      threshold: [0, 1]
    });
    observer.observe(dropdownContent);
    return () => observer.disconnect();
  }, [dropdownContentRef, preferredAlign]);
  return dropdownAlign;
};
const defaultItemToString = (item) => {
  return $090815f5086f7f29$export$2e2bcd8739ae039((item == null ? void 0 : item.label) || "").trim();
};
const toggleToString = (toggle) => {
  return $090815f5086f7f29$export$2e2bcd8739ae039((toggle == null ? void 0 : toggle.label) || "").trim();
};
const buttonConfigMap = {
  default: {
    level: "secondary"
  },
  bare: {
    level: "tertiary"
  },
  "bare-large": {
    level: "tertiary",
    className: helpers_cn.cn(
      "tw-text-xl",
      "tw-font-semibold",
      "!tw-leading-none",
      "tw-w-auto",
      "tw-text-black",
      "dark:tw-text-white",
      "dark:hover:tw-bg-transparent"
    )
  },
  primary: {
    level: "primary"
  }
};
const SelectedIcon = () => /* @__PURE__ */ jsxRuntime.jsx(
  AccessibleIcon,
  {
    title: "selected",
    "aria-label": "selected",
    name: "checkmark",
    className: "tw-absolute tw-right-4 tw-top-1/2 tw--translate-y-1/2",
    width: 12
  }
);
function Dropdown({
  className,
  toggle,
  items = [],
  menu,
  noCaret,
  onClick,
  onSelect,
  scrollable = false,
  disabled = false,
  alignRight = false,
  menuPosition = "below",
  variant = "default",
  provider,
  ButtonAuthProvider,
  caret,
  pinnedItems = [],
  condensed,
  itemGroups,
  noCheck,
  iconButton,
  itemToString = defaultItemToString,
  ...rest
}) {
  const dropdownContentRef = React.useRef(null);
  const browserHistory = useHistory();
  const align = useDropdownAlignment(
    dropdownContentRef,
    alignRight ? "right" : "left"
  );
  const handleSelect = (selectedItem, other) => {
    if (!selectedItem) {
      return;
    }
    const { to, href, reloadPage } = selectedItem;
    onSelect == null ? void 0 : onSelect(selectedItem);
    if (href) {
      const isNetlifyLink = isNetlifyUrl(href);
      const options = isNetlifyLink ? "noopener" : "noopener, noreferrer";
      window.open(href, "_blank", options);
      return;
    }
    if (to && reloadPage) {
      window.location.href = to;
      return;
    }
    if (to) {
      browserHistory.push(to);
    }
  };
  const buttonConfig = buttonConfigMap[variant];
  itemGroups == null ? void 0 : itemGroups.forEach((itemGroup, index) => {
    if (index > 0) {
      const prevGroup = itemGroups[index - 1];
      itemGroup.relativeIndex = (prevGroup.relativeIndex ? prevGroup.relativeIndex : 0) + prevGroup.items.length;
    } else {
      itemGroup.relativeIndex = 0;
    }
  });
  const isItemSelected = (item, selectedItem) => {
    if (item.selected) {
      return true;
    }
    const stringifiedItem = itemToString(item);
    if (stringifiedItem && selectedItem) {
      return stringifiedItem === itemToString(selectedItem);
    }
  };
  const checkIfExists = (obj, prop) => typeof obj === "object" && Boolean(obj[prop]);
  const applyIfExists = (obj, prop) => checkIfExists(obj, prop) ? obj[prop] : ``;
  const countOfAllItems = (itemGroups == null ? void 0 : itemGroups.reduce((prevVal, group) => {
    var _a;
    const groupSize = applyIfExists(group.items, "size") || ((_a = group.items) == null ? void 0 : _a.length) || 0;
    return prevVal + groupSize;
  }, 0)) || applyIfExists(items, "size") || (items == null ? void 0 : items.length);
  return /* @__PURE__ */ jsxRuntime.jsx(
    Downshift,
    {
      onSelect: handleSelect,
      itemToString,
      ...rest,
      children: ({
        getRootProps,
        getToggleButtonProps,
        getItemProps,
        isOpen,
        toggleMenu,
        selectedItem,
        highlightedIndex,
        getInputProps,
        getMenuProps
      }) => {
        const hasMenu = toggle ? countOfAllItems > 0 : countOfAllItems > 1;
        const button = toggle || selectedItem || (items.length ? items[0] : void 0);
        const label = button == null ? void 0 : button.label;
        if (!label) {
          return null;
        }
        const menuProps = getMenuProps(
          {
            "aria-labelledby": void 0
          },
          { suppressRefError: true }
        );
        const rootProps = {
          ...getRootProps(
            /* NOTE: Override the default Downshift "role='combobox'" and "aria-labelledby" attribute,
              since we are using Downshift for dropdown-select style functionality only and not autocomplete or input.
              See https://github.com/downshift-js/downshift/issues/750#issuecomment-524650373
            */
            {
              "aria-labelledby": void 0,
              role: void 0
            },
            /* NOTE: We suppress ref errors since we are applying to a div, not a custom component.
              See https://github.com/downshift-js/downshift/issues/731#issuecomment-729758697
            */
            { suppressRefError: true }
          )
        };
        if (!hasMenu) {
          return toggle ? null : /* @__PURE__ */ jsxRuntime.jsx("div", { className, ...rootProps, children: label });
        }
        const DropdownButton = provider ? ButtonAuthProvider : iconButton ? ButtonIcon : Button;
        const shouldUseGroupedList = itemGroups && (itemGroups == null ? void 0 : itemGroups.length) > 0 || pinnedItems && pinnedItems.length > 0;
        const MenuWrapper = shouldUseGroupedList ? "ul" : "div";
        const toggleProvidedAriaLabel = typeof toggle === "object" && toggle.ariaLabel ? toggle.ariaLabel : "";
        return /* @__PURE__ */ jsxRuntime.jsxs(
          "div",
          {
            className: helpers_cn.cn("dropdown", className, {
              open: isOpen
            }),
            ...rootProps,
            children: [
              /* @__PURE__ */ jsxRuntime.jsxs(
                DropdownButton,
                {
                  level: buttonConfig.level,
                  ...getToggleButtonProps({
                    "aria-label": `${toggleProvidedAriaLabel || toggleToString(button)}. ${isOpen ? "Close menu" : "Open menu"}`,
                    "aria-activedescendant": getInputProps()["aria-activedescendant"]
                  }),
                  tabIndex: toggle == null ? void 0 : toggle.tabIndex,
                  disabled,
                  name: toggleToString(button),
                  onClick: () => {
                    toggleMenu();
                    if (onClick && !isOpen) {
                      onClick();
                    }
                  },
                  size: toggle == null ? void 0 : toggle.size,
                  className: provider ? "tw-w-full tw-bg-white dark:tw-bg-black" : helpers_cn.cn(
                    buttonConfig.className || "",
                    applyIfExists(button, "className"),
                    {
                      [applyIfExists(button, `activeClassName`)]: checkIfExists(button, "active") || isOpen,
                      [applyIfExists(button, `inactiveClassName`)]: !checkIfExists(button, "active") && !isOpen
                    }
                  ),
                  provider,
                  condensed,
                  saving: checkIfExists(button, "saving"),
                  title: toggleToString(button),
                  iconName: iconButton,
                  children: [
                    label,
                    !noCaret && !checkIfExists(button, "saving") && /* @__PURE__ */ jsxRuntime.jsx(
                      DecorativeIcon,
                      {
                        name: (caret == null ? void 0 : caret.iconName) || "caret-down",
                        width: (caret == null ? void 0 : caret.width) || 12,
                        height: (caret == null ? void 0 : caret.height) || 12,
                        className: helpers_cn.cn(
                          "tw-transition-transform tw-duration-100 tw-ease-cubic-bezier",
                          caret == null ? void 0 : caret.className,
                          isOpen && "tw--rotate-180 tw-transform",
                          (caret == null ? void 0 : caret.cancelWidth) && "tw--mr-5",
                          (toggle == null ? void 0 : toggle.size) === "sm" ? "tw-relative tw-top-px tw-ml-1.5" : "tw-ml-2"
                        )
                      }
                    )
                  ]
                }
              ),
              /* @__PURE__ */ jsxRuntime.jsxs(
                MenuWrapper,
                {
                  className: helpers_cn.cn("dropdown-inner dropdown-menu", menu == null ? void 0 : menu.className, {
                    "!tw-left-auto !tw-right-0": align === "right",
                    "tw-bottom-[calc(100%+theme(spacing.1))] tw-top-auto": menuPosition === "above"
                  }),
                  ref: dropdownContentRef,
                  ...shouldUseGroupedList && menuProps,
                  children: [
                    /* @__PURE__ */ jsxRuntime.jsx(
                      "div",
                      {
                        className: helpers_cn.cn({
                          "dropdown-menu--scrollable": scrollable,
                          "tw-overflow-x-hidden": scrollable
                        }),
                        children: (itemGroups || [{ items }]).map((item, index) => {
                          const { label: groupLabel, items: items2, relativeIndex } = item;
                          return /* @__PURE__ */ jsxRuntime.jsxs(
                            "ul",
                            {
                              "aria-labelledby": groupLabel ? `group-label-${index}` : void 0,
                              ...!shouldUseGroupedList && menuProps,
                              children: [
                                groupLabel && /* @__PURE__ */ jsxRuntime.jsx(
                                  "li",
                                  {
                                    id: `group-label-${index}`,
                                    role: "presentation",
                                    className: helpers_cn.cn(
                                      "menuitem !tw-text-sm !tw-font-regular !tw-text-gray-darker dark:!tw-text-gray-lighter",
                                      { divider: index !== 0 }
                                    ),
                                    children: groupLabel
                                  }
                                ),
                                items2.map((item2, index2) => {
                                  const {
                                    className: className2,
                                    selected,
                                    active,
                                    divider,
                                    to,
                                    href,
                                    disabled: disabled2,
                                    onClick: onClick2
                                  } = item2;
                                  const itemRelativeIndex = relativeIndex ? relativeIndex + index2 : index2;
                                  return /* @__PURE__ */ jsxRuntime.jsx("li", { children: /* @__PURE__ */ jsxRuntime.jsxs(
                                    Link,
                                    {
                                      ...getItemProps({
                                        item: item2,
                                        index: itemRelativeIndex,
                                        to,
                                        href,
                                        disabled: disabled2,
                                        ...noCheck ? { "aria-selected": void 0 } : {},
                                        onClick: (e) => {
                                          e.preventDefault();
                                          onClick2 == null ? void 0 : onClick2();
                                        }
                                      }),
                                      className: helpers_cn.cn("menuitem", className2, {
                                        highlighted: itemRelativeIndex === highlightedIndex,
                                        selected: noCheck ? null : selected,
                                        active: active || isItemSelected(item2, selectedItem),
                                        divider,
                                        disabled: disabled2
                                      }),
                                      children: [
                                        item2.label,
                                        !noCheck && isItemSelected(item2, selectedItem) && /* @__PURE__ */ jsxRuntime.jsx(SelectedIcon, {})
                                      ]
                                    }
                                  ) }, index2);
                                })
                              ]
                            },
                            `group-${index}`
                          );
                        })
                      }
                    ),
                    pinnedItems && pinnedItems.length > 0 && /* @__PURE__ */ jsxRuntime.jsx("ul", { className: "divider", children: pinnedItems.map((pinnedItem, index) => {
                      const { className: className2, selected, active, to, href, onClick: onClick2 } = pinnedItem;
                      const relativeIndex = index + countOfAllItems;
                      return /* @__PURE__ */ jsxRuntime.jsx("li", { children: /* @__PURE__ */ jsxRuntime.jsxs(
                        Link,
                        {
                          ...getItemProps({
                            item: pinnedItem,
                            index: relativeIndex,
                            to,
                            href,
                            onClick: (e) => {
                              e.preventDefault();
                              onClick2 == null ? void 0 : onClick2();
                            }
                          }),
                          className: helpers_cn.cn("menuitem", className2, {
                            highlighted: relativeIndex === highlightedIndex,
                            selected,
                            active: active || isItemSelected(pinnedItem, selectedItem)
                          }),
                          children: [
                            pinnedItem.label,
                            selected && /* @__PURE__ */ jsxRuntime.jsx(SelectedIcon, {})
                          ]
                        }
                      ) }, `pinned-${relativeIndex}`);
                    }) })
                  ]
                }
              )
            ]
          }
        );
      }
    }
  );
}
const HTMLLinkBase = ({
  to,
  href,
  disabled,
  children,
  className,
  activeClassName,
  RouterLink,
  ...rest
}, ref) => {
  var _a;
  const link = to || href || "#";
  const isAnchor = ((_a = link == null ? void 0 : link.charAt) == null ? void 0 : _a.call(link, 0)) === "#";
  const isExternal = href && !isAnchor;
  const isNetlifyHref = href && isNetlifyUrl(href);
  const withRef = {
    ...(typeof ref === "function" || (ref == null ? void 0 : ref.hasOwnProperty("current"))) && {
      /*
       ** ReactRouterLink needs innerRef
       ** adapt when upgrading react-router
       */
      [href ? "ref" : "innerRef"]: ref
    }
  };
  if (disabled) {
    const { role = "link" } = rest;
    return /* @__PURE__ */ jsxRuntime.jsx("a", { role, "aria-disabled": "true", className, ...withRef, children });
  }
  if (isExternal) {
    const { target = "_blank", ...restWithoutTarget } = rest;
    return /* @__PURE__ */ jsxRuntime.jsx(
      "a",
      {
        className,
        target,
        ...target === "_blank" && {
          rel: isNetlifyHref ? "noopener" : "noopener noreferrer",
          "aria-describedby": "open-in-new-tab"
        },
        href,
        ...restWithoutTarget,
        ...withRef,
        children
      }
    );
  }
  if (isAnchor) {
    return /* @__PURE__ */ jsxRuntime.jsx("a", { href: link, className, ...rest, ...withRef, children });
  }
  if (RouterLink) {
    return /* @__PURE__ */ jsxRuntime.jsx(
      RouterLink,
      {
        to: link,
        className,
        activeClassName,
        ...rest,
        ...withRef,
        children
      }
    );
  }
  console.warn(
    `The RouterLink prop of HTMLLink is not defined. Check the return of the renderLink at LinkProvider`
  );
  return null;
};
const HTMLLink = React.forwardRef(
  HTMLLinkBase
);
var LogoSize = /* @__PURE__ */ ((LogoSize2) => {
  LogoSize2["Tiny"] = "tiny";
  LogoSize2["XSmall"] = "xs";
  LogoSize2["Small"] = "sm";
  LogoSize2["Medium"] = "md";
  LogoSize2["Large"] = "lg";
  LogoSize2["Full"] = "full";
  LogoSize2["SitesHero"] = "sitesHero";
  return LogoSize2;
})(LogoSize || {});
const logoSizeCN = (size) => {
  switch (size) {
    case "tiny":
      return "tw-w-5 tw-rounded-[2px] tw-text-xs tw-leading-normal";
    case "xs":
      return "tw-w-10 tw-rounded-sm tw-text-lg tw-leading-normal";
    case "sm":
      return "tw-w-16 tw-rounded-lg tw-text-[28px] tw-leading-normal";
    case "md":
      return helpers_cn.cn(
        // Inner-height of the OrganizationOverviewHero card
        "tw-w-32",
        "tw-rounded-lg",
        "tw-text-[56px]",
        "tw-leading-chill"
      );
    case "lg":
      return helpers_cn.cn(
        // Maximum height of the TeamOverviewHero card
        "tw-w-52 [@media(min-width:1330px)]:tw-w-[188px]",
        "tw-rounded-lg",
        "tw-text-[80px]",
        "tw-leading-chill"
      );
    case "full":
      return "tw-w-full tw-rounded-lg tw-text-[80px] tw-leading-chill";
    case "sitesHero":
      return "tw-w-[83px] tw-rounded-lg tw-text-[32px] tw-leading-chill";
  }
};
const imageCN = helpers_cn.cn(
  "tw-block",
  "tw-h-full",
  "tw-w-full",
  "tw-object-cover"
);
const iconCN$1 = helpers_cn.cn(
  imageCN,
  "tw-text-white",
  "tw-flex",
  "tw-items-center",
  "tw-justify-center",
  "tw-font-semibold"
);
const getAltText = (prefix, name) => name && `${prefix} for ${name}`;
function Placeholder({
  placeholderName,
  teamId,
  name,
  className
}) {
  const placeholderColorPalette = helpers_placeholderColors.getPlaceholderGradientColorsFromId(teamId);
  const accessibilityProps = { role: void 0 };
  if (name) {
    accessibilityProps.role = "img";
    accessibilityProps["aria-label"] = getAltText("Placeholder logo", name);
  } else {
    accessibilityProps["aria-hidden"] = "true";
  }
  return /* @__PURE__ */ jsxRuntime.jsx(
    "span",
    {
      className: helpers_cn.cn(iconCN$1, className),
      ...accessibilityProps,
      style: {
        background: `linear-gradient(to bottom right, ${placeholderColorPalette.to}, ${placeholderColorPalette.from})`
      },
      children: placeholderName ? lodashSplit(placeholderName, "", 1)[0].toUpperCase() : /* @__PURE__ */ jsxRuntime.jsx(
        "svg",
        {
          viewBox: "0 0 100 100",
          "data-testid": "default-logo",
          "aria-hidden": "true",
          children: /* @__PURE__ */ jsxRuntime.jsx(
            "use",
            {
              width: "50%",
              height: "50%",
              x: "25%",
              y: "25%",
              href: "#netlify-logo-mono",
              fill: "#fff",
              opacity: ".75"
            }
          )
        }
      )
    }
  );
}
const Logo = ({
  name,
  teamId,
  size = LogoSize.Large,
  src,
  className,
  elementClassName,
  placeholderName
}) => {
  return /* @__PURE__ */ jsxRuntime.jsx(
    "span",
    {
      className: helpers_cn.cn(
        "tw-block tw-aspect-square tw-overflow-hidden",
        logoSizeCN(size),
        className
      ),
      children: src ? /* @__PURE__ */ jsxRuntime.jsx(
        Picture,
        {
          alt: name ? getAltText("Logo", name) || "" : "",
          className: helpers_cn.cn(imageCN, elementClassName),
          url: src,
          height: 208,
          width: 208,
          cover: true
        }
      ) : /* @__PURE__ */ jsxRuntime.jsx(
        Placeholder,
        {
          placeholderName,
          teamId,
          name,
          className: elementClassName
        }
      )
    }
  );
};
const Navigation = ({
  align,
  children,
  className,
  ordered = false,
  separator = false,
  itemClassName,
  ...rest
}) => {
  if (!children) return null;
  const alignmentCN = () => {
    switch (align) {
      case "start":
        return "tw-items-start";
      case "end":
        return "tw-items-end";
      case "center":
      default:
        return "tw-items-center";
    }
  };
  const listCN = helpers_cn.cn(
    "tw-flex",
    "tw-flex-wrap",
    alignmentCN(),
    "tw-list-none",
    "tw-my-0",
    "tw-p-0",
    className
  );
  const itemCN = helpers_cn.cn("tw-flex", "tw-items-center", "tw-m-1", itemClassName);
  const validChildren = React__namespace.Children.toArray(children).filter(
    (child) => React__namespace.isValidElement(child)
  );
  const List = ordered ? "ol" : "ul";
  const childrenCount = validChildren.length - 1;
  return /* @__PURE__ */ jsxRuntime.jsx(List, { className: listCN, ...rest, children: validChildren.map((child, index) => {
    if (!child) {
      return null;
    }
    return /* @__PURE__ */ jsxRuntime.jsxs("li", { className: itemCN, children: [
      child,
      separator && index !== childrenCount && /* @__PURE__ */ jsxRuntime.jsx(
        DecorativeIcon,
        {
          name: "nav-separator",
          className: "tw-mx-2 tw-hidden tw-shrink-0 tw-text-gray-light lg:tw-inline-block",
          "data-testid": "navigation-separator",
          width: 11,
          height: 22
        }
      )
    ] }, `navigation-${index}`);
  }) });
};
const navigationButtonCN = ({
  active,
  large,
  className
}) => helpers_cn.cn(
  "tw-w-auto",
  "tw-font-semibold",
  "tw-px-2",
  "tw-min-h-9",
  "tw-leading-6",
  "tw-text-left",
  "dark:hover:tw-text-teal-lightest",
  "dark:hover:tw-bg-teal-darkest",
  large && "tw-text-xl",
  active ? ["tw-text-black", "dark:tw-text-white"] : "tw-text-gray-darker dark:tw-text-gray-light",
  className
);
const NavigationButton = ({
  active,
  large,
  className,
  ...rest
}) => {
  return /* @__PURE__ */ jsxRuntime.jsx(
    Button,
    {
      level: "tertiary",
      className: navigationButtonCN({
        active,
        large,
        className
      }),
      ...rest
    }
  );
};
const PlanBadge = ({
  plan,
  href = "",
  children = void 0,
  className = ""
}) => {
  const standardPlans = helpers_plans.getStandardPlanNames().map((p) => p.toLowerCase());
  const highlight = !standardPlans.includes(plan.toLowerCase());
  return /* @__PURE__ */ jsxRuntime.jsx(
    Badge,
    {
      variant: highlight ? BadgeVariant.Highlight : void 0,
      href,
      className,
      children: children || plan
    }
  );
};
function SnapshotContainer({ children, wrap = false, className = "" }) {
  return /* @__PURE__ */ jsxRuntime.jsx(
    "div",
    {
      className: helpers_cn.cn(
        "tw-flex",
        "tw-gap-2",
        wrap ? "tw-flex-wrap" : "tw-flex-col",
        "snapshot",
        className
      ),
      children
    }
  );
}
const WATERMARKS = {
  email: "before:tw-mask-image-icon-email",
  support: "before:tw-mask-image-icon-support"
};
const PRIMARY = "tw-bg-gradient-primary-light dark:tw-bg-gradient-primary-dark";
const dropdownWrapperCN = helpers_cn.cn(
  "lg:tw-relative",
  "tw-static",
  "tw-w-full",
  "lg:tw-w-auto",
  "tw-mx-0"
);
const notificationsButtonCN = ({ isOpen }) => helpers_cn.cn(
  "hover:tw-text-teal-action dark:hover:tw-text-teal-action",
  "!tw-bg-transparent",
  "tw-text-sm",
  "tw-flex",
  "tw-flex-nowrap",
  "tw-items-center",
  "tw-justify-center",
  isOpen ? ["tw-text-teal-action dark:!tw-text-teal-action", "tw-font-bold"] : ["!tw-font-medium", "tw-text-gray-darker dark:tw-text-gray-lighter"],
  "tw-w-full",
  "lg:tw-w-auto",
  "lg:tw-px-0"
);
const asideCN = helpers_cn.cn(
  "lg:tw-max-w-auto",
  "tw-absolute",
  "tw-bg-white",
  "tw-text-gray-darkest",
  "tw-max-w-notifications",
  "tw-mt-1",
  "tw-opacity-100",
  "tw-overflow-hidden",
  "tw-rounded-lg",
  "tw-shadow-deep",
  "tw-top-[calc(theme(spacing.10)+theme(spacing.2))]",
  "lg:tw-top-10",
  "tw-visible",
  "tw-w-106",
  "tw-z-dropdown",
  "dark:tw-bg-gray-darkest",
  "dark:tw-text-white"
);
const listItemCN = ({ watermark, primary }) => helpers_cn.cn(
  "tw-border-b",
  "tw-border-gray-lightest",
  "dark:tw-border-gray-dark",
  "last:tw-border-b-0",
  watermark && "tw-bg-gray-lighter dark:tw-bg-black",
  primary && PRIMARY
);
const listItemLinkCN = ({ isHighlighted, watermark, primary }) => helpers_cn.cn(
  "tw-flex",
  "tw-items-stretch",
  "tw-px-4",
  "tw-py-6",
  "tw-text-inherit",
  "hover:tw-no-underline",
  "tw-transition-colors tw-duration-150 tw-ease-out",
  "hover:tw-bg-bgHover",
  isHighlighted && "tw-bg-bgHover tw-no-underline",
  watermark && helpers_cn.cn(
    "tw-overflow-hidden",
    "before:tw-content-empty",
    "before:tw-absolute",
    "before:tw--bottom-10",
    "before:tw-right-4",
    "before:tw-w-42",
    "before:tw-h-42",
    WATERMARKS[watermark],
    "before:tw-mask-no-repeat",
    "before:tw-mask-cover",
    "before:tw-bg-gray-light",
    "before:tw-z-0",
    "*:tw-z-1",
    "dark:before:tw-bg-gray-darker",
    "dark:hover:before:tw-bg-gray-dark"
  ),
  primary && PRIMARY
);
const listItemHeadingCN = ({ watermark }) => helpers_cn.cn(
  "dark:tw-text-gray-lightest",
  "tw-font-semibold",
  "tw-leading-normal",
  "tw-m-0",
  "tw-text-inherit",
  "tw-text-md",
  watermark && "!tw-text-textLoud"
);
const iconCN = ({ primary }) => helpers_cn.cn(
  "path:tw-fill-current",
  "tw-grow-0",
  "tw-shrink-0",
  "tw-mr-2",
  "tw-mt-1",
  "tw-w-4",
  "tw-text-gray",
  "dark:tw-text-gray-light",
  primary && "tw-text-teal-darker dark:tw-text-teal-lighter"
);
const metaCN = ({ watermark }) => helpers_cn.cn(
  "dark:tw-text-gray-lighter",
  "tw-font-regular",
  "tw-leading-normal",
  "tw-mt-1",
  "tw-text-muted",
  "tw-text-sm",
  watermark && "tw-w-3/4"
);
const externalLinkCN = ({ isHighlighted }) => helpers_cn.cn(
  "tw-bg-none",
  "tw-border-none",
  "tw-text-teal-action",
  "tw-inline-block",
  "tw-font-bold",
  "tw-pr-6",
  "tw-no-underline",
  "hover:tw-underline",
  "after:tw-content-arrow",
  "after:tw-ml-1",
  "after:tw-absolute",
  "after:tw-transform",
  "after:tw--rotate-45",
  "dark:tw-text-teal-lighter",
  isHighlighted && "!tw-underline"
);
const badgeCN = helpers_cn.cn(
  "tw--top-px",
  "tw-align-baseline",
  "tw-bg-gray-light",
  "tw-capitalize",
  "tw-duration-200",
  "tw-ease-out",
  "tw-shrink-0 tw-grow-0 tw-basis-auto",
  "tw-font-bold",
  "tw-inline-block",
  "tw-leading-tight",
  "tw-ml-2",
  "tw-px-1",
  "tw-py-0.5",
  "tw-relative",
  "tw-rounded-sm",
  "tw-self-center",
  "tw-text-black",
  "tw-text-sm",
  "tw-whitespace-nowrap"
);
const AVAILABLE = "Available";
const NO_CTA = "No Call To Action";
const UPGRADE_CTA = "UpgradeButton";
function SupportDropdown({
  userEmail,
  align = "left",
  onClickUpgrade,
  onClickUpgradeForHighSupportPriority,
  isOpen,
  accountSlug,
  accountSupportLevel = 0,
  accountSupportPriority,
  showUpgrade = showUpgradeCallToAction(accountSupportLevel),
  pricingUrl,
  buttonLevel = "secondary",
  isMobileNavOpen
}) {
  const browserHistory = useHistory();
  const accountIsHighSupportPriority = accountSupportPriority ? accountSupportPriority >= 5 : false;
  const redirectToPricingPage = () => {
    if (pricingUrl) {
      const isNetlifyLink = isNetlifyUrl(pricingUrl);
      const options = isNetlifyLink ? "noopener" : "noopener, noreferrer";
      window.open(pricingUrl, "_blank", options);
      return;
    }
    if (accountSlug) {
      browserHistory.push(helpers_path.billingPath({ slug: accountSlug }, "pricing"));
    }
  };
  const handleSelect = (selectedItem) => {
    if (selectedItem === UPGRADE_CTA) {
      onClickUpgrade == null ? void 0 : onClickUpgrade();
      if (accountIsHighSupportPriority) {
        onClickUpgradeForHighSupportPriority == null ? void 0 : onClickUpgradeForHighSupportPriority();
      } else {
        redirectToPricingPage();
      }
    } else if (selectedItem && selectedItem !== NO_CTA) {
      window.open(selectedItem, "_blank");
    }
  };
  return /* @__PURE__ */ jsxRuntime.jsx(Downshift, { onSelect: handleSelect, isOpen, children: ({
    getToggleButtonProps,
    getLabelProps,
    getItemProps,
    isOpen: isOpen2,
    closeMenu,
    highlightedIndex,
    toggleMenu
  }) => {
    const items = [
      {
        title: "Ask Netlify",
        iconName: "ask-netlify",
        href: getAskNetlifyUrl(),
        primary: true,
        description: "Our generative AI chatbot assistant can quickly answer your questions about Netlify.",
        children: "Ask us anything"
      },
      {
        title: "Forums",
        iconName: "user",
        href: helpers_path.forumsPath(),
        description: "Ask questions and find answers from Netlify Support staff and other community members.",
        children: "Visit Netlify Forums"
      },
      {
        title: "Docs",
        iconName: "file",
        href: helpers_path.docsPath(),
        description: "Learn how to make the most of your Netlify sites with detailed instructions, tips, and reference materials.",
        children: "Visit our docs"
      }
    ];
    if (accountIsHighSupportPriority) {
      items.push({
        title: "Email",
        iconName: "email",
        href: getSupportUrl(userEmail),
        description: getSupportDescription(accountSupportLevel),
        children: "Email support"
      });
    }
    if (showUpgrade) {
      items.push({
        title: accountIsHighSupportPriority ? "Enterprise Support" : "Email",
        href: UPGRADE_CTA,
        watermark: accountIsHighSupportPriority ? "support" : "email",
        description: getUpgradeDescription(
          accountIsHighSupportPriority && showUpgrade,
          accountSupportLevel
        ),
        children: /* @__PURE__ */ jsxRuntime.jsx(Button, { variant: "pop", children: "Upgrade" })
      });
    } else {
      items.push(
        {
          title: "Slack",
          iconName: "slack",
          badge: AVAILABLE,
          description: /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [
            /* @__PURE__ */ jsxRuntime.jsx("strong", { className: "tw-font-semibold", children: "Visit your dedicated Slack channel" }),
            " ",
            "to chat with your account team about implementation, best practices, go-live details, and broader support queries."
          ] })
        },
        {
          title: "Emergency phone support",
          iconName: "phone",
          badge: AVAILABLE,
          description: /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [
            "For critical downtime emergencies, you can",
            " ",
            /* @__PURE__ */ jsxRuntime.jsx("strong", { className: "tw-font-semibold", children: "call us at your team’s dedicated phone number" }),
            "."
          ] })
        }
      );
    }
    return /* @__PURE__ */ jsxRuntime.jsxs("div", { className: dropdownWrapperCN, children: [
      /* @__PURE__ */ jsxRuntime.jsxs(
        Button,
        {
          ...getToggleButtonProps({
            "aria-label": `Support. ${isOpen2 ? "Close menu" : "Open menu"}`
          }),
          ...getLabelProps(),
          level: buttonLevel,
          className: notificationsButtonCN({ isOpen: isOpen2 }),
          onClick: () => toggleMenu(),
          children: [
            /* @__PURE__ */ jsxRuntime.jsx(
              DecorativeIcon,
              {
                className: helpers_cn.cn(
                  "tw-shrink-0",
                  "tw-mr-1.5",
                  isOpen2 && "tw-hidden"
                ),
                focusable: "false",
                name: "nav-support"
              }
            ),
            /* @__PURE__ */ jsxRuntime.jsx(
              DecorativeIcon,
              {
                className: helpers_cn.cn(
                  "tw-shrink-0",
                  "tw-mr-1.5",
                  !isOpen2 && "tw-hidden"
                ),
                focusable: "false",
                name: "nav-support-active"
              }
            ),
            /* @__PURE__ */ jsxRuntime.jsx(
              "span",
              {
                className: "layout-toggleable-bold-text",
                "data-text-content": "Support",
                children: "Support"
              }
            )
          ]
        }
      ),
      isOpen2 && /* @__PURE__ */ jsxRuntime.jsx(
        "aside",
        {
          className: helpers_cn.cn(asideCN, {
            "tw-left-auto tw-right-0": align === "right",
            "tw-bottom-10": isMobileNavOpen
          }),
          children: /* @__PURE__ */ jsxRuntime.jsx("ul", { className: "tw-h-full tw-max-h-notifications-list tw-overflow-auto lg-height:tw-max-h-170", children: items.map(
            ({
              title,
              iconName,
              href,
              primary = false,
              watermark,
              badge,
              description,
              children
            }, index) => {
              const isHighlighted = index === highlightedIndex;
              const Component = href ? "a" : "div";
              const isExternalLink = href && typeof children === "string";
              return /* @__PURE__ */ jsxRuntime.jsx(
                "li",
                {
                  className: listItemCN({ watermark, primary }),
                  children: /* @__PURE__ */ jsxRuntime.jsxs(
                    Component,
                    {
                      ...getItemProps({ index, item: href || NO_CTA }),
                      tabIndex: -1,
                      className: listItemLinkCN({
                        isHighlighted,
                        watermark,
                        primary
                      }),
                      children: [
                        /* @__PURE__ */ jsxRuntime.jsxs("span", { className: "tw-sr-only", children: [
                          "Support: ",
                          title
                        ] }),
                        iconName && /* @__PURE__ */ jsxRuntime.jsx(
                          DecorativeIcon,
                          {
                            name: iconName,
                            className: iconCN({ primary })
                          }
                        ),
                        /* @__PURE__ */ jsxRuntime.jsxs("div", { children: [
                          /* @__PURE__ */ jsxRuntime.jsx("div", { className: "tw-flex tw-items-start tw-justify-between", children: /* @__PURE__ */ jsxRuntime.jsxs(
                            "p",
                            {
                              className: listItemHeadingCN({
                                watermark
                              }),
                              children: [
                                /* @__PURE__ */ jsxRuntime.jsx("span", { className: "tw-not-sr-only", children: title }),
                                badge && /* @__PURE__ */ jsxRuntime.jsx("span", { className: badgeCN, children: badge })
                              ]
                            }
                          ) }),
                          /* @__PURE__ */ jsxRuntime.jsx("p", { className: metaCN({ watermark }), children: description }),
                          children && /* @__PURE__ */ jsxRuntime.jsx(
                            "p",
                            {
                              className: helpers_cn.cn(
                                "tw-mt-2",
                                isExternalLink ? externalLinkCN({ isHighlighted }) : void 0
                              ),
                              children
                            }
                          )
                        ] })
                      ]
                    }
                  )
                },
                title
              );
            }
          ) })
        }
      )
    ] });
  } });
}
function getAskNetlifyUrl(message) {
  const url = new URL(helpers_path.docsPath("ask-netlify"));
  const params = new URLSearchParams({ attr: "app" });
  url.search = params.toString();
  return url.href;
}
function getSupportDescription(level) {
  if (level < 1) {
    return "Access support by email.";
  }
  return /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [
    "Private support with guaranteed response times.",
    /* @__PURE__ */ jsxRuntime.jsx("br", {}),
    level === 1 ? "(Business days, 6 AM — 5 PM PST/PDT)" : "24x7x365",
    /* @__PURE__ */ jsxRuntime.jsx("br", {}),
    "Business critical: 1 hour",
    /* @__PURE__ */ jsxRuntime.jsx("br", {}),
    "General issue: 4 hours"
  ] });
}
function getSupportUrl(userEmail) {
  const url = new URL("/support", "https://www.netlify.com");
  const params = new URLSearchParams({
    utm_source: "app-dropdown",
    utm_medium: "app",
    utm_campaign: "support-insights"
  });
  if (userEmail) params.set("email", userEmail);
  url.search = params.toString();
  return url.href;
}
function getUpgradeDescription(upgrade, level) {
  if (upgrade) {
    return "Upgrade to get guaranteed response times and dedicated emergency support.";
  }
  if (level === 1) {
    return "Upgrade to get a dedicated account team and emergency phone support.";
  }
  return "Upgrade to a paid plan to privately email support.";
}
function showUpgradeCallToAction(accountSupportLevel) {
  return accountSupportLevel < 2;
}
function UserDropdown({
  user,
  className,
  onLogout,
  userPath,
  alignRight = true,
  links = [],
  showUserDetails = false,
  menuPosition = "below",
  isNavCollapsed
}) {
  if (!user) {
    return null;
  }
  const { full_name: name = "", email = "" } = user || {};
  const dropdownOptions = [
    {
      label: /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [
        /* @__PURE__ */ jsxRuntime.jsx("strong", { "data-user-name": name, className: "h4 tw-block", children: name }),
        /* @__PURE__ */ jsxRuntime.jsx("small", { "data-user-email": email, className: "meta", children: email })
      ] }),
      to: userPath
    },
    ...links,
    {
      label: "Sign out",
      onClick: onLogout,
      className: "danger"
    }
  ].filter(Boolean);
  return /* @__PURE__ */ jsxRuntime.jsx(
    Dropdown,
    {
      alignRight,
      className,
      noCaret: true,
      noCheck: true,
      variant: "bare",
      toggle: {
        ariaLabel: `User ${email}`,
        activeClassName: "is-active",
        className: helpers_cn.cn(
          "tw-group !tw-bg-transparent",
          showUserDetails ? "tw-flex tw-w-full tw-max-w-full tw-flex-row tw-gap-x-2 tw-overflow-hidden tw-px-1 tw-leading-4" : "tw-relative tw-size-9 tw-p-0 tw-leading-none"
        ),
        label: /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [
          /* @__PURE__ */ jsxRuntime.jsx("span", { className: "tw-relative tw-flex tw-size-[34px] tw-max-w-full tw-shrink-0 tw-items-center tw-rounded-full tw-text-transparent tw-ring-[1.5px] tw-ring-[currentColor] tw-transition-colors tw-duration-150 group-hover:tw-text-teal-action group-[.is-active]:tw-text-teal-action dark:group-hover:tw-text-teal-action dark:group-[.is-active]:tw-text-teal-action", children: /* @__PURE__ */ jsxRuntime.jsx(Avatar, { user, dropdown: true }) }),
          /* @__PURE__ */ jsxRuntime.jsxs(
            "span",
            {
              className: helpers_cn.cn(
                showUserDetails ? helpers_cn.cn(
                  "tw-flex tw-max-w-[calc(100%-34px-theme(spacing.2))] tw-flex-col tw-self-center tw-text-left",
                  "tw-ease-in-out tw-transition-opacity",
                  isNavCollapsed ? "tw-opacity-0 tw-duration-50" : "tw-opacity-100 tw-delay-200 tw-duration-150"
                ) : "tw-sr-only"
              ),
              children: [
                name && /* @__PURE__ */ jsxRuntime.jsx(
                  "span",
                  {
                    className: helpers_cn.cn(
                      showUserDetails && "tw-relative tw-top-px tw-mb-[2px] tw-w-full tw-truncate tw-text-sm tw-font-semibold tw-text-gray-darker dark:tw-text-gray-lighter",
                      !showUserDetails && "tw-sr-only"
                    ),
                    children: name
                  }
                ),
                /* @__PURE__ */ jsxRuntime.jsx(
                  "span",
                  {
                    className: helpers_cn.cn(
                      "tw-w-full tw-truncate tw-text-xs tw-font-regular tw-text-gray-darker dark:tw-text-gray-lighter",
                      !showUserDetails && "tw-sr-only"
                    ),
                    children: email
                  }
                )
              ]
            }
          )
        ] })
      },
      menu: {
        className: helpers_cn.cn(menuPosition === "below" && "tw-top-10 tw-mt-1")
      },
      menuPosition,
      items: dropdownOptions
    }
  );
}
exports.cn = helpers_cn.cn;
exports.getPlaceholderGradientColorsFromId = helpers_placeholderColors.getPlaceholderGradientColorsFromId;
exports.remToPxNumber = helpers_remToPxNumber.remToPxNumber;
exports.getAccountNormalizedPlanName = helpers_account.getAccountNormalizedPlanName;
exports.getAccountPlanTitle = helpers_account.getAccountPlanTitle;
exports.capitalize = helpers_format.capitalize;
exports.pluralize = helpers_format.pluralize;
exports.createExternalTeamsOrganization = helpers_organizations.createExternalTeamsOrganization;
exports.isExternalTeamsOrganization = helpers_organizations.isExternalTeamsOrganization;
exports.getAccountCreatePlan = helpers_plans.getAccountCreatePlan;
exports.getCreatePlanCapabilities = helpers_plans.getCreatePlanCapabilities;
exports.getPlanCapabilities = helpers_plans.getPlanCapabilities;
exports.getPlanCapabilitiesForUI = helpers_plans.getPlanCapabilitiesForUI;
exports.getPlanChangeInfo = helpers_plans.getPlanChangeInfo;
exports.getStandardPlanNames = helpers_plans.getStandardPlanNames;
exports.humanizePlanName = helpers_plans.humanizePlanName;
exports.isPlanAgencyBenefit = helpers_plans.isPlanAgencyBenefit;
exports.isPlanBusiness = helpers_plans.isPlanBusiness;
exports.isPlanBusinessOrHigher = helpers_plans.isPlanBusinessOrHigher;
exports.isPlanEnterprise = helpers_plans.isPlanEnterprise;
exports.isPlanEnterpriseLevel = helpers_plans.isPlanEnterpriseLevel;
exports.isPlanEnterpriseOrHigher = helpers_plans.isPlanEnterpriseOrHigher;
exports.isPlanEnterpriseTrial = helpers_plans.isPlanEnterpriseTrial;
exports.isPlanFree = helpers_plans.isPlanFree;
exports.isPlanFreeOrStarter = helpers_plans.isPlanFreeOrStarter;
exports.isPlanIndia = helpers_plans.isPlanIndia;
exports.isPlanLegacyCreate = helpers_plans.isPlanLegacyCreate;
exports.isPlanLegacyMultiplayerStarter = helpers_plans.isPlanLegacyMultiplayerStarter;
exports.isPlanNetlifriend = helpers_plans.isPlanNetlifriend;
exports.isPlanOpenSource = helpers_plans.isPlanOpenSource;
exports.isPlanOpenSourceUnlimited = helpers_plans.isPlanOpenSourceUnlimited;
exports.isPlanOrb = helpers_plans.isPlanOrb;
exports.isPlanPro = helpers_plans.isPlanPro;
exports.isPlanProOrHigher = helpers_plans.isPlanProOrHigher;
exports.isPlanScheduledDowngrade = helpers_plans.isPlanScheduledDowngrade;
exports.isPlanSelfServe = helpers_plans.isPlanSelfServe;
exports.isPlanStandard = helpers_plans.isPlanStandard;
exports.isPlanStarter = helpers_plans.isPlanStarter;
exports.isPlanTypeOpenSource = helpers_plans.isPlanTypeOpenSource;
exports.isPlanValidForLockedAccounts = helpers_plans.isPlanValidForLockedAccounts;
exports.normalizeTeamPlanName = helpers_plans.normalizeTeamPlanName;
exports.getSiteAddonsInfo = helpers_subscriptions.getSiteAddonsInfo;
exports.humanizeSubscriptionName = helpers_subscriptions.humanizeSubscriptionName;
exports.AccessibleIcon = AccessibleIcon;
exports.Avatar = Avatar;
exports.AvatarList = AvatarList;
exports.Badge = Badge;
exports.BadgeState = BadgeState;
exports.BadgeVariant = BadgeVariant;
exports.BetaBadge = BetaBadge;
exports.Button = Button;
exports.ButtonGroup = ButtonGroup;
exports.ButtonIcon = ButtonIcon;
exports.CommandPaletteSearchButton = CommandPaletteSearchButton;
exports.DecorativeIcon = DecorativeIcon;
exports.Dropdown = Dropdown;
exports.HTMLLink = HTMLLink;
exports.HistoryProvider = HistoryProvider;
exports.Link = Link;
exports.LinkProvider = LinkProvider;
exports.Logo = Logo;
exports.LogoSize = LogoSize;
exports.MainBranchBadge = MainBranchBadge;
exports.Navigation = Navigation;
exports.NavigationButton = NavigationButton;
exports.NewBadge = NewBadge;
exports.Picture = Picture;
exports.PlanBadge = PlanBadge;
exports.PublishedPinnedBadge = PublishedPinnedBadge;
exports.SnapshotContainer = SnapshotContainer;
exports.SupportDropdown = SupportDropdown;
exports.SvgProvider = SvgProvider;
exports.Tooltip = Tooltip;
exports.TrialBadge = TrialBadge;
exports.UserDropdown = UserDropdown;
exports.buttonCN = buttonCN;
exports.generateImageUrl = generateImageUrl;
exports.getActualSizeForNumberValue = getActualSizeForNumberValue;
exports.hideOnEsc = hideOnEsc;
exports.hideOnPopperBlur = hideOnPopperBlur;
exports.isAvatarUrlCustomUpload = isAvatarUrlCustomUpload;
exports.isNetlifyUrl = isNetlifyUrl;
exports.linkCN = linkCN;
exports.logoSizeCN = logoSizeCN;
exports.renderButton = render;
exports.useDropdownAlignment = useDropdownAlignment;
exports.useHistory = useHistory;
exports.useImportSvg = useImportSvg;
exports.useLink = useLink;
//# sourceMappingURL=index.cjs.map
