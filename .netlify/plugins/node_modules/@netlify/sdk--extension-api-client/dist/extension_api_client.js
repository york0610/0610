import { default as w } from "wretch";
import { EXTENSION_API_URL_PROD } from "./constants.js";
import { NetlifyClient } from "./netlify_api_client.js";
/**
 * @internal
 */
export class AlreadyEnabledError extends Error {
    constructor() {
        super("Already enabled");
    }
}
/**
 *
 * The `NetlifyExtensionClient` provides different methods to interact with both the Netlify API and
 * the Extension API.
 *
 * When you install the Netlify SDK, you have access to the TypeScript definitions directly in the
 * `@netlify/sdk` package. You can browse through the definition files individually or review the
 * type definition inline, depending on your code editor.
 *
 * @example
 * ```ts
 * import { withNetlifySDKContext } from "@netlify/sdk/ui/functions";
 *
 * export default withNetlifySDKContext((req, context) => {
 *   const { accountId, auth, client } = context;
 *
 *   const accountInfo = await client.getAccount(accountId);
 *
 *   // Using the userâ€™s OAuth connection to make a request to a third-party API
 *   await fetch("https://api.example.com/project", {
 *     headers: {
 *       Authorization: `Bearer ${auth.providerToken}`,
 *     },
 *     method: "POST",
 *     body: JSON.stringify({
 *       name: `project_${accountInfo.name}`,
 *     }),
 *   });
 *
 *   return Response.json({});
 * });
 * ```
 */
export class NetlifyExtensionClient extends NetlifyClient {
    netlifyToken;
    extension;
    extensionApi;
    teamConfigId;
    siteConfigId;
    constructor(netlifyToken, extension, { jigsawUrl = "", netlifyApiUrl = "", 
    // We allow changing the header name because the netlify extension client needs to pass the token as "netlify-build-bot-token" when used in a build context.
    netlifyTokenIssuer = "jigsaw", } = {}) {
        super(netlifyToken, {
            baseUrl: netlifyApiUrl !== ""
                ? netlifyApiUrl
                : `${EXTENSION_API_URL_PROD}/api/v1`,
        });
        this.netlifyToken = netlifyToken;
        this.extension = extension;
        this.teamConfigId = undefined;
        this.siteConfigId = undefined;
        this.extensionApi = w()
            .url(jigsawUrl !== "" ? jigsawUrl : EXTENSION_API_URL_PROD)
            .headers({
            [netlifyTokenIssuer === "jigsaw"
                ? "netlify-token"
                : "netlify-build-bot-token"]: netlifyToken,
            "Api-Version": "2",
        });
    }
    /**
     * Installs this extension for a team.
     */
    installExtensionOnTeam = async (teamId) => {
        return this.extensionApi
            .url(`/team/${teamId}/integrations/${this.extension}/installation`)
            .post()
            .json();
    };
    /**
     * Uninstalls this extension for a team, which also deletes the configuration.
     */
    uninstallExtensionOnTeam = async (teamId) => {
        return this.extensionApi
            .url(`/team/${teamId}/integrations/${this.extension}/installation`)
            .delete()
            .res();
    };
    /**
     * Upserts a configuration object of type 'team' for the extension installation
     */
    upsertTeamConfiguration = async (teamId, config) => {
        return this.extensionApi
            .url(`/team/${teamId}/integrations/${this.extension}/configuration/team`)
            .put({ config })
            .res();
    };
    /**
     * Creates a team configuration for an extension installation.
     */
    createTeamConfiguration = async (teamId, config) => {
        return this.extensionApi
            .url(`/team/${teamId}/integrations/${this.extension}/configuration/team`)
            .put({ config })
            .res();
    };
    /**
     * Updates the extension configuration for a team.
     */
    updateTeamConfiguration = async (teamId, config) => {
        return this.extensionApi
            .url(`/team/${teamId}/integrations/${this.extension}/configuration/team`)
            .put({ config })
            .res();
    };
    /**
     * Returns the extension configuration for a team for the current extension.
     */
    getTeamConfiguration = async (teamId) => {
        return this.extensionApi
            .url(`/team/${teamId}/integrations/${this.extension}/configuration/team`)
            .get()
            .json()
            .catch((error) => {
            if (typeof error === "object" && error !== null && "status" in error) {
                const status = error.status;
                if (status === 404) {
                    return null;
                }
            }
            throw error;
        });
    };
    /**
     * Deletes a team configuration for uninstalling the extension.
     */
    deleteTeamConfiguration = async (teamId) => {
        return this.extensionApi
            .url(`/team/${teamId}/integrations/${this.extension}/configuration/team`)
            .delete()
            .res();
    };
    /**
     * Upserts a configuration object of type 'site' for the extension installation
     */
    upsertSiteConfiguration = async (teamId, siteId, config) => {
        return this.extensionApi
            .url(`/team/${teamId}/integrations/${this.extension}/configuration/site/${siteId}`)
            .put({ config })
            .res();
    };
    /**
     * Creates a site configuration for an extension installation.
     */
    createSiteConfiguration = async (teamId, siteId, config) => {
        return this.extensionApi
            .url(`/team/${teamId}/integrations/${this.extension}/configuration/site/${siteId}`)
            .put({ config })
            .res();
    };
    /**
     * Updates the extension configuration for a site.
     */
    updateSiteConfiguration = async (teamId, siteId, config) => {
        return this.extensionApi
            .url(`/team/${teamId}/integrations/${this.extension}/configuration/site/${siteId}`)
            .put({ config })
            .res();
    };
    /**
     * Returns the extension configuration for a site for the current extension.
     */
    getSiteConfiguration = async (teamId, siteId) => {
        return this.extensionApi
            .url(`/team/${teamId}/integrations/${this.extension}/configuration/site/${siteId}`)
            .get()
            .json()
            .catch((error) => {
            if (typeof error === "object" && error !== null && "status" in error) {
                const status = error.status;
                if (status === 404) {
                    return null;
                }
            }
            throw error;
        });
    };
    /**
     * List all site configurations for the specified team.
     */
    listSiteConfigurations = async (teamId) => {
        return this.extensionApi
            .url(`/team/${teamId}/integrations/configurations?configuration_type=site`)
            .get()
            .json();
    };
    /**
     * Deletes a site configuration for uninstalling the extension.
     */
    deleteSiteConfiguration = async (teamId, siteId) => {
        return this.extensionApi
            .url(`/team/${teamId}/integrations/${this.extension}/configuration/site/${siteId}`)
            .delete()
            .res();
    };
}
//# sourceMappingURL=extension_api_client.js.map