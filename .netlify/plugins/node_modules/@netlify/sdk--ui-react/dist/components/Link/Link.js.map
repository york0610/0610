{"version":3,"file":"Link.js","sources":["../../../src/components/Link/Link.tsx"],"sourcesContent":["import { Link as BaseLink } from \"@netlify/ui\";\nimport { forwardRef } from \"react\";\n\nconst isLinkInternal = (href: string): boolean => {\n  try {\n    const parsed = new URL(href);\n    // FIXME(ndhoule): This is a little janky; the SDK should pass down the current app origin as context\n    return (\n      parsed.origin === \"https://app.netlifystg.com\" ||\n      parsed.origin === \"https://app.netlify.com\" ||\n      parsed.origin === \"http://localhost:8888\"\n    );\n  } catch {\n    return false;\n  }\n};\n\n/**\n * Detects if a link is internal, external, or neither (when href is `undefined`). If both external\n * and internal are true, preferences external.\n *\n * @internal\n */\nconst getLinkType = ({\n  external,\n  href,\n  internal,\n}: {\n  external?: boolean | undefined;\n  href: string | undefined;\n  internal: boolean | undefined;\n}): \"external\" | \"internal\" | \"none\" => {\n  if (href === undefined) {\n    return \"none\";\n  }\n\n  const isDetectedInternal = isLinkInternal(href);\n\n  if (external === true) {\n    return \"external\";\n  }\n  if (internal === true) {\n    return \"internal\";\n  }\n  if (isDetectedInternal) {\n    return \"internal\";\n  }\n  return \"external\";\n};\n\nexport type LinkProps = {\n  /**\n   * Content to render within the element.\n   */\n  children: React.ReactNode;\n\n  /**\n   * A class property to attach to the element.\n   *\n   * @see {@link !Element.className}\n   */\n  className?: string | undefined;\n\n  /**\n   * Indicates whether or not the link references a URL outside of the Netlify app.\n   *\n   * @default true\n   */\n  external?: boolean | undefined;\n\n  /**\n   * Indicates whether or not the link references a URL inside of the Netlify app.\n   *\n   * @default false\n   */\n  internal?: boolean | undefined;\n\n  /**\n   * The URL that the `Link` points to.\n   */\n  href?: string | undefined;\n};\n\n/**\n * A component used to render URLs.\n *\n * In addition to applying styling your links, using this component ensures your URLs open in a new\n * window. For security reasons, the sandboxed iframe extensions run in restrict modifying the\n * current browsing context's URL; extensions can, however, open links in a new window. We recommend\n * using this component to ensure your links consistently work.\n *\n * @param props\n * @param ref\n */\n// eslint-disable-next-line react/display-name\nexport const Link = forwardRef<\n  HTMLAnchorElement | HTMLButtonElement,\n  LinkProps\n>(({ children, href, internal, external, ...otherProps }, ref) => {\n  const linkType = getLinkType({ href, internal, external });\n\n  return (\n    <BaseLink\n      {...otherProps}\n      action={linkType === \"internal\" ? true : undefined}\n      external={linkType === \"external\" ? true : undefined}\n      href={href}\n      ref={ref}\n      showExternalIcon={linkType === \"external\" ? true : undefined} // right-facing arrow, points diagonally upward\n    >\n      {children}\n    </BaseLink>\n  );\n});\n"],"names":["BaseLink"],"mappings":";;;AAGA,MAAM,iBAAiB,CAAC,SAA0B;AAChD,MAAI;AACF,UAAM,SAAS,IAAI,IAAI,IAAI;AAE3B,WACE,OAAO,WAAW,gCAClB,OAAO,WAAW,6BAClB,OAAO,WAAW;AAAA,EAEtB,QAAQ;AACN,WAAO;AAAA,EACT;AACF;AAQA,MAAM,cAAc,CAAC;AAAA,EACnB;AAAA,EACA;AAAA,EACA;AACF,MAIwC;AACtC,MAAI,SAAS,QAAW;AACtB,WAAO;AAAA,EACT;AAEA,QAAM,qBAAqB,eAAe,IAAI;AAE9C,MAAI,aAAa,MAAM;AACrB,WAAO;AAAA,EACT;AACA,MAAI,aAAa,MAAM;AACrB,WAAO;AAAA,EACT;AACA,MAAI,oBAAoB;AACtB,WAAO;AAAA,EACT;AACA,SAAO;AACT;AA+CO,MAAM,OAAO,WAGlB,CAAC,EAAE,UAAU,MAAM,UAAU,UAAU,GAAG,WAAA,GAAc,QAAQ;AAChE,QAAM,WAAW,YAAY,EAAE,MAAM,UAAU,UAAU;AAEzD,SACE;AAAA,IAACA;AAAAA,IAAA;AAAA,MACE,GAAG;AAAA,MACJ,QAAQ,aAAa,aAAa,OAAO;AAAA,MACzC,UAAU,aAAa,aAAa,OAAO;AAAA,MAC3C;AAAA,MACA;AAAA,MACA,kBAAkB,aAAa,aAAa,OAAO;AAAA,MAElD;AAAA,IAAA;AAAA,EAAA;AAGP,CAAC;"}