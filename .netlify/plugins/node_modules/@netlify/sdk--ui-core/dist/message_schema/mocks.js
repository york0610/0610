import fc from "fast-check";
import { Surfaces } from "../surfaces.js";
import { parseNonUndefined } from "../utils/parsers.js";
import { UI_EXTENSION_HOST_INITIALIZE_EVENT_TYPE, } from "./main.js";
export const SurfaceArbitrary = fc.constantFrom(...Object.values(Surfaces));
export const UIExtensionHostInitializeEventDataContextAuthArbitrary = fc.record({
    netlifyToken: fc.hexaString({ minLength: 1 }),
    providerToken: fc.hexaString({ minLength: 1 }),
    providerTokens: fc.array(fc.record({
        externalId: fc.hexaString({ minLength: 1 }),
        token: fc.hexaString({ minLength: 1 }),
        connectionId: fc.hexaString({ minLength: 1 }),
    }), { minLength: 0 }),
});
export const UIExtensionHostInitializeEventDataContextUserArbitrary = fc.record({
    id: fc.hexaString({ minLength: 1 }),
});
export const UIExtensionHostInitializeEventDataContextVisualEditorArbitrary = fc.record({
    webhookBaseURL: fc.hexaString({ minLength: 1 }),
    projectId: fc.hexaString({ minLength: 1 }),
    notifyVisualEditor: fc.boolean(),
});
export const UIExtensionHostInitializeEventDataContextArbitrary = fc.record({
    auth: UIExtensionHostInitializeEventDataContextAuthArbitrary,
    user: UIExtensionHostInitializeEventDataContextUserArbitrary,
    visualEditor: UIExtensionHostInitializeEventDataContextVisualEditorArbitrary,
    configurationId: fc.hexaString({ minLength: 1 }),
    dataLayerId: fc.hexaString({ minLength: 1 }),
    projectId: fc.hexaString({ minLength: 1 }),
    siteId: fc.hexaString({ minLength: 1 }),
    teamId: fc.hexaString({ minLength: 1 }),
    accountId: fc.hexaString({ minLength: 1 }),
    theme: fc.constantFrom("light", "dark"),
    deployId: fc.hexaString({ minLength: 1 }),
});
export const UIExtensionHostInitializeEventDataExtensionArbitrary = fc.record({
    id: fc.hexaString({ minLength: 1 }),
    name: fc.hexaString({ minLength: 1 }),
    slug: fc.hexaString({ minLength: 1 }),
});
export const UIExtensionHostInitializeEventDataSurfaceArbitrary = fc.record({
    name: SurfaceArbitrary,
});
export const UIExtensionHostInitializeEventDataArbitrary = fc.record({
    context: UIExtensionHostInitializeEventDataContextArbitrary,
    extension: UIExtensionHostInitializeEventDataExtensionArbitrary,
    surface: UIExtensionHostInitializeEventDataSurfaceArbitrary,
});
export const UIExtensionHostInitializeEventArbitrary = fc.record({
    type: fc.constant(UI_EXTENSION_HOST_INITIALIZE_EVENT_TYPE),
    data: UIExtensionHostInitializeEventDataArbitrary,
});
export const createMockUIExtensionHostInitializeEvent = (overrides = {}) => {
    return Object.assign(Object.assign({}, parseNonUndefined(fc.sample(UIExtensionHostInitializeEventArbitrary, 1)[0])), overrides);
};
//# sourceMappingURL=mocks.js.map