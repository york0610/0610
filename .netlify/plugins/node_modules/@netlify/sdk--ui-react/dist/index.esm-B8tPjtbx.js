var executeSnippet = function executeSnippet2() {
  var _ref = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, _ref$wnd = _ref.wnd, wnd = _ref$wnd === void 0 ? window : _ref$wnd;
  (function(win, doc, fsNamespace, tagName, fsScript, script, api, rejector) {
    var valid = function checkNamespace(fsNamespace2) {
      if (!(fsNamespace2 in win)) {
        return true;
      }
      if (win.console && win.console.log) {
        win.console.log('FullStory namespace conflict. Please set window["_fs_namespace"].');
      }
      return false;
    }(fsNamespace);
    if (!valid) return;
    function makeThenable(callback) {
      var waiters = [];
      var resolution;
      function flush() {
        if (!resolution) {
          return;
        }
        waiters.forEach(function(waiter) {
          var result;
          try {
            result = waiter[resolution[0]] && waiter[resolution[0]](resolution[1]);
          } catch (error) {
            waiter[3] && waiter[3](error);
            return;
          }
          if (result && result.then) {
            result.then(waiter[2], waiter[3]);
          } else {
            waiter[2] && waiter[2](result);
          }
        });
        waiters.length = 0;
      }
      function makeHandler(which) {
        return function(value) {
          if (resolution) {
            return;
          }
          resolution = [which, value];
          flush();
        };
      }
      callback(makeHandler(0), makeHandler(1));
      function _then(onFulfilled, onRejected) {
        return makeThenable(function(nextResolve, nextReject) {
          waiters.push([onFulfilled, onRejected, nextResolve, nextReject]);
          flush();
        });
      }
      return {
        then: _then
      };
    }
    api = win[fsNamespace] = function createV2API() {
      var FS = function FS2(action, options, source, apiVersion) {
        apiVersion = apiVersion || 2;
        function setResolve(resolve, reject) {
          api2(action, options, source, resolve, reject, apiVersion);
        }
        var re = /Async$/;
        if (re.test(action)) {
          action = action.replace(re, "");
          if (typeof Promise === "function") {
            return new Promise(setResolve);
          }
          return makeThenable(setResolve);
        }
        var _undefined;
        return api2(action, options, source, _undefined, _undefined, apiVersion);
      };
      function api2(op, args, source, resolve, reject, apiVersion) {
        if (FS._api) {
          return FS._api(op, args, source, resolve, reject, apiVersion);
        }
        if (FS.q) {
          FS.q.push([op, args, source, resolve, reject, apiVersion]);
        }
        return null;
      }
      FS.q = [];
      return FS;
    }();
    rejector = /* @__PURE__ */ function createRejector() {
      return function(reason) {
        function doReject(operation) {
          if (typeof operation[4] === "function") {
            operation[4](new Error(reason));
          }
        }
        var q = api.q;
        if (q) {
          for (var i = 0; i < q.length; i++) {
            doReject(q[i]);
          }
          q.length = 0;
          q.push = doReject;
        }
      };
    }();
    (function insertScript() {
      script = doc.createElement(tagName);
      script.async = true;
      script.crossOrigin = "anonymous";
      script.src = "https://" + fsScript;
      script.onerror = function() {
        rejector("Error loading " + fsScript);
      };
      var firstScript = doc.getElementsByTagName(tagName)[0];
      if (firstScript && firstScript.parentNode) {
        firstScript.parentNode.insertBefore(script, firstScript);
      } else {
        doc.head.appendChild(script);
      }
    })();
    (function translateV1API() {
      function noop() {
      }
      function callAPI(action, option, source) {
        api(action, option, source, 1);
      }
      function setProperties(scope, props, source) {
        callAPI("setProperties", {
          type: scope,
          properties: props
        }, source);
      }
      function setUserProperties(props, source) {
        setProperties("user", props, source);
      }
      function identify(uid, customVars, source) {
        setUserProperties({
          uid
        }, source);
        if (customVars) {
          setUserProperties(customVars, source);
        }
      }
      api.identify = identify;
      api.setUserVars = setUserProperties;
      api.identifyAccount = noop;
      api.clearUserCookie = noop;
      api.setVars = setProperties;
      api.event = function(eventName, eventProps, source) {
        callAPI("trackEvent", {
          name: eventName,
          properties: eventProps
        }, source);
      };
      api.anonymize = function() {
        identify(false);
      };
      api.shutdown = function() {
        callAPI("shutdown");
      };
      api.restart = function() {
        callAPI("restart");
      };
      api.log = function(level, msg) {
        callAPI("log", {
          level,
          msg
        });
      };
      api.consent = function(userConsents) {
        callAPI("setIdentity", {
          consent: !arguments.length || userConsents
        });
      };
    })();
    (function snapshotGlobals() {
      var f = "fetch";
      var xhr = "XMLHttpRequest";
      api._w = {};
      api._w[xhr] = win[xhr];
      api._w[f] = win[f];
      if (win[f]) {
        win[f] = function() {
          return api._w[f].apply(this, arguments);
        };
      }
    })();
    api._v = "2.0.0";
  })(wnd, wnd.document, wnd["_fs_namespace"], "script", wnd["_fs_script"]);
};
var getDocumentVar = function getDocumentVar2(globalVar) {
  return globalVar === "window" ? "document" : "".concat(globalVar, ".document");
};
var toV1String = function toV1String2() {
  var _ref3 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, _ref3$shouldInsertScr = _ref3.shouldInsertScript, shouldInsertScript = _ref3$shouldInsertScr === void 0 ? true : _ref3$shouldInsertScr, _ref3$globalVar = _ref3.globalVar, globalVar = _ref3$globalVar === void 0 ? "window" : _ref3$globalVar, _ref3$apiVersion = _ref3.apiVersion, apiVersion = _ref3$apiVersion === void 0 ? "1.3.0" : _ref3$apiVersion;
  return `(function(m,n,e,t,l,o,g,y){
    if (e in m) {if(m.console && m.console.log) { m.console.log('FullStory namespace conflict. Please set window["_fs_namespace"].');} return;}
    g=m[e]=function(a,b,s){g.q?g.q.push([a,b,s]):g._api(a,b,s);};g.q=[];`.concat(shouldInsertScript ? "\n    o=n.createElement(t);o.async=1;o.crossOrigin='anonymous';o.src='https://'+_fs_script;\n    y=n.getElementsByTagName(t)[0];y.parentNode.insertBefore(o,y);" : "", `
    g.identify=function(i,v,s){g(l,{uid:i},s);if(v)g(l,v,s)};g.setUserVars=function(v,s){g(l,v,s)};g.event=function(i,v,s){g('event',{n:i,p:v},s)};
    g.anonymize=function(){g.identify(!!0)};
    g.shutdown=function(){g("rec",!1)};g.restart=function(){g("rec",!0)};
    g.log = function(a,b){g("log",[a,b])};
    g.consent=function(a){g("consent",!arguments.length||a)};
    g.identifyAccount=function(i,v){o='account';v=v||{};v.acctId=i;g(o,v)};
    g.clearUserCookie=function(){};
    g.setVars=function(n, p){g('setVars',[n,p]);};
    g._w={};y='XMLHttpRequest';g._w[y]=m[y];y='fetch';g._w[y]=m[y];
    if(m[y])m[y]=function(){return g._w[y].apply(this,arguments)};
    g._v="`).concat(apiVersion, '";\n})(').concat(globalVar, ",").concat(getDocumentVar(globalVar), ",").concat(globalVar, "['_fs_namespace'],'script','user');");
};
var initFS = function initFS2(_a) {
  var orgId = _a.orgId, _b = _a.namespace, namespace = _b === void 0 ? "FS" : _b, _c = _a.host, host = _c === void 0 ? "fullstory.com" : _c, _d = _a.script, script = _d === void 0 ? "edge.fullstory.com/s/fs.js" : _d;
  if (!orgId) {
    throw new Error("FullStory orgId is a required parameter");
  }
  window["_fs_host"] = host;
  window["_fs_script"] = script;
  window["_fs_org"] = orgId;
  window["_fs_namespace"] = namespace;
  executeSnippet();
};
toV1String();
export {
  initFS as i
};
//# sourceMappingURL=index.esm-B8tPjtbx.js.map
