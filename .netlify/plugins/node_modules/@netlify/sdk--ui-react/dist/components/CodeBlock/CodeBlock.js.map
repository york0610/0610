{"version":3,"file":"CodeBlock.js","sources":["../../../src/components/CodeBlock/CodeBlock.tsx"],"sourcesContent":["import React, { useLayoutEffect, useState } from \"react\";\nimport { cn } from \"../classnames.js\";\nimport { ClipboardButton } from \"../ClipboardButton/ClipboardButton.js\";\nimport { highlight, isSupportedLanguage, type Language } from \"./highlight.js\";\n\nconst Code = ({\n  children,\n  className, // eslint-disable-line react/prop-types\n  copiable,\n  ...otherProps\n}: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement> & {\n  copiable: boolean;\n}) => (\n  <div className={cn(\"tw-overflow-x-auto\")}>\n    <code\n      className={cn(\n        \"tw-flex\",\n        \"tw-flex-col\",\n        // Required to make right padding apply when scrolling\n        \"tw-float-left\",\n\n        \"tw-py-6\",\n        \"tw-pl-4\",\n        // When the copy button is displayed, add some right padding to extend the scroll distance.\n        // This makes content that would otherwise be rendered underneath the button readable.\n        copiable ? \"tw-pr-20\" : \"tw-pr-4\",\n\n        // Disable line wrapping on long lines (we want long lines to trigger scrolling)\n        \"tw-whitespace-pre\",\n        className,\n      )}\n      {...otherProps}\n    >\n      {children}\n    </code>\n  </div>\n);\n\nconst Pre = ({\n  // Ignore the style prop, which the highlighter uses to set the background color. (In order to\n  // match the Netlify app's highlighter styling, we instead control the background color manually.)\n  style: _style, // eslint-disable-line react/prop-types\n\n  children,\n  className, // eslint-disable-line react/prop-types\n  copiable,\n  copyValue,\n  ...otherProps\n}: React.DetailedHTMLProps<\n  React.HTMLAttributes<HTMLPreElement>,\n  HTMLPreElement\n> & { copiable: boolean; copyValue: string }) => (\n  <pre\n    className={cn(\"tw-bg-black\", \"tw-p-0\", className)}\n    {...otherProps}\n    data-testid=\"codeblock-highlighted\"\n  >\n    {children}\n    {copiable && (\n      <div\n        className={cn(\n          \"tw-absolute\",\n\n          // Vertically center the button and pin it to the top right corner\n          \"tw-top-8\",\n          \"tw-right-8\",\n          \"tw-height-100%\",\n\n          // Add a drop shadow around the button\n          \"tw-shadow-[8px_0_0_8px_theme('colors.black.DEFAULT'),_-8px_1px_12px_12px_theme('colors.black.DEFAULT')]\",\n          \"dark:tw-shadow-[8px_0_0_8px_theme('colors.black.darker'),_-8px_1px_12px_12px_theme('colors.black.darker')]\",\n        )}\n      >\n        <ClipboardButton value={copyValue} />\n      </div>\n    )}\n  </pre>\n);\n\nexport type CodeBlockProps = {\n  /**\n   * Your code (as text).\n   */\n  content: string;\n\n  /**\n   * Whether or not to apply syntax highlighting to the rendered code.\n   *\n   * @default true\n   */\n  highlighting?: boolean | undefined;\n\n  /**\n   * Whether or not to show a clipboard button which, when clicked, copies the current snippet to\n   * the user clipboard.\n   *\n   * @default false\n   */\n  copiable?: boolean | undefined;\n\n  /**\n   * Specify the code language to apply syntax highlighting to the code block.\n   *\n   * @default text\n   */\n  language?: Language | undefined;\n};\n\n/**\n * A code block renders code in a pre-formatted monospace text block with syntax highlighting.\n *\n * ![Code block with syntax highlighting](./screenshots/code_block_with_highlighting.png)\n *\n * @param props\n * @example\n * ```tsx\n * import { CodeBlock } from \"@netlify/sdk/ui/react/components\";\n *\n * <CodeBlock content={`<p>Hello, world!</p>`} language=\"html\" />\n * ```\n * @example\n * ```tsx\n * import { CodeBlock } from \"@netlify/sdk/ui/react/components\";\n *\n * <CodeBlock content={`<p>Hello, world!</p>`} />\n * ```\n */\nexport const CodeBlock = ({\n  content,\n  highlighting = true,\n  copiable = false,\n  language = \"text\",\n}: CodeBlockProps) => {\n  const [nodes, setNodes] = useState<React.JSX.Element | null>(null);\n\n  if (!isSupportedLanguage(language)) {\n    language = \"text\";\n  }\n\n  useLayoutEffect(() => {\n    if (highlighting) {\n      void (async () => {\n        setNodes(\n          await highlight(content, {\n            components: {\n              code: ({ children, className, ...otherProps }) => (\n                <Code copiable={copiable} {...otherProps}>\n                  {children}\n                </Code>\n              ),\n              pre: ({ children, className, ...otherProps }) => (\n                <Pre copiable={copiable} copyValue={content} {...otherProps}>\n                  {children}\n                </Pre>\n              ),\n            },\n            language,\n            theme: \"github-dark-default\",\n          }),\n        );\n      })();\n    }\n  }, [content, highlighting, language, copiable]);\n\n  // Code highlighting is asynchronous. It will usually complete before a user can even notice it,\n  // but show un-highlighted code while the highlighter is working.\n  return (\n    nodes ?? (\n      <Pre className=\"tw-bg-black\" copiable={copiable} copyValue={content}>\n        <Code className=\"tw-text-white\" copiable={copiable}>\n          {content}\n        </Code>\n      </Pre>\n    )\n  );\n};\n"],"names":[],"mappings":";;;;;AAKA,MAAM,OAAO,CAAC;AAAA,EACZ;AAAA,EACA;AAAA;AAAA,EACA;AAAA,EACA,GAAG;AACL,MAGE,oBAAC,OAAA,EAAI,WAAW,GAAG,oBAAoB,GACrC,UAAA;AAAA,EAAC;AAAA,EAAA;AAAA,IACC,WAAW;AAAA,MACT;AAAA,MACA;AAAA;AAAA,MAEA;AAAA,MAEA;AAAA,MACA;AAAA;AAAA;AAAA,MAGA,WAAW,aAAa;AAAA;AAAA,MAGxB;AAAA,MACA;AAAA,IAAA;AAAA,IAED,GAAG;AAAA,IAEH;AAAA,EAAA;AACH,GACF;AAGF,MAAM,MAAM,CAAC;AAAA;AAAA;AAAA,EAGX,OAAO;AAAA;AAAA,EAEP;AAAA,EACA;AAAA;AAAA,EACA;AAAA,EACA;AAAA,EACA,GAAG;AACL,MAIE;AAAA,EAAC;AAAA,EAAA;AAAA,IACC,WAAW,GAAG,eAAe,UAAU,SAAS;AAAA,IAC/C,GAAG;AAAA,IACJ,eAAY;AAAA,IAEX,UAAA;AAAA,MAAA;AAAA,MACA,YACC;AAAA,QAAC;AAAA,QAAA;AAAA,UACC,WAAW;AAAA,YACT;AAAA;AAAA,YAGA;AAAA,YACA;AAAA,YACA;AAAA;AAAA,YAGA;AAAA,YACA;AAAA,UAAA;AAAA,UAGF,UAAA,oBAAC,iBAAA,EAAgB,OAAO,UAAA,CAAW;AAAA,QAAA;AAAA,MAAA;AAAA,IACrC;AAAA,EAAA;AAEJ;AAmDK,MAAM,YAAY,CAAC;AAAA,EACxB;AAAA,EACA,eAAe;AAAA,EACf,WAAW;AAAA,EACX,WAAW;AACb,MAAsB;AACpB,QAAM,CAAC,OAAO,QAAQ,IAAI,SAAmC,IAAI;AAEjE,MAAI,CAAC,oBAAoB,QAAQ,GAAG;AAClC,eAAW;AAAA,EACb;AAEA,kBAAgB,MAAM;AACpB,QAAI,cAAc;AAChB,YAAM,YAAY;AAChB;AAAA,UACE,MAAM,UAAU,SAAS;AAAA,YACvB,YAAY;AAAA,cACV,MAAM,CAAC,EAAE,UAAU,WAAW,GAAG,WAAA,MAC/B,oBAAC,MAAA,EAAK,UAAqB,GAAG,YAC3B,SAAA,CACH;AAAA,cAEF,KAAK,CAAC,EAAE,UAAU,WAAW,GAAG,WAAA,MAC9B,oBAAC,OAAI,UAAoB,WAAW,SAAU,GAAG,YAC9C,SAAA,CACH;AAAA,YAAA;AAAA,YAGJ;AAAA,YACA,OAAO;AAAA,UAAA,CACR;AAAA,QAAA;AAAA,MAEL,GAAA;AAAA,IACF;AAAA,EACF,GAAG,CAAC,SAAS,cAAc,UAAU,QAAQ,CAAC;AAI9C,SACE,SACE,oBAAC,KAAA,EAAI,WAAU,eAAc,UAAoB,WAAW,SAC1D,UAAA,oBAAC,MAAA,EAAK,WAAU,iBAAgB,UAC7B,mBACH,GACF;AAGN;"}